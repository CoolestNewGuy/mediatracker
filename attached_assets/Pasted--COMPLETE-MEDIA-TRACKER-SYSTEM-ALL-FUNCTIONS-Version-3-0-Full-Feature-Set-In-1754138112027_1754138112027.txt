// ===== COMPLETE MEDIA TRACKER SYSTEM - ALL FUNCTIONS =====
// Version 3.0 - Full Feature Set
// Instructions: Copy ALL of this code into Extensions → Apps Script
// Then save and refresh your spreadsheet

// ===== MENU SETUP =====
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('📺 Media Tracker')
    .addItem('➕ Add New Media', 'showAddMediaDialog')
    .addItem('⚡ Quick Update', 'showQuickUpdateSidebar')
    .addItem('📊 Dashboard', 'createDashboard')
    .addItem('🔍 Search All Media', 'showSearchDialog')
    .addItem('📈 Progress Charts', 'showProgressCharts')
    .addItem('🎲 Random Picker', 'showRandomPicker')
    .addItem('📅 Watch Calendar', 'showWatchCalendar')
    .addItem('⏰ Time Tracker', 'showTimeTracker')
    .addSeparator()
    .addItem('💡 Get Recommendations', 'showRecommendations')
    .addItem('🏆 Achievements', 'showAchievements')
    .addItem('📋 Watchlist Planner', 'showWatchlistPlanner')
    .addItem('🔄 Sync Status', 'showSyncStatus')
    .addItem('📊 Statistics Report', 'showStatisticsReport')
    .addSeparator()
    .addItem('📥 Import from CSV', 'importFromCSV')
    .addItem('📤 Export All Data', 'exportAllData')
    .addItem('💾 Backup to Drive', 'performBackup')
    .addItem('🔧 Batch Operations', 'showBatchOperations')
    .addItem('🏷️ Tag Manager', 'showTagManager')
    .addSeparator()
    .addItem('⚙️ Settings', 'showSettings')
    .addItem('🎨 Themes', 'showThemes')
    .addItem('⌨️ Keyboard Shortcuts', 'showShortcuts')
    .addItem('🛠️ Setup Sheets', 'setupMediaTracker')
    .addItem('❓ Help', 'showHelp')
    .addToUi();
}

// ===== SHEET SETUP FUNCTION =====
function setupMediaTracker() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Define sheet configurations
  var sheetConfigs = {
    'Anime': {
      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags'],
      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped'],
      columnWidths: [200, 100, 80, 60, 60, 150, 100, 200, 60, 150]
    },
    'Manhwa': {
      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags'],
      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped'],
      columnWidths: [200, 100, 80, 80, 150, 100, 200, 60, 150]
    },
    'Pornhwa': {
      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags'],
      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped'],
      columnWidths: [200, 100, 80, 80, 150, 100, 200, 60, 150]
    },
    'Novels': {
      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags'],
      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped'],
      columnWidths: [200, 100, 80, 80, 150, 100, 200, 60, 150]
    },
    'Movies': {
      headers: ['Name/Title', 'Status', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags', 'Watch Date'],
      statusOptions: ['To Watch', 'Watched', 'Dropped'],
      columnWidths: [200, 100, 150, 100, 200, 60, 150, 100]
    },
    'TV Shows': {
      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags'],
      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped'],
      columnWidths: [200, 100, 80, 60, 60, 150, 100, 200, 60, 150]
    },
    'Archive': {
      headers: ['Media Type', 'Name/Title', 'Status', 'Progress', 'Season/Chapters', 'Episode', 'Genre', 'Date Added', 'Notes', 'Rating', 'Tags', 'Archived Date'],
      statusOptions: ['Dropped'],
      columnWidths: [80, 200, 100, 80, 100, 60, 150, 100, 200, 60, 150, 100]
    }
  };
  
  var genreOptions = ['Fantasy', 'Sci-Fi', 'Romance', 'Slice of Life', 'Action', 'Adventure', 'Comedy', 'Drama', 'Horror', 'Mystery', 'Thriller', 'Psychological', 'Sports', 'Supernatural', 'Historical'];
  
  // Create and setup each sheet
  Object.keys(sheetConfigs).forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) {
      sheet = ss.insertSheet(sheetName);
    }
    
    var config = sheetConfigs[sheetName];
    
    // Clear existing content
    sheet.clear();
    
    // Set headers
    var headerRange = sheet.getRange(1, 1, 1, config.headers.length);
    headerRange.setValues([config.headers]);
    headerRange.setBackground('#7A1927');
    headerRange.setFontColor('white');
    headerRange.setFontWeight('bold');
    headerRange.setFontSize(11);
    headerRange.setHorizontalAlignment('center');
    
    // Set column widths
    config.columnWidths.forEach(function(width, index) {
      sheet.setColumnWidth(index + 1, width);
    });
    
    // Set up data validation
    if (sheetName !== 'Archive') {
      // Status dropdown
      var statusCol = config.headers.indexOf('Status') + 1;
      if (statusCol > 0) {
        var statusRange = sheet.getRange(2, statusCol, 999, 1);
        var statusRule = SpreadsheetApp.newDataValidation()
          .requireValueInList(config.statusOptions)
          .setAllowInvalid(false)
          .build();
        statusRange.setDataValidation(statusRule);
      }
      
      // Genre dropdown
      var genreCol = config.headers.indexOf('Genre') + 1;
      if (genreCol > 0) {
        var genreRange = sheet.getRange(2, genreCol, 999, 1);
        var genreRule = SpreadsheetApp.newDataValidation()
          .requireValueInList(genreOptions)
          .setAllowInvalid(true) // Allow custom genres
          .build();
        genreRange.setDataValidation(genreRule);
      }
      
      // Rating dropdown
      var ratingCol = config.headers.indexOf('Rating') + 1;
      if (ratingCol > 0) {
        var ratingRange = sheet.getRange(2, ratingCol, 999, 1);
        var ratingRule = SpreadsheetApp.newDataValidation()
          .requireNumberBetween(1, 10)
          .setAllowInvalid(false)
          .build();
        ratingRange.setDataValidation(ratingRule);
      }
    }
    
    // Format the sheet
    sheet.setFrozenRows(1);
    
    // Add alternating row colors
    var dataRange = sheet.getRange(2, 1, 999, config.headers.length);
    dataRange.setBandings([SpreadsheetApp.newBandingTheme()
      .setFirstRowColor('#2a2a2a')
      .setSecondRowColor('#1f1f1f')
      .setHeaderRowColor('#7A1927')
      .setFooterRowColor(null)]);
  });
  
  // Create Settings sheet if it doesn't exist
  var settingsSheet = ss.getSheetByName('Settings');
  if (!settingsSheet) {
    settingsSheet = ss.insertSheet('Settings');
    settingsSheet.getRange('A1').setValue('Setting');
    settingsSheet.getRange('B1').setValue('Value');
    settingsSheet.getRange('A1:B1').setBackground('#7A1927').setFontColor('white').setFontWeight('bold');
    
    // Default settings
    var defaultSettings = [
      ['Theme', 'Dark Red'],
      ['Default View', 'All'],
      ['Items Per Page', '50'],
      ['Auto-Archive Days', '90'],
      ['Show Notifications', 'Yes'],
      ['Date Format', 'MM/DD/YYYY'],
      ['Progress Increment', '1'],
      ['Default Genre', ''],
      ['Backup Frequency', 'Weekly'],
      ['Language', 'English']
    ];
    
    settingsSheet.getRange(2, 1, defaultSettings.length, 2).setValues(defaultSettings);
    settingsSheet.hideSheet();
  }
  
  SpreadsheetApp.getUi().alert('✅ Media Tracker Setup Complete!', 
    'All sheets have been created with:\n' +
    '• Proper formatting and headers\n' +
    '• Data validation dropdowns\n' +
    '• Rating system (1-10)\n' +
    '• Tag support\n' +
    '• Auto-formatting\n\n' +
    'You can now start adding your media!', 
    SpreadsheetApp.getUi().ButtonSet.OK);
}

// ===== ADD MEDIA DIALOG =====
function showAddMediaDialog() {
  var html = HtmlService.createHtmlOutput(getAddMediaHTML())
      .setWidth(450)
      .setHeight(700);
  SpreadsheetApp.getUi()
      .showModalDialog(html, 'Add New Media');
}

function getAddMediaHTML() {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { 
          font-family: 'Segoe UI', Arial, sans-serif; 
          padding: 20px; 
          background: #1a1a1a; 
          color: white; 
          margin: 0;
        }
        .form-group {
          margin-bottom: 20px;
        }
        label {
          display: block;
          margin-bottom: 8px;
          font-weight: 500;
          color: #ff6b6b;
          font-size: 14px;
        }
        input, select, textarea {
          width: 100%;
          padding: 12px;
          background: #2a2a2a;
          border: 2px solid #3a3a3a;
          border-radius: 8px;
          color: white;
          font-size: 14px;
          box-sizing: border-box;
          transition: all 0.3s ease;
        }
        input:focus, select:focus, textarea:focus {
          outline: none;
          border-color: #7A1927;
          box-shadow: 0 0 0 3px rgba(122, 25, 39, 0.2);
        }
        button {
          background: #7A1927;
          color: white;
          padding: 14px 24px;
          border: none;
          border-radius: 8px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          width: 100%;
          margin-top: 10px;
          transition: all 0.3s ease;
        }
        button:hover {
          background: #8B1E2E;
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(122, 25, 39, 0.3);
        }
        .quick-buttons {
          display: flex;
          gap: 8px;
          margin-top: 8px;
        }
        .quick-btn {
          flex: 1;
          padding: 8px;
          font-size: 12px;
          background: #3a3a3a;
          border: 1px solid #4a4a4a;
          border-radius: 6px;
          transition: all 0.2s ease;
        }
        .quick-btn:hover {
          background: #7A1927;
          transform: translateY(-1px);
        }
        .success {
          background: #2d5a2d;
          border: 1px solid #4a8a4a;
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
          display: none;
          animation: slideIn 0.3s ease;
        }
        @keyframes slideIn {
          from { opacity: 0; transform: translateY(-10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .progress-group {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
        }
        .rating-input {
          display: flex;
          gap: 10px;
          align-items: center;
        }
        .rating-input input {
          width: 80px;
        }
        .star-rating {
          display: flex;
          gap: 5px;
          margin-left: 10px;
        }
        .star {
          cursor: pointer;
          color: #4a4a4a;
          font-size: 20px;
          transition: color 0.2s;
        }
        .star:hover,
        .star.active {
          color: #ffd700;
        }
        .tag-input {
          display: flex;
          gap: 10px;
          align-items: center;
        }
        .tag-input input {
          flex: 1;
        }
        .tag-list {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          margin-top: 10px;
        }
        .tag {
          background: #3a3a3a;
          padding: 6px 12px;
          border-radius: 20px;
          font-size: 12px;
          display: flex;
          align-items: center;
          gap: 5px;
          border: 1px solid #4a4a4a;
        }
        .tag-remove {
          cursor: pointer;
          color: #ff6b6b;
          font-weight: bold;
        }
      </style>
    </head>
    <body>
      <div id="success" class="success">
        <strong>✅ Media added successfully!</strong>
      </div>
      
      <form id="mediaForm">
        <div class="form-group">
          <label for="type">Media Type*</label>
          <select id="type" name="type" onchange="updateFormFields()" required>
            <option value="">Select Type...</option>
            <option value="Anime">🎌 Anime</option>
            <option value="Manhwa">📚 Manhwa</option>
            <option value="Pornhwa">🔞 Pornhwa</option>
            <option value="Novels">📖 Novels</option>
            <option value="Movies">🎬 Movies</option>
            <option value="TV Shows">📺 TV Shows</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="title">Title*</label>
          <input type="text" id="title" name="title" placeholder="Enter title..." required>
        </div>
        
        <div class="form-group">
          <label for="status">Status*</label>
          <select id="status" name="status" required>
            <option value="">Select Status...</option>
          </select>
          <div class="quick-buttons">
            <button type="button" class="quick-btn" onclick="setStatus('planned')">📋 To Watch/Read</button>
            <button type="button" class="quick-btn" onclick="setStatus('progress')">▶️ In Progress</button>
            <button type="button" class="quick-btn" onclick="setStatus('completed')">✅ Completed</button>
          </div>
        </div>
        
        <div class="progress-group" id="progressGroup" style="display: none;">
          <div class="form-group" id="seasonGroup">
            <label for="season">Season</label>
            <input type="number" id="season" name="season" min="1" value="1">
          </div>
          <div class="form-group" id="episodeGroup">
            <label for="episode" id="episodeLabel">Episode</label>
            <input type="number" id="episode" name="episode" min="0" value="0">
          </div>
        </div>
        
        <div class="form-group">
          <label for="genre">Genre</label>
          <select id="genre" name="genre">
            <option value="">Select Genre...</option>
            <option value="Fantasy">🐉 Fantasy</option>
            <option value="Sci-Fi">🚀 Sci-Fi</option>
            <option value="Romance">💕 Romance</option>
            <option value="Slice of Life">🌸 Slice of Life</option>
            <option value="Action">⚡ Action</option>
            <option value="Adventure">🗺️ Adventure</option>
            <option value="Comedy">😂 Comedy</option>
            <option value="Drama">🎭 Drama</option>
            <option value="Horror">👻 Horror</option>
            <option value="Mystery">🔍 Mystery</option>
            <option value="Thriller">😱 Thriller</option>
            <option value="Psychological">🧠 Psychological</option>
            <option value="Sports">⚽ Sports</option>
            <option value="Supernatural">✨ Supernatural</option>
            <option value="Historical">📜 Historical</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="rating">Rating (1-10)</label>
          <div class="rating-input">
            <input type="number" id="rating" name="rating" min="1" max="10" step="0.5">
            <div class="star-rating" id="starRating">
              <span class="star" data-rating="2">★</span>
              <span class="star" data-rating="4">★</span>
              <span class="star" data-rating="6">★</span>
              <span class="star" data-rating="8">★</span>
              <span class="star" data-rating="10">★</span>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label for="tags">Tags</label>
          <div class="tag-input">
            <input type="text" id="tagInput" placeholder="Add tags (press Enter)">
            <button type="button" onclick="addTag()">Add</button>
          </div>
          <div class="tag-list" id="tagList"></div>
          <input type="hidden" id="tags" name="tags">
        </div>
        
        <div class="form-group">
          <label for="notes">Notes</label>
          <textarea id="notes" name="notes" rows="3" placeholder="Add any notes..."></textarea>
        </div>
        
        <button type="button" onclick="submitForm()">➕ Add Media</button>
      </form>
      
      <script>
        var tags = [];
        
        function updateFormFields() {
          var type = document.getElementById('type').value;
          var statusSelect = document.getElementById('status');
          var progressGroup = document.getElementById('progressGroup');
          var seasonGroup = document.getElementById('seasonGroup');
          var episodeLabel = document.getElementById('episodeLabel');
          
          // Clear existing options
          statusSelect.innerHTML = '<option value="">Select Status...</option>';
          
          // Hide/show fields based on type
          if (type === 'Movies') {
            statusSelect.innerHTML += '<option value="To Watch">To Watch</option>';
            statusSelect.innerHTML += '<option value="Watched">Watched</option>';
            statusSelect.innerHTML += '<option value="Dropped">Dropped</option>';
            progressGroup.style.display = 'none';
          } else if (type === 'Anime' || type === 'TV Shows') {
            statusSelect.innerHTML += '<option value="To Watch">To Watch</option>';
            statusSelect.innerHTML += '<option value="In Progress">In Progress</option>';
            statusSelect.innerHTML += '<option value="Watched">Watched</option>';
            statusSelect.innerHTML += '<option value="Dropped">Dropped</option>';
            progressGroup.style.display = 'grid';
            seasonGroup.style.display = 'block';
            episodeLabel.textContent = 'Episode';
          } else {
            statusSelect.innerHTML += '<option value="To Read">To Read</option>';
            statusSelect.innerHTML += '<option value="In Progress">In Progress</option>';
            statusSelect.innerHTML += '<option value="Read">Read</option>';
            statusSelect.innerHTML += '<option value="Dropped">Dropped</option>';
            progressGroup.style.display = 'grid';
            seasonGroup.style.display = 'none';
            episodeLabel.textContent = 'Chapter';
          }
        }
        
        function setStatus(type) {
          var statusSelect = document.getElementById('status');
          var mediaType = document.getElementById('type').value;
          
          if (type === 'planned') {
            if (mediaType === 'Anime' || mediaType === 'TV Shows' || mediaType === 'Movies') {
              statusSelect.value = 'To Watch';
            } else {
              statusSelect.value = 'To Read';
            }
          } else if (type === 'progress') {
            statusSelect.value = 'In Progress';
          } else if (type === 'completed') {
            if (mediaType === 'Anime' || mediaType === 'TV Shows' || mediaType === 'Movies') {
              statusSelect.value = 'Watched';
            } else {
              statusSelect.value = 'Read';
            }
          }
        }
        
        // Star rating functionality
        document.querySelectorAll('.star').forEach(function(star) {
          star.addEventListener('click', function() {
            var rating = this.getAttribute('data-rating');
            document.getElementById('rating').value = rating;
            updateStars(rating);
          });
        });
        
        function updateStars(rating) {
          document.querySelectorAll('.star').forEach(function(star) {
            if (parseInt(star.getAttribute('data-rating')) <= parseInt(rating)) {
              star.classList.add('active');
            } else {
              star.classList.remove('active');
            }
          });
        }
        
        document.getElementById('rating').addEventListener('input', function() {
          updateStars(this.value);
        });
        
        // Tag functionality
        document.getElementById('tagInput').addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            addTag();
          }
        });
        
        function addTag() {
          var input = document.getElementById('tagInput');
          var tag = input.value.trim();
          
          if (tag && !tags.includes(tag)) {
            tags.push(tag);
            renderTags();
            input.value = '';
          }
        }
        
        function removeTag(tag) {
          tags = tags.filter(t => t !== tag);
          renderTags();
        }
        
        function renderTags() {
          var tagList = document.getElementById('tagList');
          tagList.innerHTML = tags.map(tag => 
            '<span class="tag">' + tag + 
            '<span class="tag-remove" onclick="removeTag(\'' + tag + '\')">×</span></span>'
          ).join('');
          document.getElementById('tags').value = tags.join(',');
        }
        
        function submitForm() {
          var form = document.getElementById('mediaForm');
          var formData = new FormData(form);
          
          if (!formData.get('type') || !formData.get('title') || !formData.get('status')) {
            alert('Please fill in all required fields');
            return;
          }
          
          var mediaData = {
            type: formData.get('type'),
            title: formData.get('title'),
            status: formData.get('status'),
            genre: formData.get('genre'),
            notes: formData.get('notes'),
            rating: formData.get('rating'),
            tags: tags.join(',')
          };
          
          // Handle progress
          var type = formData.get('type');
          if (type === 'Anime' || type === 'TV Shows') {
            mediaData.season = formData.get('season');
            mediaData.episode = formData.get('episode');
          } else if (type !== 'Movies') {
            mediaData.chapter = formData.get('episode');
          }
          
          google.script.run
            .withSuccessHandler(function(result) {
              document.getElementById('success').style.display = 'block';
              form.reset();
              tags = [];
              renderTags();
              updateStars(0);
              setTimeout(function() {
                document.getElementById('success').style.display = 'none';
              }, 3000);
            })
            .withFailureHandler(function(error) {
              alert('Error adding media: ' + error.toString());
            })
            .addMedia(mediaData);
        }
      </script>
    </body>
    </html>
  `;
}

function addMedia(mediaData) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(mediaData.type);
  
  if (!sheet) {
    throw new Error('Sheet not found: ' + mediaData.type);
  }
  
  var row = [];
  var dateAdded = new Date().toLocaleDateString();
  
  switch(mediaData.type) {
    case 'Anime':
    case 'TV Shows':
      var progress = '';
      if (mediaData.season && mediaData.episode) {
        progress = 'S' + mediaData.season + 'E' + mediaData.episode;
      }
      row = [
        mediaData.title,
        mediaData.status,
        progress,
        mediaData.season || '',
        mediaData.episode || '',
        mediaData.genre || '',
        dateAdded,
        mediaData.notes || '',
        mediaData.rating || '',
        mediaData.tags || ''
      ];
      break;
      
    case 'Manhwa':
    case 'Pornhwa':
    case 'Novels':
      var progress = mediaData.chapter ? 'Ch' + mediaData.chapter : '';
      row = [
        mediaData.title,
        mediaData.status,
        progress,
        mediaData.chapter || '',
        mediaData.genre || '',
        dateAdded,
        mediaData.notes || '',
        mediaData.rating || '',
        mediaData.tags || ''
      ];
      break;
      
    case 'Movies':
      row = [
        mediaData.title,
        mediaData.status,
        mediaData.genre || '',
        dateAdded,
        mediaData.notes || '',
        mediaData.rating || '',
        mediaData.tags || '',
        '' // Watch date - filled when status changes to Watched
      ];
      break;
  }
  
  sheet.appendRow(row);
  
  // Log activity
  logActivity('add', mediaData);
  
  // Check achievements
  checkAchievements('add', mediaData);
  
  // Auto-archive if dropped
  if (mediaData.status === 'Dropped') {
    moveToArchive(sheet, sheet.getLastRow());
  }
  
  return true;
}

// ===== QUICK UPDATE SIDEBAR =====
function showQuickUpdateSidebar() {
  var html = HtmlService.createHtmlOutput(getQuickUpdateHTML())
      .setTitle('⚡ Quick Update')
      .setWidth(350);
  SpreadsheetApp.getUi().showSidebar(html);
}

function getQuickUpdateHTML() {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body {
          font-family: 'Segoe UI', Arial, sans-serif;
          padding: 15px;
          background: #1a1a1a;
          color: white;
          margin: 0;
        }
        h3 {
          color: #ff6b6b;
          margin-top: 0;
          margin-bottom: 20px;
        }
        .stats {
          background: #2a2a2a;
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
          text-align: center;
          border: 1px solid #3a3a3a;
        }
        .stats-number {
          font-size: 28px;
          font-weight: bold;
          color: #ff6b6b;
        }
        .item {
          background: #2a2a2a;
          border: 1px solid #3a3a3a;
          border-radius: 8px;
          padding: 15px;
          margin-bottom: 12px;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }
        .item:hover {
          transform: translateX(5px);
          border-color: #7A1927;
          box-shadow: 0 2px 8px rgba(122, 25, 39, 0.2);
        }
        .item-title {
          font-weight: 600;
          margin-bottom: 8px;
          color: #ff6b6b;
          font-size: 16px;
        }
        .item-info {
          font-size: 13px;
          color: #ccc;
          margin-bottom: 10px;
        }
        .item-progress {
          background: #3a3a3a;
          padding: 4px 8px;
          border-radius: 4px;
          display: inline-block;
          font-family: monospace;
          font-size: 14px;
          margin-right: 5px;
        }
        .buttons {
          display: flex;
          gap: 8px;
          margin-top: 10px;
        }
        .btn {
          flex: 1;
          padding: 8px 12px;
          background: #7A1927;
          color: white;
          border: none;
          border-radius: 6px;
          cursor: pointer;
          font-size: 14px;
          font-weight: 500;
          transition: all 0.2s ease;
        }
        .btn:hover {
          background: #8B1E2E;
          transform: translateY(-1px);
        }
        .btn:active {
          transform: translateY(0);
        }
        .complete-btn {
          background: #2d5a2d;
        }
        .complete-btn:hover {
          background: #3a6a3a;
        }
        .drop-btn {
          background: #5a2d2d;
        }
        .drop-btn:hover {
          background: #6a3a3a;
        }
        .refresh-btn {
          width: 100%;
          margin-bottom: 20px;
          padding: 12px;
          background: #3a3a3a;
          font-size: 16px;
        }
        .refresh-btn:hover {
          background: #4a4a4a;
        }
        .no-items {
          text-align: center;
          color: #888;
          padding: 40px 20px;
          background: #2a2a2a;
          border-radius: 8px;
          border: 1px dashed #3a3a3a;
        }
        .loading {
          text-align: center;
          padding: 40px;
          color: #888;
        }
        .filter-buttons {
          display: flex;
          gap: 8px;
          margin-bottom: 20px;
        }
        .filter-btn {
          flex: 1;
          padding: 8px;
          background: #2a2a2a;
          border: 1px solid #3a3a3a;
          color: #ccc;
          cursor: pointer;
          border-radius: 6px;
          font-size: 13px;
          transition: all 0.2s ease;
        }
        .filter-btn.active {
          background: #7A1927;
          color: white;
          border-color: #7A1927;
        }
        .filter-btn:hover:not(.active) {
          background: #3a3a3a;
        }
        .updated {
          animation: flash 0.5s ease;
        }
        @keyframes flash {
          0% { background-color: #2d5a2d; }
          100% { background-color: #2a2a2a; }
        }
        .progress-indicator {
          position: absolute;
          top: 0;
          left: 0;
          height: 3px;
          background: #7A1927;
          transition: width 0.3s ease;
        }
      </style>
    </head>
    <body>
      <h3>⚡ Quick Update Center</h3>
      
      <div class="stats">
        <div class="stats-number" id="itemCount">0</div>
        <div>Items in Progress</div>
      </div>
      
      <button class="btn refresh-btn" onclick="loadItems()">🔄 Refresh List</button>
      
      <div class="filter-buttons">
        <button class="filter-btn active" onclick="setFilter('all')">All</button>
        <button class="filter-btn" onclick="setFilter('anime')">Anime</button>
        <button class="filter-btn" onclick="setFilter('reading')">Reading</button>
        <button class="filter-btn" onclick="setFilter('recent')">Recent</button>
      </div>
      
      <div id="items">
        <div class="loading">Loading your in-progress items...</div>
      </div>
      
      <script>
        let allItems = [];
        let currentFilter = 'all';
        
        function loadItems() {
          document.getElementById('items').innerHTML = '<div class="loading">Refreshing...</div>';
          
          google.script.run
            .withSuccessHandler(function(items) {
              allItems = items;
              displayItems();
            })
            .withFailureHandler(function(error) {
              document.getElementById('items').innerHTML = 
                '<div class="no-items">Error loading items: ' + error + '</div>';
            })
            .getInProgressItems();
        }
        
        function setFilter(filter) {
          currentFilter = filter;
          document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
          });
          event.target.classList.add('active');
          displayItems();
        }
        
        function displayItems() {
          let items = allItems;
          
          // Apply filters
          if (currentFilter === 'anime') {
            items = items.filter(item => item.type === 'Anime' || item.type === 'TV Shows');
          } else if (currentFilter === 'reading') {
            items = items.filter(item => ['Manhwa', 'Pornhwa', 'Novels'].includes(item.type));
          } else if (currentFilter === 'recent') {
            // Sort by most recently updated (you'd need to track this)
            items = items.slice(0, 10);
          }
          
          const container = document.getElementById('items');
          document.getElementById('itemCount').textContent = items.length;
          
          if (items.length === 0) {
            container.innerHTML = '<div class="no-items">No items in progress</div>';
            return;
          }
          
          let html = '';
          items.forEach(function(item, index) {
            const progressPercent = calculateProgressPercent(item);
            
            html += '<div class="item" id="item-' + index + '">';
            html += '<div class="progress-indicator" style="width: ' + progressPercent + '%"></div>';
            html += '<div class="item-title">' + escapeHtml(item.title) + '</div>';
            html += '<div class="item-info">';
            html += item.type + ' • ';
            html += '<span class="item-progress">' + (item.currentProgress || 'No progress') + '</span>';
            if (item.rating) html += ' • ⭐ ' + item.rating;
            html += '</div>';
            html += '<div class="buttons">';
            html += '<button class="btn" onclick="increment(' + index + ')">+1</button>';
            html += '<button class="btn" onclick="customIncrement(' + index + ')">+5</button>';
            html += '<button class="btn complete-btn" onclick="markComplete(' + index + ')">✓</button>';
            html += '<button class="btn drop-btn" onclick="dropItem(' + index + ')">✗</button>';
            html += '</div>';
            html += '</div>';
          });
          
          container.innerHTML = html;
        }
        
        function calculateProgressPercent(item) {
          // This is a simple calculation - you can make it more sophisticated
          if (!item.currentProgress) return 0;
          
          const match = item.currentProgress.match(/(\d+)/);
          if (match) {
            const current = parseInt(match[1]);
            // Assume 100 chapters or 24 episodes as default max
            const max = item.type === 'Anime' || item.type === 'TV Shows' ? 24 : 100;
            return Math.min((current / max) * 100, 100);
          }
          return 0;
        }
        
        function escapeHtml(text) {
          const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
          };
          return text.replace(/[&<>"']/g, m => map[m]);
        }
        
        function increment(index) {
          updateProgress(index, 1);
        }
        
        function customIncrement(index) {
          updateProgress(index, 5);
        }
        
        function updateProgress(index, amount) {
          const item = allItems[index];
          const card = document.getElementById('item-' + index);
          const btn = card.querySelector('.btn');
          
          btn.disabled = true;
          btn.textContent = '...';
          
          google.script.run
            .withSuccessHandler(function(newProgress) {
              if (newProgress) {
                allItems[index].currentProgress = newProgress;
                card.classList.add('updated');
                setTimeout(() => card.classList.remove('updated'), 500);
                displayItems();
              }
            })
            .withFailureHandler(function(error) {
              alert('Error: ' + error);
              btn.disabled = false;
              btn.textContent = '+' + amount;
            })
            .incrementProgress(item.type, item.title, amount);
        }
        
        function markComplete(index) {
          const item = allItems[index];
          if (!confirm('Mark "' + item.title + '" as completed?')) return;
          
          google.script.run
            .withSuccessHandler(function() {
              allItems.splice(index, 1);
              displayItems();
            })
            .withFailureHandler(function(error) {
              alert('Error: ' + error);
            })
            .markItemComplete(item.type, item.title);
        }
        
        function dropItem(index) {
          const item = allItems[index];
          if (!confirm('Drop "' + item.title + '"? This will move it to the Archive.')) return;
          
          google.script.run
            .withSuccessHandler(function() {
              allItems.splice(index, 1);
              displayItems();
            })
            .withFailureHandler(function(error) {
              alert('Error: ' + error);
            })
            .dropItem(item.type, item.title);
        }
        
        // Load items on start
        loadItems();
        
        // Auto-refresh every 5 minutes
        setInterval(loadItems, 300000);
      </script>
    </body>
    </html>
  `;
}

function getInProgressItems() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];
  var items = [];
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var statusCol = headers.indexOf('Status');
    var titleCol = headers.indexOf('Name/Title');
    var progressCol = headers.indexOf('Progress');
    var ratingCol = headers.indexOf('Rating');
    var tagsCol = headers.indexOf('Tags');
    var dateCol = headers.indexOf('Date Added');
    
    for (var i = 1; i < data.length; i++) {
      if (data[i][statusCol] === 'In Progress' && data[i][titleCol]) {
        items.push({
          type: sheetName,
          title: data[i][titleCol],
          currentProgress: data[i][progressCol] || '',
          rating: data[i][ratingCol] || '',
          tags: data[i][tagsCol] || '',
          dateAdded: data[i][dateCol] || '',
          row: i + 1
        });
      }
    }
  });
  
  // Sort by date added (most recent first)
  items.sort(function(a, b) {
    if (!a.dateAdded || !b.dateAdded) return 0;
    return new Date(b.dateAdded) - new Date(a.dateAdded);
  });
  
  return items;
}

function incrementProgress(type, title, amount) {
  amount = amount || 1;
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(type);
  if (!sheet) return null;
  
  var data = sheet.getDataRange().getValues();
  var headers = data[0];
  var titleCol = headers.indexOf('Name/Title');
  var progressCol = headers.indexOf('Progress');
  var seasonCol = headers.indexOf('Season');
  var episodeCol = headers.indexOf('Episode');
  var chapterCol = headers.indexOf('Chapters');
  
  for (var i = 1; i < data.length; i++) {
    if (data[i][titleCol] === title) {
      var currentProgress = data[i][progressCol] || '';
      var newProgress = '';
      
      if (type === 'Anime' || type === 'TV Shows') {
        var match = currentProgress.match(/S(\d+)E(\d+)/);
        if (match) {
          var season = parseInt(match[1]);
          var episode = parseInt(match[2]) + amount;
          newProgress = 'S' + season + 'E' + episode;
          sheet.getRange(i + 1, progressCol + 1).setValue(newProgress);
          if (episodeCol >= 0) sheet.getRange(i + 1, episodeCol + 1).setValue(episode);
        } else {
          // Default to S1E1 if no progress
          newProgress = 'S1E' + amount;
          sheet.getRange(i + 1, progressCol + 1).setValue(newProgress);
          if (seasonCol >= 0) sheet.getRange(i + 1, seasonCol + 1).setValue(1);
          if (episodeCol >= 0) sheet.getRange(i + 1, episodeCol + 1).setValue(amount);
        }
      } else {
        var match = currentProgress.match(/Ch(\d+)/);
        if (match) {
          var chapter = parseInt(match[1]) + amount;
          newProgress = 'Ch' + chapter;
          sheet.getRange(i + 1, progressCol + 1).setValue(newProgress);
          if (chapterCol >= 0) sheet.getRange(i + 1, chapterCol + 1).setValue(chapter);
        } else {
          // Default to Ch1 if no progress
          newProgress = 'Ch' + amount;
          sheet.getRange(i + 1, progressCol + 1).setValue(newProgress);
          if (chapterCol >= 0) sheet.getRange(i + 1, chapterCol + 1).setValue(amount);
        }
      }
      
      // Log activity
      logActivity('progress', {type: type, title: title, newProgress: newProgress});
      
      // Check achievements
      checkAchievements('progress', {type: type, title: title, amount: amount});
      
      return newProgress;
    }
  }
  return null;
}

function markItemComplete(type, title) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(type);
  if (!sheet) return false;
  
  var data = sheet.getDataRange().getValues();
  var headers = data[0];
  var titleCol = headers.indexOf('Name/Title');
  var statusCol = headers.indexOf('Status');
  var watchDateCol = headers.indexOf('Watch Date');
  
  var completedStatus = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';
  
  for (var i = 1; i < data.length; i++) {
    if (data[i][titleCol] === title) {
      sheet.getRange(i + 1, statusCol + 1).setValue(completedStatus);
      
      // Add completion date for movies
      if (type === 'Movies' && watchDateCol >= 0) {
        sheet.getRange(i + 1, watchDateCol + 1).setValue(new Date().toLocaleDateString());
      }
      
      // Log activity
      logActivity('complete', {type: type, title: title});
      
      // Check achievements
      checkAchievements('complete', {type: type, title: title});
      
      return true;
    }
  }
  return false;
}

function dropItem(type, title) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(type);
  if (!sheet) return false;
  
  var data = sheet.getDataRange().getValues();
  var headers = data[0];
  var titleCol = headers.indexOf('Name/Title');
  var statusCol = headers.indexOf('Status');
  
  for (var i = 1; i < data.length; i++) {
    if (data[i][titleCol] === title) {
      sheet.getRange(i + 1, statusCol + 1).setValue('Dropped');
      
      // Move to archive
      moveToArchive(sheet, i + 1);
      
      // Log activity
      logActivity('drop', {type: type, title: title});
      
      return true;
    }
  }
  return false;
}

// ===== DASHBOARD =====
function createDashboard() {
  var stats = getDetailedStats();
  var recentActivity = getRecentActivity();
  var genreAnalysis = analyzeGenres();
  
  var html = HtmlService.createHtmlOutput(getDashboardHTML(stats, recentActivity, genreAnalysis))
    .setWidth(800)
    .setHeight(900);
    
  SpreadsheetApp.getUi().showModalDialog(html, '📊 Media Dashboard');
}

function getDashboardHTML(stats, activity, genres) {
  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);
  var completionRate = stats.total > 0 ? Math.round((totalCompleted / stats.total) * 100) : 0;
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { 
          font-family: 'Segoe UI', Arial, sans-serif; 
          padding: 20px; 
          background: #1a1a1a; 
          color: white; 
          margin: 0;
        }
        h1 { 
          color: #ff6b6b; 
          margin-bottom: 30px;
          font-size: 28px;
        }
        .dashboard-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        .stat-card {
          background: #2a2a2a;
          padding: 20px;
          border-radius: 12px;
          border: 1px solid #3a3a3a;
          transition: all 0.3s ease;
        }
        .stat-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        .stat-title {
          font-size: 14px;
          color: #888;
          margin-bottom: 10px;
          text-transform: uppercase;
          letter-spacing: 1px;
        }
        .stat-number {
          font-size: 36px;
          color: #ff6b6b;
          font-weight: bold;
          margin-bottom: 5px;
        }
        .stat-subtitle {
          font-size: 14px;
          color: #ccc;
        }
        .progress-bar {
          background: #3a3a3a;
          height: 24px;
          border-radius: 12px;
          overflow: hidden;
          margin: 15px 0;
          position: relative;
        }
        .progress-fill {
          background: linear-gradient(90deg, #7A1927, #ff6b6b);
          height: 100%;
          transition: width 0.5s ease;
          display: flex;
          align-items: center;
          padding: 0 10px;
          color: white;
          font-weight: bold;
          font-size: 14px;
        }
        .chart-container {
          background: #2a2a2a;
          padding: 20px;
          border-radius: 12px;
          border: 1px solid #3a3a3a;
          margin-bottom: 20px;
        }
        .chart-title {
          font-size: 18px;
          color: #ff6b6b;
          margin-bottom: 20px;
          font-weight: 600;
        }
        .genre-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 10px 0;
          border-bottom: 1px solid #3a3a3a;
        }
        .genre-item:last-child {
          border-bottom: none;
        }
        .genre-name {
          display: flex;
          align-items: center;
          gap: 10px;
        }
        .genre-bar {
          height: 8px;
          background: #3a3a3a;
          border-radius: 4px;
          flex: 1;
          margin: 0 15px;
          overflow: hidden;
        }
        .genre-fill {
          height: 100%;
          background: #7A1927;
          border-radius: 4px;
          transition: width 0.5s ease;
        }
        .activity-item {
          padding: 12px;
          background: #3a3a3a;
          border-radius: 8px;
          margin-bottom: 10px;
          display: flex;
          align-items: center;
          gap: 15px;
          font-size: 14px;
        }
        .activity-icon {
          font-size: 20px;
        }
        .activity-time {
          color: #888;
          font-size: 12px;
          margin-left: auto;
        }
        .type-grid {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 15px;
        }
        .type-card {
          background: #3a3a3a;
          padding: 15px;
          border-radius: 8px;
          text-align: center;
          border: 1px solid #4a4a4a;
        }
        .type-icon {
          font-size: 24px;
          margin-bottom: 10px;
        }
        .type-name {
          font-size: 14px;
          color: #ccc;
          margin-bottom: 5px;
        }
        .type-count {
          font-size: 20px;
          font-weight: bold;
          color: #ff6b6b;
        }
        .quick-stats {
          display: flex;
          gap: 20px;
          margin-bottom: 30px;
          flex-wrap: wrap;
        }
        .quick-stat {
          background: linear-gradient(135deg, #2a2a2a, #3a3a3a);
          padding: 15px 25px;
          border-radius: 25px;
          display: flex;
          align-items: center;
          gap: 15px;
          border: 1px solid #4a4a4a;
        }
        .quick-stat-icon {
          font-size: 24px;
        }
        .quick-stat-text {
          font-size: 16px;
        }
      </style>
    </head>
    <body>
      <h1>📊 Your Media Dashboard</h1>
      
      <div class="quick-stats">
        <div class="quick-stat">
          <span class="quick-stat-icon">📚</span>
          <span class="quick-stat-text">${stats.total} Total Items</span>
        </div>
        <div class="quick-stat">
          <span class="quick-stat-icon">🎯</span>
          <span class="quick-stat-text">${completionRate}% Completion</span>
        </div>
        <div class="quick-stat">
          <span class="quick-stat-icon">▶️</span>
          <span class="quick-stat-text">${stats.inProgressCount} In Progress</span>
        </div>
        <div class="quick-stat">
          <span class="quick-stat-icon">⭐</span>
          <span class="quick-stat-text">${stats.avgRating || 'N/A'} Avg Rating</span>
        </div>
      </div>
      
      <div class="dashboard-grid">
        <div class="stat-card">
          <div class="stat-title">Total Library</div>
          <div class="stat-number">${stats.total}</div>
          <div class="stat-subtitle">Items tracked</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-title">Completed</div>
          <div class="stat-number">${totalCompleted}</div>
          <div class="stat-subtitle">${completionRate}% completion rate</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-title">In Progress</div>
          <div class="stat-number">${stats.inProgressCount}</div>
          <div class="stat-subtitle">Currently active</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-title">This Month</div>
          <div class="stat-number">${stats.thisMonthAdded}</div>
          <div class="stat-subtitle">New additions</div>
        </div>
      </div>
      
      <div class="chart-container">
        <div class="chart-title">Progress Overview</div>
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${completionRate}%">
            ${completionRate}% Complete
          </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 10px; font-size: 14px;">
          <span>📋 Planned: ${stats.plannedCount}</span>
          <span>▶️ In Progress: ${stats.inProgressCount}</span>
          <span>✅ Completed: ${totalCompleted}</span>
          <span>❌ Dropped: ${stats.droppedCount}</span>
        </div>
      </div>
      
      <div class="dashboard-grid">
        <div class="chart-container">
          <div class="chart-title">Media Types</div>
          <div class="type-grid">
            ${Object.keys(stats.byType).map(type => `
              <div class="type-card">
                <div class="type-icon">${getTypeIcon(type)}</div>
                <div class="type-name">${type}</div>
                <div class="type-count">${stats.byType[type].total}</div>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="chart-container">
          <div class="chart-title">Top Genres</div>
          ${genres.slice(0, 5).map((genre, i) => `
            <div class="genre-item">
              <div class="genre-name">
                <span>${getGenreEmoji(genre.name)}</span>
                <span>${genre.name}</span>
              </div>
              <div class="genre-bar" style="width: 100px;">
                <div class="genre-fill" style="width: ${(genre.count / genres[0].count) * 100}%"></div>
              </div>
              <span style="min-width: 30px; text-align: right;">${genre.count}</span>
            </div>
          `).join('')}
        </div>
      </div>
      
      <div class="chart-container">
        <div class="chart-title">Recent Activity</div>
        ${activity.slice(0, 5).map(item => `
          <div class="activity-item">
            <span class="activity-icon">${getActivityIcon(item.action)}</span>
            <span><strong>${item.action}</strong> ${item.title}</span>
            <span class="activity-time">${formatTime(item.timestamp)}</span>
          </div>
        `).join('')}
      </div>
      
      <script>
        function getTypeIcon(type) {
          const icons = {
            'Anime': '🎌',
            'Manhwa': '📚',
            'Pornhwa': '🔞',
            'Novels': '📖',
            'Movies': '🎬',
            'TV Shows': '📺'
          };
          return icons[type] || '📁';
        }
        
        function getGenreEmoji(genre) {
          const emojis = {
            'Fantasy': '🐉',
            'Sci-Fi': '🚀',
            'Romance': '💕',
            'Slice of Life': '🌸',
            'Action': '⚡',
            'Adventure': '🗺️',
            'Comedy': '😂',
            'Drama': '🎭',
            'Horror': '👻',
            'Mystery': '🔍',
            'Thriller': '😱',
            'Psychological': '🧠',
            'Sports': '⚽',
            'Supernatural': '✨',
            'Historical': '📜'
          };
          return emojis[genre] || '🎯';
        }
        
        function getActivityIcon(action) {
          const icons = {
            'add': '➕',
            'progress': '📈',
            'complete': '✅',
            'drop': '❌',
            'rate': '⭐'
          };
          return icons[action] || '📌';
        }
        
        function formatTime(timestamp) {
          if (!timestamp) return '';
          const date = new Date(timestamp);
          const now = new Date();
          const diff = now - date;
          
          if (diff < 3600000) return Math.floor(diff / 60000) + 'm ago';
          if (diff < 86400000) return Math.floor(diff / 3600000) + 'h ago';
          if (diff < 604800000) return Math.floor(diff / 86400000) + 'd ago';
          return date.toLocaleDateString();
        }
      </script>
    </body>
    </html>
  `;
}

function getDetailedStats() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var stats = {
    total: 0,
    byStatus: {},
    byType: {},
    inProgressCount: 0,
    plannedCount: 0,
    droppedCount: 0,
    thisMonthAdded: 0,
    avgRating: 0,
    totalRated: 0,
    totalRating: 0
  };
  
  var thisMonth = new Date();
  thisMonth.setDate(1);
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    if (data.length <= 1) return;
    
    var headers = data[0];
    var statusCol = headers.indexOf('Status');
    var dateCol = headers.indexOf('Date Added');
    var ratingCol = headers.indexOf('Rating');
    
    stats.byType[sheetName] = {
      total: 0,
      completed: 0,
      inProgress: 0,
      planned: 0,
      dropped: 0
    };
    
    for (var i = 1; i < data.length; i++) {
      if (data[i][0]) { // Has title
        stats.total++;
        stats.byType[sheetName].total++;
        
        // Status tracking
        var status = data[i][statusCol];
        if (status) {
          stats.byStatus[status] = (stats.byStatus[status] || 0) + 1;
          
          if (status === 'Watched' || status === 'Read') {
            stats.byType[sheetName].completed++;
          } else if (status === 'In Progress') {
            stats.byType[sheetName].inProgress++;
            stats.inProgressCount++;
          } else if (status === 'To Watch' || status === 'To Read') {
            stats.byType[sheetName].planned++;
            stats.plannedCount++;
          } else if (status === 'Dropped') {
            stats.byType[sheetName].dropped++;
            stats.droppedCount++;
          }
        }
        
        // Date tracking
        if (dateCol >= 0 && data[i][dateCol]) {
          var addedDate = new Date(data[i][dateCol]);
          if (addedDate >= thisMonth) {
            stats.thisMonthAdded++;
          }
        }
        
        // Rating tracking
        if (ratingCol >= 0 && data[i][ratingCol]) {
          var rating = parseFloat(data[i][ratingCol]);
          if (!isNaN(rating)) {
            stats.totalRating += rating;
            stats.totalRated++;
          }
        }
      }
    }
  });
  
  // Calculate average rating
  if (stats.totalRated > 0) {
    stats.avgRating = (stats.totalRating / stats.totalRated).toFixed(1);
  }
  
  return stats;
}

function analyzeGenres() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var genreCount = {};
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    if (data.length <= 1) return;
    
    var headers = data[0];
    var genreCol = headers.indexOf('Genre');
    
    if (genreCol >= 0) {
      for (var i = 1; i < data.length; i++) {
        if (data[i][0] && data[i][genreCol]) {
          var genre = data[i][genreCol];
          genreCount[genre] = (genreCount[genre] || 0) + 1;
        }
      }
    }
  });
  
  // Convert to array and sort
  return Object.keys(genreCount)
    .map(genre => ({name: genre, count: genreCount[genre]}))
    .sort((a, b) => b.count - a.count);
}

// ===== ACTIVITY LOGGING =====
function logActivity(action, data) {
  var props = PropertiesService.getUserProperties();
  var activities = JSON.parse(props.getProperty('activities') || '[]');
  
  activities.unshift({
    action: action,
    title: data.title || '',
    type: data.type || '',
    timestamp: new Date().toISOString(),
    details: data
  });
  
  // Keep only last 100 activities
  activities = activities.slice(0, 100);
  
  props.setProperty('activities', JSON.stringify(activities));
}

function getRecentActivity() {
  var props = PropertiesService.getUserProperties();
  var activities = JSON.parse(props.getProperty('activities') || '[]');
  return activities.slice(0, 20);
}

// ===== ACHIEVEMENTS SYSTEM =====
function checkAchievements(action, data) {
  var achievements = PropertiesService.getUserProperties();
  var stats = getDetailedStats();
  var newAchievements = [];
  
  // First item achievement
  if (stats.total === 1 && !achievements.getProperty('ach_first')) {
    achievements.setProperty('ach_first', 'true');
    newAchievements.push({
      icon: '🌟',
      name: 'First Steps',
      desc: 'Added your first item!'
    });
  }
  
  // Collector achievements
  var collectorMilestones = [
    {count: 10, id: 'ach_starter', name: 'Starter', icon: '📚'},
    {count: 50, id: 'ach_collector', name: 'Collector', icon: '📖'},
    {count: 100, id: 'ach_librarian', name: 'Librarian', icon: '🏛️'},
    {count: 250, id: 'ach_archivist', name: 'Archivist', icon: '🗄️'},
    {count: 500, id: 'ach_curator', name: 'Curator', icon: '🏰'},
    {count: 1000, id: 'ach_legend', name: 'Legend', icon: '👑'}
  ];
  
  collectorMilestones.forEach(function(milestone) {
    if (stats.total >= milestone.count && !achievements.getProperty(milestone.id)) {
      achievements.setProperty(milestone.id, 'true');
      newAchievements.push({
        icon: milestone.icon,
        name: milestone.name,
        desc: 'Collected ' + milestone.count + ' items!'
      });
    }
  });
  
  // Completion achievements
  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);
  var completionMilestones = [
    {count: 10, id: 'ach_finisher', name: 'Finisher', icon: '🏁'},
    {count: 25, id: 'ach_dedicated', name: 'Dedicated', icon: '💪'},
    {count: 50, id: 'ach_completionist', name: 'Completionist', icon: '🏆'},
    {count: 100, id: 'ach_master', name: 'Master', icon: '🎯'},
    {count: 250, id: 'ach_grandmaster', name: 'Grandmaster', icon: '⭐'}
  ];
  
  completionMilestones.forEach(function(milestone) {
    if (totalCompleted >= milestone.count && !achievements.getProperty(milestone.id)) {
      achievements.setProperty(milestone.id, 'true');
      newAchievements.push({
        icon: milestone.icon,
        name: milestone.name,
        desc: 'Completed ' + milestone.count + ' items!'
      });
    }
  });
  
  // Juggler achievement
  if (stats.inProgressCount >= 20 && !achievements.getProperty('ach_juggler')) {
    achievements.setProperty('ach_juggler', 'true');
    newAchievements.push({
      icon: '🤹',
      name: 'Juggler',
      desc: '20 items in progress at once!'
    });
  }
  
  // Genre specialist achievements
  var topGenre = analyzeGenres()[0];
  if (topGenre && topGenre.count >= 50 && !achievements.getProperty('ach_specialist_' + topGenre.name)) {
    achievements.setProperty('ach_specialist_' + topGenre.name, 'true');
    newAchievements.push({
      icon: '🎖️',
      name: topGenre.name + ' Specialist',
      desc: '50+ items in ' + topGenre.name + ' genre!'
    });
  }
  
  // Speed achievements
  if (action === 'progress' && data.amount >= 10 && !achievements.getProperty('ach_binger')) {
    achievements.setProperty('ach_binger', 'true');
    newAchievements.push({
      icon: '⚡',
      name: 'Binge Mode',
      desc: 'Made significant progress in one update!'
    });
  }
  
  // Show achievements
  if (newAchievements.length > 0) {
    var message = newAchievements.map(ach => 
      ach.icon + ' ' + ach.name + '\n' + ach.desc
    ).join('\n\n');
    
    SpreadsheetApp.getUi().alert(
      '🎉 Achievement Unlocked!', 
      message, 
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

function showAchievements() {
  var html = HtmlService.createHtmlOutput(getAchievementsHTML())
    .setWidth(600)
    .setHeight(700);
    
  SpreadsheetApp.getUi().showModalDialog(html, '🏆 Achievements');
}

function getAchievementsHTML() {
  var achievements = PropertiesService.getUserProperties();
  var allAchievements = getAchievementsList();
  var stats = getDetailedStats();
  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);
  
  var earnedCount = 0;
  allAchievements.forEach(function(ach) {
    if (achievements.getProperty(ach.id) === 'true') {
      ach.earned = true;
      earnedCount++;
    }
    
    // Calculate progress for progressive achievements
    if (ach.requirement) {
      if (ach.requirement.type === 'total') {
        ach.progress = Math.min(stats.total / ach.requirement.count * 100, 100);
        ach.current = stats.total;
      } else if (ach.requirement.type === 'completed') {
        ach.progress = Math.min(totalCompleted / ach.requirement.count * 100, 100);
        ach.current = totalCompleted;
      } else if (ach.requirement.type === 'inprogress') {
        ach.progress = Math.min(stats.inProgressCount / ach.requirement.count * 100, 100);
        ach.current = stats.inProgressCount;
      }
    }
  });
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body {
          font-family: 'Segoe UI', Arial, sans-serif;
          padding: 20px;
          background: #1a1a1a;
          color: white;
          margin: 0;
        }
        h1 {
          color: #ff6b6b;
          margin-bottom: 10px;
        }
        .summary {
          background: #2a2a2a;
          padding: 20px;
          border-radius: 12px;
          margin-bottom: 30px;
          text-align: center;
          border: 1px solid #3a3a3a;
        }
        .summary-number {
          font-size: 48px;
          font-weight: bold;
          color: #ff6b6b;
          margin-bottom: 10px;
        }
        .achievement-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
          gap: 20px;
        }
        .achievement {
          background: #2a2a2a;
          padding: 20px;
          border-radius: 12px;
          border: 1px solid #3a3a3a;
          transition: all 0.3s ease;
          position: relative;
          overflow: hidden;
        }
        .achievement.earned {
          border-color: #7A1927;
          background: linear-gradient(135deg, #2a2a2a, #2d1d1d);
        }
        .achievement:not(.earned) {
          opacity: 0.6;
        }
        .achievement:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        .achievement-header {
          display: flex;
          align-items: center;
          gap: 15px;
          margin-bottom: 10px;
        }
        .achievement-icon {
          font-size: 36px;
        }
        .achievement-name {
          font-size: 18px;
          font-weight: 600;
          color: #ff6b6b;
        }
        .achievement-desc {
          font-size: 14px;
          color: #ccc;
          margin-bottom: 10px;
        }
        .achievement-progress {
          margin-top: 10px;
        }
        .progress-bar {
          background: #3a3a3a;
          height: 6px;
          border-radius: 3px;
          overflow: hidden;
        }
        .progress-fill {
          background: linear-gradient(90deg, #7A1927, #ff6b6b);
          height: 100%;
          transition: width 0.5s ease;
        }
        .progress-text {
          font-size: 12px;
          color: #888;
          margin-top: 5px;
          text-align: right;
        }
        .achievement-badge {
          position: absolute;
          top: 10px;
          right: 10px;
          background: #4CAF50;
          color: white;
          padding: 4px 8px;
          border-radius: 12px;
          font-size: 12px;
          font-weight: bold;
        }
        .category-title {
          font-size: 20px;
          color: #ff6b6b;
          margin: 30px 0 15px 0;
          padding-bottom: 10px;
          border-bottom: 2px solid #3a3a3a;
        }
        .filters {
          display: flex;
          gap: 10px;
          margin-bottom: 20px;
        }
        .filter-btn {
          padding: 8px 16px;
          background: #2a2a2a;
          border: 1px solid #3a3a3a;
          color: #ccc;
          cursor: pointer;
          border-radius: 20px;
          transition: all 0.2s ease;
        }
        .filter-btn.active {
          background: #7A1927;
          color: white;
          border-color: #7A1927;
        }
        .filter-btn:hover:not(.active) {
          background: #3a3a3a;
        }
      </style>
    </head>
    <body>
      <h1>🏆 Achievement Gallery</h1>
      
      <div class="summary">
        <div class="summary-number">${earnedCount} / ${allAchievements.length}</div>
        <div>Achievements Unlocked</div>
        <div style="margin-top: 10px; font-size: 14px; color: #888;">
          ${Math.round(earnedCount / allAchievements.length * 100)}% Complete
        </div>
      </div>
      
      <div class="filters">
        <button class="filter-btn active" onclick="filterAchievements('all')">All</button>
        <button class="filter-btn" onclick="filterAchievements('earned')">Earned</button>
        <button class="filter-btn" onclick="filterAchievements('locked')">Locked</button>
      </div>
      
      <div class="achievement-grid" id="achievementGrid">
        ${allAchievements.map(ach => `
          <div class="achievement ${ach.earned ? 'earned' : 'locked'}" data-earned="${ach.earned}">
            ${ach.earned ? '<div class="achievement-badge">✓</div>' : ''}
            <div class="achievement-header">
              <div class="achievement-icon">${ach.icon}</div>
              <div>
                <div class="achievement-name">${ach.name}</div>
              </div>
            </div>
            <div class="achievement-desc">${ach.desc}</div>
            ${ach.progress !== undefined ? `
              <div class="achievement-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${ach.progress}%"></div>
                </div>
                <div class="progress-text">${ach.current} / ${ach.requirement.count}</div>
              </div>
            ` : ''}
          </div>
        `).join('')}
      </div>
      
      <script>
        function filterAchievements(filter) {
          document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
          });
          event.target.classList.add('active');
          
          document.querySelectorAll('.achievement').forEach(ach => {
            if (filter === 'all') {
              ach.style.display = 'block';
            } else if (filter === 'earned') {
              ach.style.display = ach.dataset.earned === 'true' ? 'block' : 'none';
            } else if (filter === 'locked') {
              ach.style.display = ach.dataset.earned === 'true' ? 'none' : 'block';
            }
          });
        }
      </script>
    </body>
    </html>
  `;
}

function getAchievementsList() {
  return [
    // Collection achievements
    {id: 'ach_first', icon: '🌟', name: 'First Steps', desc: 'Add your first item'},
    {id: 'ach_starter', icon: '📚', name: 'Starter', desc: 'Collect 10 items', requirement: {type: 'total', count: 10}},
    {id: 'ach_collector', icon: '📖', name: 'Collector', desc: 'Collect 50 items', requirement: {type: 'total', count: 50}},
    {id: 'ach_librarian', icon: '🏛️', name: 'Librarian', desc: 'Collect 100 items', requirement: {type: 'total', count: 100}},
    {id: 'ach_archivist', icon: '🗄️', name: 'Archivist', desc: 'Collect 250 items', requirement: {type: 'total', count: 250}},
    {id: 'ach_curator', icon: '🏰', name: 'Curator', desc: 'Collect 500 items', requirement: {type: 'total', count: 500}},
    {id: 'ach_legend', icon: '👑', name: 'Legend', desc: 'Collect 1000 items', requirement: {type: 'total', count: 1000}},
    
    // Completion achievements
    {id: 'ach_finisher', icon: '🏁', name: 'Finisher', desc: 'Complete 10 items', requirement: {type: 'completed', count: 10}},
    {id: 'ach_dedicated', icon: '💪', name: 'Dedicated', desc: 'Complete 25 items', requirement: {type: 'completed', count: 25}},
    {id: 'ach_completionist', icon: '🏆', name: 'Completionist', desc: 'Complete 50 items', requirement: {type: 'completed', count: 50}},
    {id: 'ach_master', icon: '🎯', name: 'Master', desc: 'Complete 100 items', requirement: {type: 'completed', count: 100}},
    {id: 'ach_grandmaster', icon: '⭐', name: 'Grandmaster', desc: 'Complete 250 items', requirement: {type: 'completed', count: 250}},
    
    // Special achievements
    {id: 'ach_juggler', icon: '🤹', name: 'Juggler', desc: '20 items in progress', requirement: {type: 'inprogress', count: 20}},
    {id: 'ach_binger', icon: '⚡', name: 'Binge Mode', desc: 'Make significant progress in one update'},
    {id: 'ach_reviewer', icon: '⭐', name: 'Reviewer', desc: 'Rate 25 items'},
    {id: 'ach_tagger', icon: '🏷️', name: 'Organizer', desc: 'Use tags on 50 items'},
    {id: 'ach_diverse', icon: '🌈', name: 'Diverse Tastes', desc: 'Try all media types'},
    {id: 'ach_marathon', icon: '🏃', name: 'Marathon', desc: 'Update progress 7 days in a row'},
    {id: 'ach_explorer', icon: '🗺️', name: 'Explorer', desc: 'Try 10 different genres'},
    {id: 'ach_perfectionist', icon: '💯', name: 'Perfectionist', desc: 'Give 10 perfect ratings'}
  ];
}

// ===== SEARCH FUNCTIONALITY =====
function showSearchDialog() {
  var html = HtmlService.createHtmlOutput(getSearchHTML())
    .setWidth(600)
    .setHeight(700);
    
  SpreadsheetApp.getUi().showModalDialog(html, '🔍 Search Media');
}

function getSearchHTML() {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body {
          font-family: 'Segoe UI', Arial, sans-serif;
          padding: 20px;
          background: #1a1a1a;
          color: white;
          margin: 0;
        }
        h2 {
          color: #ff6b6b;
          margin-bottom: 20px;
        }
        .search-container {
          margin-bottom: 20px;
        }
        .search-input {
          width: 100%;
          padding: 15px;
          font-size: 16px;
          background: #2a2a2a;
          border: 2px solid #3a3a3a;
          border-radius: 8px;
          color: white;
          transition: all 0.3s ease;
        }
        .search-input:focus {
          outline: none;
          border-color: #7A1927;
          box-shadow: 0 0 0 3px rgba(122, 25, 39, 0.2);
        }
        .filters {
          display: flex;
          gap: 10px;
          margin: 20px 0;
          flex-wrap: wrap;
        }
        .filter-group {
          background: #2a2a2a;
          padding: 10px;
          border-radius: 8px;
          border: 1px solid #3a3a3a;
        }
        .filter-label {
          font-size: 12px;
          color: #888;
          margin-bottom: 5px;
        }
        select {
          padding: 8px;
          background: #3a3a3a;
          border: 1px solid #4a4a4a;
          border-radius: 4px;
          color: white;
          cursor: pointer;
        }
        .results {
          margin-top: 20px;
        }
        .result-item {
          background: #2a2a2a;
          padding: 15px;
          margin-bottom: 10px;
          border-radius: 8px;
          border: 1px solid #3a3a3a;
          transition: all 0.3s ease;
          cursor: pointer;
        }
        .result-item:hover {
          transform: translateX(5px);
          border-color: #7A1927;
          box-shadow: 0 2px 8px rgba(122, 25, 39, 0.2);
        }
        .result-title {
          font-size: 18px;
          font-weight: 600;
          color: #ff6b6b;
          margin-bottom: 8px;
        }
        .result-meta {
          display: flex;
          gap: 15px;
          font-size: 14px;
          color: #ccc;
          flex-wrap: wrap;
        }
        .meta-item {
          display: flex;
          align-items: center;
          gap: 5px;
        }
        .result-tags {
          display: flex;
          gap: 5px;
          margin-top: 8px;
          flex-wrap: wrap;
        }
        .tag {
          background: #3a3a3a;
          padding: 4px 8px;
          border-radius: 12px;
          font-size: 12px;
          border: 1px solid #4a4a4a;
        }
        .no-results {
          text-align: center;
          padding: 40px;
          color: #888;
        }
        .loading {
          text-align: center;
          padding: 40px;
          color: #888;
        }
        .result-stats {
          background: #2a2a2a;
          padding: 15px;
          border-radius: 8px;
          margin-bottom: 20px;
          border: 1px solid #3a3a3a;
        }
        .highlight {
          background: #7A1927;
          color: white;
          padding: 2px 4px;
          border-radius: 3px;
        }
      </style>
    </head>
    <body>
      <h2>🔍 Search Your Library</h2>
      
      <div class="search-container">
        <input type="text" 
               id="searchInput" 
               class="search-input" 
               placeholder="Search by title, genre, tags, or notes..." 
               onkeyup="performSearch()"
               autofocus>
      </div>
      
      <div class="filters">
        <div class="filter-group">
          <div class="filter-label">Type</div>
          <select id="typeFilter" onchange="performSearch()">
            <option value="">All Types</option>
            <option value="Anime">Anime</option>
            <option value="Manhwa">Manhwa</option>
            <option value="Pornhwa">Pornhwa</option>
            <option value="Novels">Novels</option>
            <option value="Movies">Movies</option>
            <option value="TV Shows">TV Shows</option>
          </select>
        </div>
        
        <div class="filter-group">
          <div class="filter-label">Status</div>
          <select id="statusFilter" onchange="performSearch()">
            <option value="">All Status</option>
            <option value="To Watch">To Watch</option>
            <option value="To Read">To Read</option>
            <option value="In Progress">In Progress</option>
            <option value="Watched">Watched</option>
            <option value="Read">Read</option>
            <option value="Dropped">Dropped</option>
          </select>
        </div>
        
        <div class="filter-group">
          <div class="filter-label">Genre</div>
          <select id="genreFilter" onchange="performSearch()">
            <option value="">All Genres</option>
            <option value="Fantasy">Fantasy</option>
            <option value="Sci-Fi">Sci-Fi</option>
            <option value="Romance">Romance</option>
            <option value="Slice of Life">Slice of Life</option>
            <option value="Action">Action</option>
            <option value="Adventure">Adventure</option>
            <option value="Comedy">Comedy</option>
            <option value="Drama">Drama</option>
            <option value="Horror">Horror</option>
            <option value="Mystery">Mystery</option>
            <option value="Thriller">Thriller</option>
          </select>
        </div>
        
        <div class="filter-group">
          <div class="filter-label">Rating</div>
          <select id="ratingFilter" onchange="performSearch()">
            <option value="">All Ratings</option>
            <option value="10">10 ⭐</option>
            <option value="9">9+ ⭐</option>
            <option value="8">8+ ⭐</option>
            <option value="7">7+ ⭐</option>
            <option value="unrated">Unrated</option>
          </select>
        </div>
      </div>
      
      <div id="resultStats" class="result-stats" style="display: none;"></div>
      
      <div id="results" class="results">
        <div class="loading">Start typing to search...</div>
      </div>
      
      <script>
        let searchTimeout;
        
        function performSearch() {
          clearTimeout(searchTimeout);
          const query = document.getElementById('searchInput').value;
          const type = document.getElementById('typeFilter').value;
          const status = document.getElementById('statusFilter').value;
          const genre = document.getElementById('genreFilter').value;
          
          document.getElementById('results').innerHTML = '<div class="loading">Searching...</div>';
          
          searchTimeout = setTimeout(() => {
            google.script.run
              .withSuccessHandler(displayResults)
              .withFailureHandler(function(error) {
                document.getElementById('results').innerHTML = 
                  '<div class="no-results">Error: ' + error + '</div>';
              })
              .searchMedia({
                query: query,
                type: type,
                status: status,
                genre: genre
              });
          }, 300);
        }
        
        function displayResults(results) {
          const container = document.getElementById('results');
          const statsDiv = document.getElementById('resultStats');
          
          if (results.length === 0) {
            container.innerHTML = '<div class="no-results">No results found</div>';
            statsDiv.style.display = 'none';
            return;
          }
          
          // Show stats
          statsDiv.style.display = 'block';
          statsDiv.innerHTML = 'Found <strong>' + results.length + '</strong> results';
          
          // Display results
          container.innerHTML = results.map(item => `
            <div class="result-item" onclick="viewItem('${item.type}', '${item.title}')">
              <div class="result-title">${highlightMatch(item.title)}</div>
              <div class="result-meta">
                <span class="meta-item">📁 ${item.type}</span>
                <span class="meta-item">📊 ${item.status}</span>
                ${item.progress ? '<span class="meta-item">📈 ' + item.progress + '</span>' : ''}
                ${item.genre ? '<span class="meta-item">🎭 ' + item.genre + '</span>' : ''}
              </div>
              ${item.tags ? '<div class="result-tags">' + 
                item.tags.split(',').map(tag => '<span class="tag">' + tag.trim() + '</span>').join('') + 
                '</div>' : ''}
            </div>
          `).join('');
        }
        
        function highlightMatch(text) {
          const query = document.getElementById('searchInput').value;
          if (!query) return text;
          
          const regex = new RegExp('(' + query + ')', 'gi');
          return text.replace(regex, '<span class="highlight">$1</span>');
        }
        
        function viewItem(type, title) {
          // Could implement edit dialog here
          alert('View/Edit: ' + title + ' (' + type + ')');
        }
      </script>
    </body>
    </html>
  `;
}

function searchMedia(params) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var results = [];
  
  sheets.forEach(function(sheetName) {
    if (params.type && params.type !== sheetName) return;
    
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    
    for (var i = 1; i < data.length; i++) {
      var match = false;
      var item = {
        type: sheetName,
        title: data[i][0] || '',
        status: data[i][1] || '',
        progress: data[i][2] || '',
        genre: data[i][headers.indexOf('Genre')] || '',
        tags: data[i][headers.indexOf('Tags')] || '',
        notes: data[i][headers.indexOf('Notes')] || ''
      };
      
      // Apply filters
      if (params.status && item.status !== params.status) continue;
      if (params.genre && item.genre !== params.genre) continue;
      
      // Search query
      if (params.query) {
        var searchText = (item.title + ' ' + item.genre + ' ' + item.tags + ' ' + item.notes).toLowerCase();
        if (searchText.includes(params.query.toLowerCase())) {
          match = true;
        }
      } else {
        match = true;
      }
      
      if (match) results.push(item);
    }
  });
  
  return results.slice(0, 50); // Limit results
}

// ===== RANDOM PICKER =====
function showRandomPicker() {
  var html = HtmlService.createHtmlOutput(getRandomPickerHTML())
    .setWidth(500)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(html, '🎲 Random Picker');
}

function getRandomPickerHTML() {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }
        .picker-container { text-align: center; }
        .dice { font-size: 80px; margin: 20px; }
        button { background: #7A1927; color: white; padding: 15px 30px; border: none; 
                 border-radius: 8px; cursor: pointer; font-size: 18px; margin: 10px; }
        button:hover { background: #8B1E2E; }
        .result { background: #2a2a2a; padding: 30px; margin: 20px 0; border-radius: 12px; 
                  min-height: 150px; display: flex; flex-direction: column; justify-content: center; }
        .result-title { font-size: 24px; color: #ff6b6b; margin: 10px 0; }
        select { padding: 10px; margin: 10px; background: #2a2a2a; color: white; 
                 border: 1px solid #7A1927; border-radius: 4px; }
      </style>
    </head>
    <body>
      <div class="picker-container">
        <div class="dice">🎲</div>
        <h2>What Should I Watch/Read Next?</h2>
        
        <div>
          <select id="filterType">
            <option value="all">All Types</option>
            <option value="Anime">Anime</option>
            <option value="Manhwa">Manhwa</option>
            <option value="Pornhwa">Pornhwa</option>
            <option value="Novels">Novels</option>
            <option value="Movies">Movies</option>
            <option value="TV Shows">TV Shows</option>
          </select>
          
          <select id="filterStatus">
            <option value="planned">Not Started</option>
            <option value="inprogress">In Progress</option>
            <option value="all">All</option>
          </select>
        </div>
        
        <button onclick="pickRandom()">🎲 Pick Random!</button>
        
        <div id="result" class="result">
          <div style="color: #888;">Click the button to get a random suggestion!</div>
        </div>
      </div>
      
      <script>
        function pickRandom() {
          document.getElementById('result').innerHTML = '<div>🎲 Rolling the dice...</div>';
          
          google.script.run
            .withSuccessHandler(function(item) {
              if (item) {
                document.getElementById('result').innerHTML = 
                  '<div class="result-title">' + item.title + '</div>' +
                  '<div>' + item.type + ' • ' + item.status + '</div>' +
                  (item.genre ? '<div>Genre: ' + item.genre + '</div>' : '') +
                  (item.progress ? '<div>Progress: ' + item.progress + '</div>' : '');
              } else {
                document.getElementById('result').innerHTML = 
                  '<div style="color: #888;">No items found with those filters!</div>';
              }
            })
            .getRandomItem(document.getElementById('filterType').value, 
                          document.getElementById('filterStatus').value);
        }
      </script>
    </body>
    </html>
  `;
}

function getRandomItem(filterType, filterStatus) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = filterType === 'all' ? 
    ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'] : 
    [filterType];
  
  var candidates = [];
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    
    for (var i = 1; i < data.length; i++) {
      if (data[i][0]) {
        var status = data[i][1];
        var include = false;
        
        if (filterStatus === 'all') {
          include = true;
        } else if (filterStatus === 'planned') {
          include = (status === 'To Watch' || status === 'To Read');
        } else if (filterStatus === 'inprogress') {
          include = (status === 'In Progress');
        }
        
        if (include) {
          candidates.push({
            type: sheetName,
            title: data[i][0],
            status: status,
            progress: data[i][2] || '',
            genre: data[i][5] || data[i][4] || data[i][2] || ''
          });
        }
      }
    }
  });
  
  if (candidates.length === 0) return null;
  return candidates[Math.floor(Math.random() * candidates.length)];
}

// ===== RECOMMENDATIONS =====
function showRecommendations() {
  var analysis = analyzeUserPreferences();
  var html = HtmlService.createHtmlOutput(getRecommendationsHTML(analysis))
    .setWidth(600)
    .setHeight(700);
    
  SpreadsheetApp.getUi().showModalDialog(html, '💡 Recommendations');
}

function getRecommendationsHTML(analysis) {
  var recommendations = generateRecommendations(analysis);
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }
        .profile { background: #2a2a2a; padding: 20px; border-radius: 12px; margin-bottom: 20px; }
        .stat { display: inline-block; margin: 10px 20px 10px 0; }
        .stat-label { color: #888; font-size: 12px; }
        .stat-value { font-size: 20px; color: #ff6b6b; font-weight: bold; }
        .recommendation { background: #2a2a2a; padding: 20px; border-radius: 12px; margin: 15px 0; 
                          border-left: 4px solid #7A1927; }
        .rec-title { font-size: 18px; color: #ff6b6b; margin-bottom: 10px; }
        .rec-item { margin: 5px 0; padding-left: 20px; }
      </style>
    </head>
    <body>
      <h2>💡 Personalized Recommendations</h2>
      
      <div class="profile">
        <h3>Your Profile</h3>
        <div class="stat">
          <div class="stat-label">Favorite Type</div>
          <div class="stat-value">${analysis.preferredType}</div>
        </div>
        <div class="stat">
          <div class="stat-label">Top Genre</div>
          <div class="stat-value">${analysis.topGenre}</div>
        </div>
        <div class="stat">
          <div class="stat-label">Completion Rate</div>
          <div class="stat-value">${analysis.completionRate}%</div>
        </div>
      </div>
      
      ${recommendations.map(rec => `
        <div class="recommendation">
          <div class="rec-title">${rec.title}</div>
          ${rec.items.map(item => `<div class="rec-item">• ${item}</div>`).join('')}
        </div>
      `).join('')}
    </body>
    </html>
  `;
}

function analyzeUserPreferences() {
  var stats = getDetailedStats();
  var genres = analyzeGenres();
  
  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);
  var completionRate = stats.total > 0 ? Math.round((totalCompleted / stats.total) * 100) : 0;
  
  // Find preferred type
  var preferredType = '';
  var maxCount = 0;
  Object.keys(stats.byType).forEach(function(type) {
    if (stats.byType[type].total > maxCount) {
      maxCount = stats.byType[type].total;
      preferredType = type;
    }
  });
  
  return {
    preferredType: preferredType,
    topGenre: genres.length > 0 ? genres[0].name : 'None',
    completionRate: completionRate,
    inProgressCount: stats.inProgressCount,
    totalItems: stats.total,
    genres: genres
  };
}

function generateRecommendations(analysis) {
  var recommendations = [];
  
  // Based on completion rate
  if (analysis.completionRate < 50) {
    recommendations.push({
      title: '📈 Improve Completion Rate',
      items: [
        'Focus on finishing current items before starting new ones',
        'Consider dropping items you haven\'t touched in 30+ days',
        'Try shorter series for quick wins'
      ]
    });
  }
  
  // Based on in-progress count
  if (analysis.inProgressCount > 10) {
    recommendations.push({
      title: '🎯 Manage Your Backlog',
      items: [
        'You have ' + analysis.inProgressCount + ' items in progress',
        'Pick 3-5 to focus on this week',
        'Archive or drop items you\'ve lost interest in'
      ]
    });
  }
  
  // Genre recommendations
  if (analysis.topGenre !== 'None') {
    recommendations.push({
      title: '🎭 Based on Your Love for ' + analysis.topGenre,
      items: [
        'Explore more ' + analysis.topGenre + ' in different media types',
        'Try combining ' + analysis.topGenre + ' with other genres',
        'Look for highly-rated ' + analysis.topGenre + ' releases'
      ]
    });
  }
  
  // Type variety
  recommendations.push({
    title: '🌈 Expand Your Horizons',
    items: [
      'Your favorite type is ' + analysis.preferredType,
      'Try exploring other media types for variety',
      'Different formats can offer unique experiences'
    ]
  });
  
  return recommendations;
}

// ===== BATCH OPERATIONS =====
function showBatchOperations() {
  var html = HtmlService.createHtmlOutput(getBatchOperationsHTML())
    .setWidth(600)
    .setHeight(700);
    
  SpreadsheetApp.getUi().showModalDialog(html, '🔧 Batch Operations');
}

function getBatchOperationsHTML() {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }
        .operation { background: #2a2a2a; padding: 20px; margin: 15px 0; border-radius: 8px; }
        h3 { color: #ff6b6b; margin-top: 0; }
        button { background: #7A1927; color: white; padding: 10px 20px; border: none; 
                 border-radius: 4px; cursor: pointer; margin: 5px; }
        button:hover { background: #8B1E2E; }
        input, select { padding: 8px; margin: 5px; background: #2a2a2a; color: white; 
                        border: 1px solid #7A1927; border-radius: 4px; }
        .result { margin-top: 20px; padding: 15px; background: #2a2a2a; border-radius: 4px; 
                  display: none; }
        .success { border-left: 4px solid #4CAF50; }
        .error { border-left: 4px solid #f44336; }
      </style>
    </head>
    <body>
      <h2>🔧 Batch Operations</h2>
      
      <div class="operation">
        <h3>Mark All Complete</h3>
        <select id="completeType">
          <option value="">Select Type...</option>
          <option value="Anime">Anime</option>
          <option value="Manhwa">Manhwa</option>
          <option value="Pornhwa">Pornhwa</option>
          <option value="Novels">Novels</option>
          <option value="Movies">Movies</option>
          <option value="TV Shows">TV Shows</option>
        </select>
        <button onclick="markAllComplete()">Mark All In Progress as Complete</button>
      </div>
      
      <div class="operation">
        <h3>Bulk Genre Update</h3>
        <input type="text" id="genreSearch" placeholder="Search title contains...">
        <select id="newGenre">
          <option value="">Select Genre...</option>
          <option value="Fantasy">Fantasy</option>
          <option value="Sci-Fi">Sci-Fi</option>
          <option value="Romance">Romance</option>
          <option value="Slice of Life">Slice of Life</option>
          <option value="Action">Action</option>
          <option value="Custom">Custom (enter below)</option>
        </select>
        <input type="text" id="customGenre" placeholder="Custom genre..." style="display:none;">
        <button onclick="bulkGenreUpdate()">Update Genres</button>
      </div>
      
      <div class="operation">
        <h3>Add Tags</h3>
        <input type="text" id="tagSearch" placeholder="Search title contains...">
        <input type="text" id="newTags" placeholder="Tags (comma separated)">
        <button onclick="bulkAddTags()">Add Tags</button>
      </div>
      
      <div class="operation">
        <h3>Clean Up</h3>
        <button onclick="removeDuplicates()">Remove Duplicates</button>
        <button onclick="cleanEmptyRows()">Clean Empty Rows</button>
        <button onclick="standardizeProgress()">Fix Progress Format</button>
        <button onclick="archiveOldDropped()">Archive Old Dropped Items</button>
      </div>
      
      <div id="result"></div>
      
      <script>
        function showResult(message, success) {
          var result = document.getElementById('result');
          result.className = 'result ' + (success ? 'success' : 'error');
          result.style.display = 'block';
          result.innerHTML = message;
        }
        
        function markAllComplete() {
          var type = document.getElementById('completeType').value;
          if (!type) {
            showResult('Please select a type', false);
            return;
          }
          
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Marked ' + count + ' items as complete!', true);
            })
            .batchMarkComplete(type);
        }
        
        function bulkGenreUpdate() {
          var search = document.getElementById('genreSearch').value;
          var genre = document.getElementById('newGenre').value;
          var customGenre = document.getElementById('customGenre').value;
          
          if (!search) {
            showResult('Please enter search text', false);
            return;
          }
          
          var finalGenre = genre === 'Custom' ? customGenre : genre;
          if (!finalGenre) {
            showResult('Please select or enter a genre', false);
            return;
          }
          
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Updated genre for ' + count + ' items!', true);
            })
            .batchUpdateGenre(search, finalGenre);
        }
        
        function bulkAddTags() {
          var search = document.getElementById('tagSearch').value;
          var tags = document.getElementById('newTags').value;
          
          if (!search || !tags) {
            showResult('Please fill both fields', false);
            return;
          }
          
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Added tags to ' + count + ' items!', true);
            })
            .batchAddTags(search, tags);
        }
        
        function removeDuplicates() {
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Removed ' + count + ' duplicates!', true);
            })
            .removeDuplicateEntries();
        }
        
        function cleanEmptyRows() {
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Cleaned ' + count + ' empty rows!', true);
            })
            .cleanupEmptyRows();
        }
        
        function standardizeProgress() {
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Fixed progress format for ' + count + ' items!', true);
            })
            .standardizeProgressFormat();
        }
        
        function archiveOldDropped() {
          google.script.run
            .withSuccessHandler(function(count) {
              showResult('✅ Archived ' + count + ' old dropped items!', true);
            })
            .archiveOldDroppedItems();
        }
        
        // Show/hide custom genre input
        document.getElementById('newGenre').addEventListener('change', function() {
          document.getElementById('customGenre').style.display = 
            this.value === 'Custom' ? 'block' : 'none';
        });
      </script>
    </body>
    </html>
  `;
}

function batchAddTags(searchTerm, newTags) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var count = 0;
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var tagsCol = headers.indexOf('Tags');
    
    if (tagsCol >= 0) {
      for (var i = 1; i < data.length; i++) {
        if (data[i][0] && data[i][0].toLowerCase().includes(searchTerm.toLowerCase())) {
          var currentTags = data[i][tagsCol] || '';
          var updatedTags = currentTags ? currentTags + ',' + newTags : newTags;
          sheet.getRange(i + 1, tagsCol + 1).setValue(updatedTags);
          count++;
        }
      }
    }
  });
  
  return count;
}

function archiveOldDroppedItems() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var count = 0;
  var cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - 90); // 90 days old
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var statusCol = headers.indexOf('Status');
    var dateCol = headers.indexOf('Date Added');
    var toArchive = [];
    
    for (var i = data.length - 1; i > 0; i--) {
      if (data[i][statusCol] === 'Dropped' && data[i][dateCol]) {
        var addedDate = new Date(data[i][dateCol]);
        if (addedDate < cutoffDate) {
          toArchive.push(i + 1);
          count++;
        }
      }
    }
    
    // Archive in reverse order
    toArchive.forEach(function(row) {
      moveToArchive(sheet, row);
    });
  });
  
  return count;
}

// ===== EXPORT/IMPORT =====
function exportAllData() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows', 'Archive'];
  var exportData = {
    version: '2.0',
    exportDate: new Date().toISOString(),
    sheets: {}
  };
  
  sheets.forEach(function(sheetName) {
    var sheet = ss.getSheetByName(sheetName);
    if (sheet) {
      exportData.sheets[sheetName] = sheet.getDataRange().getValues();
    }
  });
  
  var json = JSON.stringify(exportData, null, 2);
  var blob = Utilities.newBlob(json, 'application/json', 
    'MediaTracker_Export_' + new Date().toISOString().split('T')[0] + '.json');
  
  var file = DriveApp.createFile(blob);
  
  SpreadsheetApp.getUi().alert(
    '📤 Export Complete', 
    'File saved to Google Drive:\n' + file.getUrl() + '\n\nFile: ' + file.getName(), 
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

function performBackup() {
  exportAllData();
}

function importFromCSV() {
  var html = `
    <div style="font-family: Arial; padding: 20px; background: #1a1a1a; color: white;">
      <h3>📥 Import from CSV</h3>
      <ol>
        <li>Upload your CSV to Google Drive</li>
        <li>Open with Google Sheets</li>
        <li>Format columns to match: Title, Status, Progress, Genre, Notes, Tags</li>
        <li>Copy data and paste into appropriate sheet</li>
      </ol>
      <p>Or use the Batch Operations to quickly update multiple items.</p>
    </div>
  `;
  
  var htmlOutput = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(300);
    
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Import Instructions');
}

// ===== ARCHIVE FUNCTIONS =====
function moveToArchive(sheet, row) {
  var archiveSheet = sheet.getParent().getSheetByName('Archive');
  if (!archiveSheet) return;
  
  var rowData = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];
  var archiveData = [sheet.getName()].concat(rowData);
  archiveData.push(new Date().toLocaleDateString()); // Archive date
  
  archiveSheet.appendRow(archiveData);
  sheet.deleteRow(row);
}

// ===== EDIT AUTOMATION =====
function onEdit(e) {
  if (!e) return;
  
  var range = e.range;
  var sheet = e.source.getActiveSheet();
  var col = range.getColumn();
  var row = range.getRow();
  var value = e.value;
  
  // Skip header row
  if (row === 1) return;
  
  // Skip archive sheet
  if (sheet.getName() === 'Archive') return;
  
  // Auto-format progress
  if (col === 3 && value && !isNaN(value)) {
    var sheetName = sheet.getName();
    if (sheetName === 'Anime' || sheetName === 'TV Shows') {
      range.setValue('S1E' + value);
    } else if (sheetName !== 'Movies') {
      range.setValue('Ch' + value);
    }
  }
  
  // Auto-archive if dropped
  if (col === 2 && value === 'Dropped') {
    moveToArchive(sheet, row);
  }
  
  // Auto-add date if new item
  var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  var dateCol = headers.indexOf('Date Added') + 1;
  if (col === 1 && value && dateCol > 0 && !sheet.getRange(row, dateCol).getValue()) {
    sheet.getRange(row, dateCol).setValue(new Date().toLocaleDateString());
  }
}

// ===== TIME TRACKER =====
function showTimeTracker() {
  var timeData = calculateTimeSpent();
  var html = HtmlService.createHtmlOutput(getTimeTrackerHTML(timeData))
    .setWidth(500)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(html, '⏰ Time Tracker');
}

function getTimeTrackerHTML(timeData) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }
        .time-card { background: #2a2a2a; padding: 20px; margin: 15px 0; border-radius: 8px; }
        .time-title { font-size: 18px; color: #ff6b6b; margin-bottom: 15px; }
        .time-stat { margin: 10px 0; display: flex; justify-content: space-between; }
        .total-time { font-size: 24px; color: #ff6b6b; font-weight: bold; text-align: center; 
                      padding: 20px; background: #2a2a2a; border-radius: 8px; margin-bottom: 20px; }
      </style>
    </head>
    <body>
      <h2>⏰ Time Investment Tracker</h2>
      
      <div class="total-time">
        Total Time: ${timeData.totalHours}h ${timeData.totalMinutes}m
      </div>
      
      ${Object.keys(timeData.byType).map(type => `
        <div class="time-card">
          <div class="time-title">${type}</div>
          <div class="time-stat">
            <span>Completed Items:</span>
            <span>${timeData.byType[type].count}</span>
          </div>
          <div class="time-stat">
            <span>Estimated Time:</span>
            <span>${Math.floor(timeData.byType[type].minutes / 60)}h ${timeData.byType[type].minutes % 60}m</span>
          </div>
          <div class="time-stat">
            <span>Average per Item:</span>
            <span>${timeData.byType[type].average}m</span>
          </div>
        </div>
      `).join('')}
      
      <div style="margin-top: 20px; padding: 15px; background: #2a2a2a; border-radius: 8px; font-size: 12px; color: #888;">
        <strong>Time Estimates:</strong><br>
        • Anime: 24 min/episode<br>
        • TV Shows: 45 min/episode<br>
        • Movies: 120 minutes<br>
        • Manhwa/Novels: 3 min/chapter
      </div>
    </body>
    </html>
  `;
}

function calculateTimeSpent() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];
  var timeData = {
    totalMinutes: 0,
    totalHours: 0,
    byType: {}
  };
  
  sheets.forEach(function(sheetName) {
    timeData.byType[sheetName] = {
      minutes: 0,
      count: 0,
      average: 0
    };
    
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var statusCol = headers.indexOf('Status');
    var progressCol = headers.indexOf('Progress');
    
    for (var i = 1; i < data.length; i++) {
      if (data[i][statusCol] === 'Watched' || data[i][statusCol] === 'Read') {
        timeData.byType[sheetName].count++;
        
        var minutes = 0;
        if (sheetName === 'Anime') {
          var progress = data[i][progressCol] || '';
          var match = progress.match(/E(\d+)/);
          var episodes = match ? parseInt(match[1]) : 12;
          minutes = episodes * 24;
        } else if (sheetName === 'TV Shows') {
          var progress = data[i][progressCol] || '';
          var match = progress.match(/E(\d+)/);
          var episodes = match ? parseInt(match[1]) : 10;
          minutes = episodes * 45;
        } else if (sheetName === 'Movies') {
          minutes = 120;
        } else {
          var progress = data[i][progressCol] || '';
          var match = progress.match(/Ch(\d+)/);
          var chapters = match ? parseInt(match[1]) : 50;
          minutes = chapters * 3;
        }
        
        timeData.byType[sheetName].minutes += minutes;
        timeData.totalMinutes += minutes;
      }
    }
    
    if (timeData.byType[sheetName].count > 0) {
      timeData.byType[sheetName].average = 
        Math.round(timeData.byType[sheetName].minutes / timeData.byType[sheetName].count);
    }
  });
  
  timeData.totalHours = Math.floor(timeData.totalMinutes / 60);
  timeData.totalMinutes = timeData.totalMinutes % 60;
  
  return timeData;
}

// ===== SETTINGS & HELP =====
function showSettings() {
  var html = `
    <div style="font-family: Arial; padding: 20px; background: #1a1a1a; color: white;">
      <h2>⚙️ Settings</h2>
      <p>Settings are stored in the hidden Settings sheet.</p>
      <p>Current features:</p>
      <ul>
        <li>Auto-archive after 90 days</li>
        <li>Progress increment: +1 (customizable in Quick Update)</li>
        <li>Date format: MM/DD/YYYY</li>
        <li>Theme: Dark Red (#7A1927)</li>
      </ul>
      <p>Advanced settings coming in web version!</p>
    </div>
  `;
  
  var htmlOutput = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(400);
    
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Settings');
}

function showHelp() {
  var html = `
    <div style="font-family: Arial; padding: 20px; background: #1a1a1a; color: white; max-height: 500px; overflow-y: auto;">
      <h2>❓ Media Tracker Help</h2>
      
      <h3>Quick Start</h3>
      <ul>
        <li><strong>Setup:</strong> Run "Setup Sheets" to create all sheets with proper formatting</li>
        <li><strong>Add Media:</strong> Use the "Add New Media" dialog for easy entry</li>
        <li><strong>Update Progress:</strong> Use "Quick Update" sidebar for fast progress tracking</li>
        <li><strong>View Stats:</strong> Check "Dashboard" for your media statistics</li>
      </ul>
      
      <h3>Features</h3>
      <ul>
        <li><strong>Auto-formatting:</strong> Type just numbers in progress cells (25 → Ch25)</li>
        <li><strong>Auto-archive:</strong> Items marked as "Dropped" move to Archive automatically</li>
        <li><strong>Search:</strong> Find any item across all sheets</li>
        <li><strong>Random Picker:</strong> Get suggestions for what to watch/read next</li>
        <li><strong>Achievements:</strong> Unlock achievements as you track more media</li>
        <li><strong>Time Tracking:</strong> See estimated time spent on completed media</li>
      </ul>
      
      <h3>Tips</h3>
      <ul>
        <li>Use tags to organize by mood, season, or any custom category</li>
        <li>Batch operations can update multiple items at once</li>
        <li>Export regularly to backup your data</li>
        <li>Check recommendations based on your preferences</li>
      </ul>
      
      <h3>Keyboard Shortcuts</h3>
      <ul>
        <li><strong>Tab:</strong> Move to next cell</li>
        <li><strong>Enter:</strong> Move down</li>
        <li><strong>Ctrl+Z:</strong> Undo</li>
        <li><strong>F2:</strong> Edit cell</li>
      </ul>
    </div>
  `;
  
  var htmlOutput = HtmlService.createHtmlOutput(html)
    .setWidth(500)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Help');
}

// ===== PLACEHOLDER FUNCTIONS =====
function showProgressCharts() {
  SpreadsheetApp.getUi().alert('📈 Progress Charts', 'Coming soon! Will show visual charts of your progress.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showWatchCalendar() {
  SpreadsheetApp.getUi().alert('📅 Watch Calendar', 'Coming soon! Will show viewing schedule.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showWatchlistPlanner() {
  SpreadsheetApp.getUi().alert('📋 Watchlist Planner', 'Coming soon! Will help plan your viewing.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showStatisticsReport() {
  var stats = getDetailedStats();
  var message = 'Total Items: ' + stats.total + '\n' +
                'In Progress: ' + stats.inProgressCount + '\n' +
                'Completion Rate: ' + (stats.avgRating || 'N/A') + '%\n' +
                'This Month: ' + stats.thisMonthAdded + ' new items';
  
  SpreadsheetApp.getUi().alert('📊 Quick Stats', message, SpreadsheetApp.getUi().ButtonSet.OK);
}

function showTagManager() {
  SpreadsheetApp.getUi().alert('🏷️ Tag Manager', 'Use Batch Operations to add tags to multiple items.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showSyncStatus() {
  SpreadsheetApp.getUi().alert('🔄 Sync Status', 'Data is saved automatically in Google Sheets.\nUse Export to create backups.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showThemes() {
  SpreadsheetApp.getUi().alert('🎨 Themes', 'Current theme: Dark Red (#7A1927)\nMore themes coming in web version!', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showShortcuts() {
  showHelp(); // Redirect to help which includes shortcuts
}