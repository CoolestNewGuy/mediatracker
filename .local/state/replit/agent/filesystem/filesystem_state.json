{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Media Tracker\n\n## Overview\n\nThis is a personal media tracking platform designed to help users manage and track their entertainment consumption. The platform focuses on four main media types (Movies, TV Shows, Anime, and Books/Manga) with extensible support for additional categories like novels, manhwa, manhua, pornhwa, etc. The application provides comprehensive tracking capabilities with progress monitoring, statistics, achievements, and planned AI guidance using Claude. Future features include streaming service integration (Netflix, Prime, etc.) and deployment to CoolestNewGuy.xyz domain.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nMain media focus: Movies, TV Shows, Anime, Books/Manga (primary), with additional extensible categories\nPreferred AI: Claude for non-invasive guidance\nDomain: CoolestNewGuy.xyz\nInterface preference: Catalog view over random picker for browsing content\nStreaming integration: Netflix, Prime Video, and other major providers (planned)\nAuthentication: Replit Auth for secure user sessions (implemented 2025-01-02)\n\n### Development Focus (Updated 2025-01-02)\n- **Practical over fancy**: Focus on working functionality rather than complex UI\n- **Performance first**: Optimize images, add pagination, proper indexing\n- **Real APIs**: Use AniList (no key needed), TMDB (free key), avoid mock data\n- **Keyboard shortcuts**: A (add), L (library), Space (quick update), / (search), ? (help)\n- **Quick operations**: Bulk select, fuzzy search, smart continue watching\n- **Import/Export**: Support MAL XML, AniList JSON, Goodreads CSV formats\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript running on Vite for fast development and optimized builds\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with custom dark theme and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for REST API endpoints\n- **Database ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Database**: PostgreSQL (configured for Neon serverless) with connection pooling\n- **API Design**: RESTful endpoints with JSON responses and error handling middleware\n- **Development**: Hot reloading with Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with tables for users, media items, achievements, user statistics, and sessions\n- **Schema Design**: Normalized schema with support for multiple media types, flexible progress tracking, and Replit Auth integration\n- **User Management**: Automatic user creation/update via OpenID Connect claims with profile data storage\n- **Session Storage**: PostgreSQL-backed session store with automatic cleanup and secure cookie management\n- **Connection**: Neon serverless PostgreSQL with WebSocket support for optimal performance\n- **Migrations**: Drizzle Kit for schema migrations and database versioning\n\n### Authentication and Authorization\n- **Session Management**: Replit Auth implementation with secure session handling using PostgreSQL session store\n- **Authentication Provider**: OpenID Connect via Replit for seamless user authentication\n- **Session Storage**: Database-backed sessions with 7-day TTL and automatic refresh token handling\n- **Authorization**: User-scoped data access with userId filtering on all media operations\n- **User Interface**: Landing page for unauthenticated users, dashboard for authenticated users\n- **Security**: All API routes protected with authentication middleware, proper error handling for unauthorized access\n\n### External Dependencies\n- **UI Framework**: Radix UI primitives for accessible, unstyled components\n- **Database**: Neon PostgreSQL serverless database with WebSocket connections\n- **Validation**: Zod for runtime type validation and schema definition\n- **Development Tools**: ESBuild for production builds, TSX for development server\n- **Icons**: Lucide React for consistent iconography\n- **Date Handling**: date-fns for date manipulation and formatting\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling and connection pooling\n- **Replit Environment**: Development and hosting platform with integrated tooling\n\n### Development Dependencies\n- **Vite**: Build tool and development server with HMR and optimized bundling\n- **TypeScript**: Type safety across the entire application stack\n- **Drizzle Kit**: Database migration tool and schema management\n\n### UI/UX Libraries\n- **Radix UI**: Comprehensive component library for accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Feather-inspired icon library\n\n### Data Management\n- **TanStack Query**: Server state management with caching, background updates, and optimistic updates\n- **Zod**: Schema validation for API inputs and type safety\n- **React Hook Form**: Form management with validation integration\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx/tailwind-merge**: Conditional className utilities\n- **class-variance-authority**: Type-safe variant API for components","size_bytes":5533},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/complete-media-tracker-script_1754138159678.js":{"content":"// Complete Media Tracker Script - All Features\n// Make sure to SAVE and REFRESH your spreadsheet after adding this\n\n// ===== MENU SETUP =====\nfunction onOpen() {\n  SpreadsheetApp.getUi()\n    .createMenu('📺 Media Tracker')\n    .addItem('➕ Add New Media', 'showAddMediaDialog')\n    .addItem('⚡ Quick Update', 'showQuickUpdateSidebar')\n    .addItem('📊 Dashboard', 'createDashboard')\n    .addItem('🔍 Search All Media', 'showSearchDialog')\n    .addItem('📈 Progress Charts', 'showProgressCharts')\n    .addItem('🎲 Random Picker', 'showRandomPicker')\n    .addItem('📅 Watch Calendar', 'showWatchCalendar')\n    .addItem('⏰ Time Tracker', 'showTimeTracker')\n    .addSeparator()\n    .addItem('💡 Get Recommendations', 'showRecommendations')\n    .addItem('🏆 Achievements', 'showAchievements')\n    .addItem('📋 Watchlist Planner', 'showWatchlistPlanner')\n    .addItem('🔄 Sync Status', 'showSyncStatus')\n    .addSeparator()\n    .addItem('📥 Import from CSV', 'importFromCSV')\n    .addItem('📤 Export All Data', 'exportAllData')\n    .addItem('💾 Backup to Drive', 'performBackup')\n    .addItem('🔧 Batch Operations', 'showBatchOperations')\n    .addSeparator()\n    .addItem('⚙️ Settings', 'showSettings')\n    .addItem('🎨 Themes', 'showThemes')\n    .addItem('⌨️ Keyboard Shortcuts', 'showShortcuts')\n    .addToUi();\n}\n\n// ===== CORE FUNCTIONS =====\nfunction showAddMediaDialog() {\n  var html = HtmlService.createHtmlOutputFromFile('AddMediaForm')\n      .setWidth(400)\n      .setHeight(600);\n  SpreadsheetApp.getUi()\n      .showModalDialog(html, 'Add New Media');\n}\n\nfunction addMedia(mediaData) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(mediaData.type);\n  \n  if (!sheet) {\n    throw new Error('Sheet not found: ' + mediaData.type);\n  }\n  \n  var row = [];\n  var dateAdded = new Date().toLocaleDateString();\n  \n  // Track time if starting\n  if (mediaData.status === 'In Progress') {\n    PropertiesService.getUserProperties().setProperty(\n      'startTime_' + mediaData.title, \n      new Date().getTime().toString()\n    );\n  }\n  \n  switch(mediaData.type) {\n    case 'Anime':\n    case 'TV Shows':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.season && mediaData.episode ? `S${mediaData.season}E${mediaData.episode}` : '',\n        mediaData.season || '',\n        mediaData.episode || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Manhwa':\n    case 'Pornhwa':\n    case 'Novels':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.chapter ? `Ch${mediaData.chapter}` : '',\n        mediaData.chapter || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Movies':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n  }\n  \n  sheet.appendRow(row);\n  \n  // Check for achievements\n  checkAchievements('add', mediaData);\n  \n  // Auto-archive if dropped\n  if (mediaData.status === 'Dropped') {\n    moveToArchive(sheet, sheet.getLastRow());\n  }\n  \n  return true;\n}\n\n// ===== QUICK UPDATE SIDEBAR =====\nfunction showQuickUpdateSidebar() {\n  var html = HtmlService.createHtmlOutputFromFile('QuickUpdateSidebar')\n      .setTitle('Quick Update')\n      .setWidth(300);\n  SpreadsheetApp.getUi().showSidebar(html);\n}\n\nfunction getInProgressItems() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];\n  var items = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][1] === 'In Progress' && data[i][0]) {\n        items.push({\n          type: sheetName,\n          title: data[i][0],\n          currentProgress: data[i][2],\n          row: i + 1\n        });\n      }\n    }\n  });\n  \n  return items;\n}\n\nfunction incrementProgress(type, title) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(type);\n  var data = sheet.getDataRange().getValues();\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][0] === title) {\n      var currentProgress = data[i][2];\n      var newProgress = '';\n      \n      if (type === 'Anime' || type === 'TV Shows') {\n        var match = currentProgress.match(/S(\\d+)E(\\d+)/);\n        if (match) {\n          var season = parseInt(match[1]);\n          var episode = parseInt(match[2]) + 1;\n          newProgress = `S${season}E${episode}`;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 5).setValue(episode);\n        }\n      } else {\n        var match = currentProgress.match(/Ch(\\d+)/);\n        if (match) {\n          var chapter = parseInt(match[1]) + 1;\n          newProgress = `Ch${chapter}`;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(chapter);\n        }\n      }\n      \n      // Track progress for achievements\n      checkAchievements('progress', {type: type, title: title});\n      \n      return newProgress;\n    }\n  }\n}\n\n// ===== DASHBOARD & ANALYTICS =====\nfunction createDashboard() {\n  var analysis = analyzeUserPreferences();\n  var stats = getDetailedStats();\n  var streak = getWatchStreak();\n  \n  var html = HtmlService.createHtmlOutputFromFile('Dashboard')\n    .setWidth(600)\n    .setHeight(800);\n    \n  SpreadsheetApp.getUi().showModalDialog(html, 'Media Dashboard');\n}\n\nfunction getDetailedStats() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var stats = {\n    total: 0,\n    byStatus: {},\n    byType: {},\n    byGenre: {},\n    recentlyAdded: [],\n    recentlyUpdated: [],\n    completionTimes: [],\n    monthlyProgress: {}\n  };\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    var data = sheet.getDataRange().getValues();\n    \n    stats.byType[sheetName] = {\n      total: 0,\n      completed: 0,\n      inProgress: 0,\n      planned: 0,\n      dropped: 0\n    };\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) {\n        stats.total++;\n        stats.byType[sheetName].total++;\n        \n        // Status tracking\n        var status = data[i][1];\n        stats.byStatus[status] = (stats.byStatus[status] || 0) + 1;\n        \n        if (status === 'Watched' || status === 'Read') {\n          stats.byType[sheetName].completed++;\n        } else if (status === 'In Progress') {\n          stats.byType[sheetName].inProgress++;\n        } else if (status === 'To Watch' || status === 'To Read') {\n          stats.byType[sheetName].planned++;\n        } else if (status === 'Dropped') {\n          stats.byType[sheetName].dropped++;\n        }\n        \n        // Genre tracking\n        var genre = data[i][5] || data[i][2];\n        if (genre) {\n          stats.byGenre[genre] = (stats.byGenre[genre] || 0) + 1;\n        }\n        \n        // Recent items\n        var dateAdded = data[i][6] || data[i][3];\n        if (dateAdded) {\n          stats.recentlyAdded.push({\n            title: data[i][0],\n            type: sheetName,\n            date: dateAdded\n          });\n        }\n      }\n    }\n  });\n  \n  // Sort recent items\n  stats.recentlyAdded.sort(function(a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  \n  return stats;\n}\n\n// ===== RANDOM PICKER =====\nfunction showRandomPicker() {\n  var html = `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      button { background: #7A1927; color: white; padding: 10px 20px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      .result { background: #2a2a2a; padding: 20px; margin: 20px 0; border-radius: 8px; \n                text-align: center; font-size: 18px; }\n      select { padding: 8px; margin: 10px; background: #2a2a2a; color: white; border: 1px solid #7A1927; }\n    </style>\n    \n    <h2>🎲 What Should I Watch/Read?</h2>\n    \n    <select id=\"filterType\">\n      <option value=\"all\">All Types</option>\n      <option value=\"Anime\">Anime Only</option>\n      <option value=\"Manhwa\">Manhwa Only</option>\n      <option value=\"Novels\">Novels Only</option>\n      <option value=\"Movies\">Movies Only</option>\n      <option value=\"TV Shows\">TV Shows Only</option>\n    </select>\n    \n    <select id=\"filterStatus\">\n      <option value=\"planned\">Not Started</option>\n      <option value=\"inprogress\">In Progress</option>\n      <option value=\"all\">All</option>\n    </select>\n    \n    <button onclick=\"pickRandom()\">🎲 Pick Random!</button>\n    \n    <div id=\"result\" class=\"result\">Click to get a suggestion!</div>\n    \n    <script>\n      function pickRandom() {\n        var type = document.getElementById('filterType').value;\n        var status = document.getElementById('filterStatus').value;\n        \n        google.script.run\n          .withSuccessHandler(function(item) {\n            if (item) {\n              document.getElementById('result').innerHTML = \n                '<strong>' + item.type + '</strong><br>' +\n                '<h3>' + item.title + '</h3>' +\n                'Status: ' + item.status + '<br>' +\n                (item.genre ? 'Genre: ' + item.genre : '');\n            } else {\n              document.getElementById('result').innerHTML = 'No items found with those filters!';\n            }\n          })\n          .getRandomItem(type, status);\n      }\n    </script>\n  `;\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(400)\n    .setHeight(400);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Random Picker');\n}\n\nfunction getRandomItem(filterType, filterStatus) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = filterType === 'all' ? \n    ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'] : \n    [filterType];\n  \n  var candidates = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) {\n        var status = data[i][1];\n        var include = false;\n        \n        if (filterStatus === 'all') {\n          include = true;\n        } else if (filterStatus === 'planned') {\n          include = (status === 'To Watch' || status === 'To Read');\n        } else if (filterStatus === 'inprogress') {\n          include = (status === 'In Progress');\n        }\n        \n        if (include) {\n          candidates.push({\n            type: sheetName,\n            title: data[i][0],\n            status: status,\n            genre: data[i][5] || data[i][2] || ''\n          });\n        }\n      }\n    }\n  });\n  \n  if (candidates.length === 0) return null;\n  \n  return candidates[Math.floor(Math.random() * candidates.length)];\n}\n\n// ===== ACHIEVEMENTS SYSTEM =====\nfunction checkAchievements(action, data) {\n  var achievements = PropertiesService.getUserProperties();\n  var stats = getDetailedStats();\n  \n  var newAchievements = [];\n  \n  // Check various achievements\n  if (stats.total >= 100 && !achievements.getProperty('ach_collector')) {\n    achievements.setProperty('ach_collector', 'true');\n    newAchievements.push('📚 Collector - Added 100 items!');\n  }\n  \n  if (stats.byStatus['Watched'] + stats.byStatus['Read'] >= 50 && !achievements.getProperty('ach_dedicated')) {\n    achievements.setProperty('ach_dedicated', 'true');\n    newAchievements.push('🏆 Dedicated - Completed 50 items!');\n  }\n  \n  var inProgressCount = stats.byStatus['In Progress'] || 0;\n  if (inProgressCount >= 20 && !achievements.getProperty('ach_juggler')) {\n    achievements.setProperty('ach_juggler', 'true');\n    newAchievements.push('🤹 Juggler - 20 items in progress at once!');\n  }\n  \n  // Show new achievements\n  if (newAchievements.length > 0) {\n    SpreadsheetApp.getUi().alert(\n      '🎉 New Achievement!', \n      newAchievements.join('\\n'), \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  }\n}\n\nfunction showAchievements() {\n  var achievements = PropertiesService.getUserProperties();\n  var allAchievements = [\n    {id: 'ach_collector', name: '📚 Collector', desc: 'Add 100 items'},\n    {id: 'ach_dedicated', name: '🏆 Dedicated', desc: 'Complete 50 items'},\n    {id: 'ach_juggler', name: '🤹 Juggler', desc: '20 items in progress'},\n    {id: 'ach_binger', name: '📺 Binger', desc: 'Update 10 items in one day'},\n    {id: 'ach_explorer', name: '🗺️ Explorer', desc: 'Try all media types'},\n    {id: 'ach_completionist', name: '✅ Completionist', desc: '90% completion rate'},\n    {id: 'ach_speed_reader', name: '⚡ Speed Reader', desc: 'Read 100 chapters in a week'},\n    {id: 'ach_loyal', name: '💗 Loyal', desc: 'Use tracker for 30 days'},\n    {id: 'ach_organized', name: '📋 Organized', desc: 'Use all features'},\n    {id: 'ach_social', name: '🌟 Social', desc: 'Share recommendations'}\n  ];\n  \n  var html = '<h2>🏆 Your Achievements</h2>';\n  var earned = 0;\n  \n  allAchievements.forEach(function(ach) {\n    var hasAch = achievements.getProperty(ach.id) === 'true';\n    if (hasAch) earned++;\n    \n    html += '<div style=\"padding: 10px; background: ' + (hasAch ? '#2a2a2a' : '#1a1a1a') + \n            '; margin: 5px 0; border-radius: 4px; opacity: ' + (hasAch ? '1' : '0.5') + ';\">';\n    html += '<strong>' + ach.name + '</strong> - ' + ach.desc;\n    html += hasAch ? ' ✅' : ' 🔒';\n    html += '</div>';\n  });\n  \n  html = '<div style=\"text-align: center; margin-bottom: 20px;\">Progress: ' + earned + '/' + \n         allAchievements.length + '</div>' + html;\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(400)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Achievements');\n}\n\n// ===== BATCH OPERATIONS =====\nfunction showBatchOperations() {\n  var html = `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      .operation { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }\n      button { background: #7A1927; color: white; padding: 8px 16px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      select, input { padding: 8px; margin: 5px; background: #2a2a2a; color: white; \n                      border: 1px solid #7A1927; border-radius: 4px; }\n    </style>\n    \n    <h2>🔧 Batch Operations</h2>\n    \n    <div class=\"operation\">\n      <h3>Mark Multiple as Watched/Read</h3>\n      <select id=\"batchType\">\n        <option value=\"Anime\">Anime</option>\n        <option value=\"Manhwa\">Manhwa</option>\n        <option value=\"Novels\">Novels</option>\n        <option value=\"Movies\">Movies</option>\n        <option value=\"TV Shows\">TV Shows</option>\n      </select>\n      <button onclick=\"markAllComplete()\">Mark All In Progress as Complete</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Bulk Genre Update</h3>\n      <input type=\"text\" id=\"genreSearch\" placeholder=\"Search title contains...\">\n      <input type=\"text\" id=\"newGenre\" placeholder=\"New genre\">\n      <button onclick=\"bulkGenreUpdate()\">Update Genres</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Clean Up</h3>\n      <button onclick=\"removeDuplicates()\">Remove Duplicates</button>\n      <button onclick=\"cleanEmptyRows()\">Clean Empty Rows</button>\n      <button onclick=\"standardizeProgress()\">Fix Progress Format</button>\n    </div>\n    \n    <div id=\"result\" style=\"margin-top: 20px; padding: 10px; background: #2a2a2a; border-radius: 4px; display: none;\"></div>\n    \n    <script>\n      function showResult(message) {\n        var result = document.getElementById('result');\n        result.style.display = 'block';\n        result.innerHTML = message;\n      }\n      \n      function markAllComplete() {\n        var type = document.getElementById('batchType').value;\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Marked ' + count + ' items as complete!');\n          })\n          .batchMarkComplete(type);\n      }\n      \n      function bulkGenreUpdate() {\n        var search = document.getElementById('genreSearch').value;\n        var genre = document.getElementById('newGenre').value;\n        if (!search || !genre) {\n          showResult('❌ Please fill both fields');\n          return;\n        }\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Updated genre for ' + count + ' items!');\n          })\n          .batchUpdateGenre(search, genre);\n      }\n      \n      function removeDuplicates() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Removed ' + count + ' duplicates!');\n          })\n          .removeDuplicateEntries();\n      }\n      \n      function cleanEmptyRows() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Cleaned ' + count + ' empty rows!');\n          })\n          .cleanupEmptyRows();\n      }\n      \n      function standardizeProgress() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Fixed progress format for ' + count + ' items!');\n          })\n          .standardizeProgressFormat();\n      }\n    </script>\n  `;\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(500)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Batch Operations');\n}\n\nfunction batchMarkComplete(type) {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(type);\n  var data = sheet.getDataRange().getValues();\n  var count = 0;\n  \n  var status = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][1] === 'In Progress') {\n      sheet.getRange(i + 1, 2).setValue(status);\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n// ===== EXPORT/IMPORT =====\nfunction exportAllData() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows', 'Archive'];\n  var allData = {};\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    allData[sheetName] = sheet.getDataRange().getValues();\n  });\n  \n  var json = JSON.stringify(allData, null, 2);\n  var blob = Utilities.newBlob(json, 'application/json', \n    'MediaTracker_Export_' + new Date().toISOString().split('T')[0] + '.json');\n  \n  var file = DriveApp.createFile(blob);\n  \n  SpreadsheetApp.getUi().alert(\n    'Export Complete', \n    'File saved to Drive:\\n' + file.getUrl(), \n    SpreadsheetApp.getUi().ButtonSet.OK\n  );\n}\n\n// ===== WATCH CALENDAR =====\nfunction showWatchCalendar() {\n  var html = HtmlService.createHtmlOutputFromFile('WatchCalendar')\n    .setWidth(800)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(html, 'Watch Calendar');\n}\n\n// ===== TIME TRACKER =====\nfunction showTimeTracker() {\n  var timeData = getTimeSpentData();\n  \n  var html = '<h2>⏰ Time Tracking</h2>';\n  html += '<div style=\"font-family: Arial; color: white; background: #1a1a1a; padding: 20px;\">';\n  \n  Object.keys(timeData).forEach(function(type) {\n    if (timeData[type].total > 0) {\n      var hours = Math.floor(timeData[type].total / 60);\n      var minutes = timeData[type].total % 60;\n      \n      html += '<div style=\"background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px;\">';\n      html += '<h3>' + type + '</h3>';\n      html += '<div>Total Time: ' + hours + 'h ' + minutes + 'm</div>';\n      html += '<div>Items: ' + timeData[type].count + '</div>';\n      html += '<div>Average: ' + Math.round(timeData[type].total / timeData[type].count) + ' minutes</div>';\n      html += '</div>';\n    }\n  });\n  \n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(400)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Time Tracker');\n}\n\nfunction getTimeSpentData() {\n  // Simplified time tracking - in real app would track actual time\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Movies', 'TV Shows'];\n  var timeData = {};\n  \n  sheets.forEach(function(sheetName) {\n    timeData[sheetName] = {\n      total: 0,\n      count: 0\n    };\n    \n    var sheet = ss.getSheetByName(sheetName);\n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][1] === 'Watched' || data[i][1] === 'Read') {\n        timeData[sheetName].count++;\n        \n        // Estimate time based on type\n        if (sheetName === 'Anime') {\n          timeData[sheetName].total += 24 * (data[i][4] || 1); // 24 min per episode\n        } else if (sheetName === 'Movies') {\n          timeData[sheetName].total += 120; // 2 hours per movie\n        } else if (sheetName === 'TV Shows') {\n          timeData[sheetName].total += 45 * (data[i][4] || 1); // 45 min per episode\n        } else if (sheetName === 'Manhwa') {\n          timeData[sheetName].total += 3 * (data[i][3] || 1); // 3 min per chapter\n        }\n      }\n    }\n  });\n  \n  return timeData;\n}\n\n// ===== AUTO FORMATTING =====\nfunction onEdit(e) {\n  var range = e.range;\n  var sheet = e.source.getActiveSheet();\n  var col = range.getColumn();\n  var row = range.getRow();\n  var value = e.value;\n  \n  // Skip header row\n  if (row === 1) return;\n  \n  // Auto-format progress\n  if (col === 3 && value) {\n    if (!value.includes('Ch') && !value.includes('S') && !isNaN(value)) {\n      var sheetName = sheet.getName();\n      if (sheetName === 'Anime' || sheetName === 'TV Shows') {\n        range.setValue('S1E' + value);\n      } else if (sheetName === 'Manhwa' || sheetName === 'Pornhwa' || sheetName === 'Novels') {\n        range.setValue('Ch' + value);\n      }\n    }\n  }\n  \n  // Auto-archive if dropped\n  if (col === 2 && value === 'Dropped') {\n    moveToArchive(sheet, row);\n  }\n  \n  // Auto-date if adding new item\n  if (col === 1 && value && !sheet.getRange(row, 7).getValue()) {\n    sheet.getRange(row, 7).setValue(new Date().toLocaleDateString());\n  }\n}\n\nfunction moveToArchive(sheet, row) {\n  var archiveSheet = sheet.getParent().getSheetByName('Archive');\n  var rowData = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];\n  \n  var archiveData = [sheet.getName()].concat(rowData);\n  archiveSheet.appendRow(archiveData);\n  \n  sheet.deleteRow(row);\n}\n\n// ===== SEARCH FUNCTIONALITY =====\nfunction showSearchDialog() {\n  var html = `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      input { width: 100%; padding: 10px; margin: 10px 0; background: #2a2a2a; \n              color: white; border: 1px solid #7A1927; border-radius: 4px; }\n      .result { background: #2a2a2a; padding: 10px; margin: 5px 0; \n                border-radius: 4px; cursor: pointer; }\n      .result:hover { background: #3a3a3a; }\n    </style>\n    \n    <h2>🔍 Search All Media</h2>\n    <input type=\"text\" id=\"searchQuery\" placeholder=\"Search titles...\" onkeyup=\"search()\">\n    <div id=\"results\"></div>\n    \n    <script>\n      function search() {\n        var query = document.getElementById('searchQuery').value;\n        if (query.length < 2) {\n          document.getElementById('results').innerHTML = '';\n          return;\n        }\n        \n        google.script.run\n          .withSuccessHandler(function(results) {\n            var html = '';\n            results.forEach(function(item) {\n              html += '<div class=\"result\">';\n              html += '<strong>' + item.title + '</strong> ';\n              html += '<span style=\"color:","size_bytes":23845},"attached_assets/media_tracker_fixed0_1754138159678.js":{"content":"// ===== COMPLETE MEDIA TRACKER - FIXED & ENHANCED =====\n// Make sure to SAVE and REFRESH your spreadsheet after adding this\n\n// ===== MENU SETUP =====\nfunction onOpen() {\n  SpreadsheetApp.getUi()\n    .createMenu('📺 Media Tracker')\n    .addItem('➕ Add New Media', 'showAddMediaDialog')\n    .addItem('⚡ Quick Update', 'showQuickUpdateSidebar')\n    .addItem('📊 Dashboard', 'createDashboard')\n    .addItem('🔍 Search All Media', 'showSearchDialog')\n    .addItem('📈 Progress Charts', 'showProgressCharts')\n    .addItem('🎲 Random Picker', 'showRandomPicker')\n    .addItem('📅 Watch Calendar', 'showWatchCalendar')\n    .addItem('⏰ Time Tracker', 'showTimeTracker')\n    .addSeparator()\n    .addItem('💡 Get Recommendations', 'showRecommendations')\n    .addItem('🏆 Achievements', 'showAchievements')\n    .addItem('📋 Watchlist Planner', 'showWatchlistPlanner')\n    .addItem('🔄 Sync Status', 'showSyncStatus')\n    .addSeparator()\n    .addItem('📥 Import from CSV', 'importFromCSV')\n    .addItem('📤 Export All Data', 'exportAllData')\n    .addItem('💾 Backup to Drive', 'performBackup')\n    .addItem('🔧 Batch Operations', 'showBatchOperations')\n    .addSeparator()\n    .addItem('⚙️ Settings', 'showSettings')\n    .addItem('🎨 Themes', 'showThemes')\n    .addItem('⌨️ Keyboard Shortcuts', 'showShortcuts')\n    .addItem('🛠️ Setup Sheets', 'setupMediaTracker')\n    .addToUi();\n}\n\n// ===== SHEET SETUP FUNCTION =====\nfunction setupMediaTracker() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  \n  // Define sheet configurations\n  var sheetConfigs = {\n    'Anime': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped']\n    },\n    'Manhwa': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Pornhwa': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Novels': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Movies': {\n      headers: ['Name/Title', 'Status', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'Watched', 'Dropped']\n    },\n    'TV Shows': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped']\n    },\n    'Archive': {\n      headers: ['Media Type', 'Name/Title', 'Status', 'Progress', 'Season/Chapters', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['Dropped']\n    }\n  };\n  \n  var genreOptions = ['Fantasy', 'Sci-Fi', 'Romance', 'Slice of Life', 'Action', 'Adventure', 'Comedy', 'Drama', 'Horror', 'Mystery', 'Thriller'];\n  \n  // Create and setup each sheet\n  Object.keys(sheetConfigs).forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) {\n      sheet = ss.insertSheet(sheetName);\n    }\n    \n    var config = sheetConfigs[sheetName];\n    \n    // Set headers\n    var headerRange = sheet.getRange(1, 1, 1, config.headers.length);\n    headerRange.setValues([config.headers]);\n    headerRange.setBackground('#7A1927');\n    headerRange.setFontColor('white');\n    headerRange.setFontWeight('bold');\n    \n    // Set up data validation\n    if (sheetName !== 'Archive') {\n      // Status dropdown\n      var statusCol = config.headers.indexOf('Status') + 1;\n      if (statusCol > 0) {\n        var statusRange = sheet.getRange(2, statusCol, 999, 1);\n        var statusRule = SpreadsheetApp.newDataValidation()\n          .requireValueInList(config.statusOptions)\n          .build();\n        statusRange.setDataValidation(statusRule);\n      }\n      \n      // Genre dropdown\n      var genreCol = config.headers.indexOf('Genre') + 1;\n      if (genreCol > 0) {\n        var genreRange = sheet.getRange(2, genreCol, 999, 1);\n        var genreRule = SpreadsheetApp.newDataValidation()\n          .requireValueInList(genreOptions)\n          .build();\n        genreRange.setDataValidation(genreRule);\n      }\n    }\n    \n    // Format the sheet\n    sheet.setFrozenRows(1);\n    sheet.autoResizeColumns(1, config.headers.length);\n  });\n  \n  SpreadsheetApp.getUi().alert('✅ Media Tracker setup complete! All sheets, formatting, and dropdowns have been created.');\n}\n\n// ===== ADD MEDIA FUNCTION =====\nfunction showAddMediaDialog() {\n  var html = createAddMediaForm();\n  var htmlOutput = HtmlService.createHtmlOutput(html)\n      .setWidth(400)\n      .setHeight(600);\n  SpreadsheetApp.getUi()\n      .showModalDialog(htmlOutput, 'Add New Media');\n}\n\nfunction createAddMediaForm() {\n  return `\n    <style>\n      body { \n        font-family: Arial, sans-serif; \n        padding: 20px; \n        background: #1a1a1a; \n        color: white; \n        margin: 0;\n      }\n      .form-group {\n        margin-bottom: 15px;\n      }\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n        color: #fff;\n      }\n      input, select, textarea {\n        width: 100%;\n        padding: 10px;\n        background: #2a2a2a;\n        border: 1px solid #7A1927;\n        border-radius: 4px;\n        color: white;\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      input:focus, select:focus, textarea:focus {\n        outline: none;\n        border-color: #ff6b6b;\n        box-shadow: 0 0 5px rgba(255, 107, 107, 0.3);\n      }\n      button {\n        background: #7A1927;\n        color: white;\n        padding: 12px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 100%;\n        margin-top: 10px;\n      }\n      button:hover {\n        background: #8B1E2E;\n      }\n      .quick-buttons {\n        display: flex;\n        gap: 5px;\n        margin-top: 5px;\n      }\n      .quick-btn {\n        flex: 1;\n        padding: 5px;\n        font-size: 12px;\n        background: #3a3a3a;\n        border: 1px solid #7A1927;\n      }\n      .quick-btn:hover {\n        background: #7A1927;\n      }\n      .success {\n        background: #2a4a2a;\n        border: 1px solid #4a8a4a;\n        padding: 10px;\n        border-radius: 4px;\n        margin-bottom: 15px;\n        display: none;\n      }\n    </style>\n    \n    <div id=\"success\" class=\"success\">\n      <strong>✅ Media added successfully!</strong>\n    </div>\n    \n    <form id=\"mediaForm\">\n      <div class=\"form-group\">\n        <label for=\"type\">Media Type:</label>\n        <select id=\"type\" name=\"type\" onchange=\"updateFormFields()\" required>\n          <option value=\"\">Select Type</option>\n          <option value=\"Anime\">Anime</option>\n          <option value=\"Manhwa\">Manhwa</option>\n          <option value=\"Pornhwa\">Pornhwa</option>\n          <option value=\"Novels\">Novels</option>\n          <option value=\"Movies\">Movies</option>\n          <option value=\"TV Shows\">TV Shows</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\" required>\n          <option value=\"\">Select Status</option>\n        </select>\n        <div class=\"quick-buttons\">\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('planned')\">To Watch/Read</button>\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('progress')\">In Progress</button>\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('completed')\">Completed</button>\n        </div>\n      </div>\n      \n      <div class=\"form-group\" id=\"progressGroup\" style=\"display: none;\">\n        <label for=\"progress\">Progress:</label>\n        <input type=\"text\" id=\"progress\" name=\"progress\" placeholder=\"e.g., Ch25 or S1E12\">\n      </div>\n      \n      <div class=\"form-group\" id=\"seasonGroup\" style=\"display: none;\">\n        <label for=\"season\">Season:</label>\n        <input type=\"number\" id=\"season\" name=\"season\" min=\"1\" value=\"1\">\n      </div>\n      \n      <div class=\"form-group\" id=\"episodeGroup\" style=\"display: none;\">\n        <label for=\"episode\">Episode/Chapter:</label>\n        <input type=\"number\" id=\"episode\" name=\"episode\" min=\"0\" value=\"0\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"genre\">Genre:</label>\n        <select id=\"genre\" name=\"genre\">\n          <option value=\"\">Select Genre</option>\n          <option value=\"Fantasy\">Fantasy</option>\n          <option value=\"Sci-Fi\">Sci-Fi</option>\n          <option value=\"Romance\">Romance</option>\n          <option value=\"Slice of Life\">Slice of Life</option>\n          <option value=\"Action\">Action</option>\n          <option value=\"Adventure\">Adventure</option>\n          <option value=\"Comedy\">Comedy</option>\n          <option value=\"Drama\">Drama</option>\n          <option value=\"Horror\">Horror</option>\n          <option value=\"Mystery\">Mystery</option>\n          <option value=\"Thriller\">Thriller</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"notes\">Notes (Optional):</label>\n        <textarea id=\"notes\" name=\"notes\" rows=\"3\"></textarea>\n      </div>\n      \n      <button type=\"button\" onclick=\"addMedia()\">Add Media</button>\n    </form>\n    \n    <script>\n      function updateFormFields() {\n        var type = document.getElementById('type').value;\n        var statusSelect = document.getElementById('status');\n        var progressGroup = document.getElementById('progressGroup');\n        var seasonGroup = document.getElementById('seasonGroup');\n        var episodeGroup = document.getElementById('episodeGroup');\n        \n        // Clear existing options\n        statusSelect.innerHTML = '<option value=\"\">Select Status</option>';\n        \n        // Hide all conditional fields\n        progressGroup.style.display = 'none';\n        seasonGroup.style.display = 'none';\n        episodeGroup.style.display = 'none';\n        \n        if (type === 'Movies') {\n          statusSelect.innerHTML += '<option value=\"To Watch\">To Watch</option>';\n          statusSelect.innerHTML += '<option value=\"Watched\">Watched</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n        } else if (type === 'Anime' || type === 'TV Shows') {\n          statusSelect.innerHTML += '<option value=\"To Watch\">To Watch</option>';\n          statusSelect.innerHTML += '<option value=\"In Progress\">In Progress</option>';\n          statusSelect.innerHTML += '<option value=\"Watched\">Watched</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n          progressGroup.style.display = 'block';\n          seasonGroup.style.display = 'block';\n          episodeGroup.style.display = 'block';\n        } else if (type === 'Manhwa' || type === 'Pornhwa' || type === 'Novels') {\n          statusSelect.innerHTML += '<option value=\"To Read\">To Read</option>';\n          statusSelect.innerHTML += '<option value=\"In Progress\">In Progress</option>';\n          statusSelect.innerHTML += '<option value=\"Read\">Read</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n          progressGroup.style.display = 'block';\n          episodeGroup.style.display = 'block';\n          document.querySelector('label[for=\"episode\"]').textContent = 'Chapter:';\n        }\n      }\n      \n      function setStatus(type) {\n        var statusSelect = document.getElementById('status');\n        var mediaType = document.getElementById('type').value;\n        \n        if (type === 'planned') {\n          statusSelect.value = mediaType === 'Movies' ? 'To Watch' : \n                              (mediaType === 'Anime' || mediaType === 'TV Shows' ? 'To Watch' : 'To Read');\n        } else if (type === 'progress') {\n          statusSelect.value = 'In Progress';\n        } else if (type === 'completed') {\n          statusSelect.value = mediaType === 'Movies' ? 'Watched' : \n                              (mediaType === 'Anime' || mediaType === 'TV Shows' ? 'Watched' : 'Read');\n        }\n      }\n      \n      function addMedia() {\n        var form = document.getElementById('mediaForm');\n        var formData = new FormData(form);\n        \n        if (!formData.get('type') || !formData.get('title') || !formData.get('status')) {\n          alert('Please fill in all required fields');\n          return;\n        }\n        \n        var mediaData = {\n          type: formData.get('type'),\n          title: formData.get('title'),\n          status: formData.get('status'),\n          genre: formData.get('genre'),\n          notes: formData.get('notes')\n        };\n        \n        // Handle progress formatting\n        var season = formData.get('season');\n        var episode = formData.get('episode');\n        var progress = formData.get('progress');\n        \n        if (mediaData.type === 'Anime' || mediaData.type === 'TV Shows') {\n          if (season && episode) {\n            mediaData.progress = 'S' + season + 'E' + episode;\n            mediaData.season = season;\n            mediaData.episode = episode;\n          }\n        } else if (mediaData.type === 'Manhwa' || mediaData.type === 'Pornhwa' || mediaData.type === 'Novels') {\n          if (episode) {\n            mediaData.progress = 'Ch' + episode;\n            mediaData.chapter = episode;\n          }\n        }\n        \n        google.script.run\n          .withSuccessHandler(function(result) {\n            document.getElementById('success').style.display = 'block';\n            form.reset();\n            setTimeout(function() {\n              document.getElementById('success').style.display = 'none';\n            }, 3000);\n          })\n          .withFailureHandler(function(error) {\n            alert('Error adding media: ' + error.toString());\n          })\n          .addMedia(mediaData);\n      }\n    </script>\n  `;\n}\n\nfunction addMedia(mediaData) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(mediaData.type);\n  \n  if (!sheet) {\n    throw new Error('Sheet not found: ' + mediaData.type + '. Please run Setup Sheets first.');\n  }\n  \n  var row = [];\n  var dateAdded = new Date().toLocaleDateString();\n  \n  // Track time if starting\n  if (mediaData.status === 'In Progress') {\n    PropertiesService.getUserProperties().setProperty(\n      'startTime_' + mediaData.title, \n      new Date().getTime().toString()\n    );\n  }\n  \n  switch(mediaData.type) {\n    case 'Anime':\n    case 'TV Shows':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.progress || '',\n        mediaData.season || '',\n        mediaData.episode || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Manhwa':\n    case 'Pornhwa':\n    case 'Novels':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.progress || '',\n        mediaData.chapter || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Movies':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n  }\n  \n  sheet.appendRow(row);\n  \n  // Check for achievements\n  checkAchievements('add', mediaData);\n  \n  // Auto-archive if dropped\n  if (mediaData.status === 'Dropped') {\n    moveToArchive(sheet, sheet.getLastRow());\n  }\n  \n  return true;\n}\n\n// ===== QUICK UPDATE SIDEBAR =====\nfunction showQuickUpdateSidebar() {\n  var html = createQuickUpdateSidebar();\n  var htmlOutput = HtmlService.createHtmlOutput(html)\n      .setTitle('Quick Update')\n      .setWidth(300);\n  SpreadsheetApp.getUi().showSidebar(htmlOutput);\n}\n\nfunction createQuickUpdateSidebar() {\n  return `\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        padding: 15px;\n        background: #1a1a1a;\n        color: white;\n        margin: 0;\n      }\n      .item {\n        background: #2a2a2a;\n        border: 1px solid #7A1927;\n        border-radius: 8px;\n        padding: 12px;\n        margin-bottom: 10px;\n      }\n      .item-title {\n        font-weight: bold;\n        margin-bottom: 5px;\n        color: #ff6b6b;\n      }\n      .item-info {\n        font-size: 12px;\n        color: #ccc;\n        margin-bottom: 8px;\n      }\n      .buttons {\n        display: flex;\n        gap: 5px;\n      }\n      .btn {\n        flex: 1;\n        padding: 6px 8px;\n        background: #7A1927;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n      }\n      .btn:hover {\n        background: #8B1E2E;\n      }\n      .complete-btn {\n        background: #2a4a2a;\n      }\n      .complete-btn:hover {\n        background: #3a5a3a;\n      }\n      .refresh-btn {\n        width: 100%;\n        margin-bottom: 15px;\n        padding: 10px;\n        background: #3a3a3a;\n      }\n      .no-items {\n        text-align: center;\n        color: #888;\n        padding: 20px;\n      }\n    </style>\n    \n    <button class=\"btn refresh-btn\" onclick=\"loadItems()\">🔄 Refresh</button>\n    <div id=\"items\"></div>\n    \n    <script>\n      function loadItems() {\n        google.script.run\n          .withSuccessHandler(displayItems)\n          .getInProgressItems();\n      }\n      \n      function displayItems(items) {\n        var container = document.getElementById('items');\n        \n        if (items.length === 0) {\n          container.innerHTML = '<div class=\"no-items\">No items in progress</div>';\n          return;\n        }\n        \n        var html = '';\n        items.forEach(function(item) {\n          html += '<div class=\"item\">';\n          html += '<div class=\"item-title\">' + item.title + '</div>';\n          html += '<div class=\"item-info\">' + item.type + ' - ' + item.currentProgress + '</div>';\n          html += '<div class=\"buttons\">';\n          html += '<button class=\"btn\" onclick=\"increment(\\'' + item.type + '\\', \\'' + item.title + '\\')\">+1</button>';\n          html += '<button class=\"btn complete-btn\" onclick=\"markComplete(\\'' + item.type + '\\', \\'' + item.title + '\\')\">✓</button>';\n          html += '</div>';\n          html += '</div>';\n        });\n        \n        container.innerHTML = html;\n      }\n      \n      function increment(type, title) {\n        google.script.run\n          .withSuccessHandler(function(newProgress) {\n            if (newProgress) {\n              loadItems(); // Refresh the list\n            }\n          })\n          .incrementProgress(type, title);\n      }\n      \n      function markComplete(type, title) {\n        google.script.run\n          .withSuccessHandler(function() {\n            loadItems(); // Refresh the list\n          })\n          .markItemComplete(type, title);\n      }\n      \n      // Load items on page load\n      loadItems();\n    </script>\n  `;\n}\n\nfunction getInProgressItems() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];\n  var items = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][1] === 'In Progress' && data[i][0]) {\n        items.push({\n          type: sheetName,\n          title: data[i][0],\n          currentProgress: data[i][2] || 'No progress',\n          row: i + 1\n        });\n      }\n    }\n  });\n  \n  return items;\n}\n\nfunction incrementProgress(type, title) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(type);\n  if (!sheet) return null;\n  \n  var data = sheet.getDataRange().getValues();\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][0] === title) {\n      var currentProgress = data[i][2] || '';\n      var newProgress = '';\n      \n      if (type === 'Anime' || type === 'TV Shows') {\n        var match = currentProgress.match(/S(\\d+)E(\\d+)/);\n        if (match) {\n          var season = parseInt(match[1]);\n          var episode = parseInt(match[2]) + 1;\n          newProgress = 'S' + season + 'E' + episode;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 5).setValue(episode);\n        } else {\n          // Default to S1E1 if no progress set\n          newProgress = 'S1E1';\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(1);\n          sheet.getRange(i + 1, 5).setValue(1);\n        }\n      } else {\n        var match = currentProgress.match(/Ch(\\d+)/);\n        if (match) {\n          var chapter = parseInt(match[1]) + 1;\n          newProgress = 'Ch' + chapter;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(chapter);\n        } else {\n          // Default to Ch1 if no progress set\n          newProgress = 'Ch1';\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(1);\n        }\n      }\n      \n      // Track progress for achievements\n      checkAchievements('progress', {type: type, title: title});\n      \n      return newProgress;\n    }\n  }\n  return null;\n}\n\nfunction markItemComplete(type, title) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(type);\n  if (!sheet) return false;\n  \n  var data = sheet.getDataRange().getValues();\n  var completedStatus = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][0] === title && data[i][1] === 'In Progress') {\n      sheet.getRange(i + 1, 2).setValue(completedStatus);\n      \n      // Track completion for achievements\n      checkAchievements('complete', {type: type, title: title});\n      \n      return true;\n    }\n  }\n  return false;\n}\n\n// ===== DASHBOARD & ANALYTICS =====\nfunction createDashboard() {\n  var stats = getDetailedStats();\n  var html = createDashboardHTML(stats);\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(600)\n    .setHeight(800);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Media Dashboard');\n}\n\nfunction createDashboardHTML(stats) {\n  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);\n  var completionRate = stats.total > 0 ? Math.round((totalCompleted / stats.total) * 100) : 0;\n  \n  return `\n    <style>\n      body { \n        font-family: Arial, sans-serif; \n        padding: 20px; \n        background: #1a1a1a; \n        color: white; \n        margin: 0;\n      }\n      .stat-card {\n        background: #2a2a2a;\n        padding: 15px;\n        margin: 10px 0;\n        border-radius: 8px;\n        border-left: 3px solid #7A1927;\n      }\n      .big-number {\n        font-size: 36px;\n        color: #ff6b6b;\n        font-weight: bold;\n      }\n      .progress-bar {\n        background: #3a3a3a;\n        height: 20px;\n        border-radius: 10px;\n        overflow: hidden;\n        margin: 10px 0;\n      }\n      .progress-fill {\n        background: #7A1927;\n        height: 100%;\n        transition: width 0.3s;\n      }\n      .genre-item {\n        display: flex;\n        justify-content: space-between;\n        padding: 5px 0;\n      }\n      .type-stats {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n      }\n      .mini-card {\n        background: #3a3a3a;\n        padding: 10px;\n        border-radius: 4px;\n        text-align: center;\n      }\n    </style>\n    \n    <h1>📊 Your Media Dashboard</h1>\n    \n    <div class=\"stat-card\">\n      <div class=\"big-number\">${stats.total}</div>\n      <div>Total Items Tracked</div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <div class=\"big-number\">${completionRate}%</div>\n      <div>Completion Rate</div>\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\" style=\"width: ${completionRate}%\"></div>\n      </div>\n      <div>Completed: ${totalCompleted} / ${stats.total}</div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Status Breakdown</h3>\n      ${Object.keys(stats.byStatus).map(status => \n        `<div class=\"genre-item\">\n          <span>${status}:</span>\n          <strong>${stats.byStatus[status]}</strong>\n        </div>`\n      ).join('')}\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>By Media Type</h3>\n      <div class=\"type-stats\">\n        ${Object.keys(stats.byType).map(type => \n          `<div class=\"mini-card\">\n            <div><strong>${type}</strong></div>\n            <div>${stats.byType[type].total} items</div>\n            <div style=\"font-size: 12px; color: #ccc;\">\n              ${stats.byType[type].completed} completed\n            </div>\n          </div>`\n        ).join('')}\n      </div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Top Genres</h3>\n      ${stats.topGenres.slice(0, 5).map(genre => \n        `<div class=\"genre-item\">\n          <span>${genre.name}:</span>\n          <strong>${genre.count} items</strong>\n        </div>`\n      ).join('')}\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Currently In Progress</h3>\n      <div>${stats.inProgressCount} items currently being watched/read</div>\n    </div>\n  `;\n}\n\nfunction getDetailedStats() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var stats = {\n    total: 0,\n    byStatus: {},\n    byType: {},\n    byGenre: {},\n    topGenres: [],\n    inProgressCount: 0,\n    recentlyAdded: []\n  };\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    stats.byType[sheetName] = {\n      total: 0,\n      completed: 0,\n      inProgress: 0,\n      planned: 0,\n      dropped: 0\n    };\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) { // Has title\n        stats.total++;\n        stats.byType[sheetName].total++;\n        \n        // Status tracking\n        var status = data[i][1];\n        if (status) {\n          stats.byStatus[status] = (stats.byStatus[status] || 0) + 1;\n          \n          if (status === 'Watched' || status === 'Read') {\n            stats.byType[sheetName].completed++;\n          } else if (status === 'In Progress') {\n            stats.byType[sheetName].inProgress++;\n            stats.inProgressCount++;\n          } else if (status === 'To Watch' || status === 'To Read') {\n            stats.byType[sheetName].planned++;\n          } else if (status === 'Dropped') {\n            stats.byType[sheetName].dropped++;\n          }\n        }\n        \n        // Genre tracking\n        var genreCol = (sheetName === 'Movies') ? 2 : \n                       (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n        var genre = data[i][genreCol];\n        if (genre) {\n          stats.byGenre[genre] = (stats.byGenre[genre] || 0) + 1;\n        }\n        \n        // Recent items\n        var dateCol = (sheetName === 'Movies') ? 3 : \n                      (sheetName === 'Anime' || sheetName === 'TV Shows') ? 6 : 5;\n        var dateAdded = data[i][dateCol];\n        if (dateAdded) {\n          stats.recentlyAdded.push({\n            title: data[i][0],\n            type: sheetName,\n            date: dateAdded\n          });\n        }\n      }\n    }\n  });\n  \n  // Convert genres to sorted array\n  stats.topGenres = Object.keys(stats.byGenre)\n    .map(genre => ({name: genre, count: stats.byGenre[genre]}))\n    .sort((a, b) => b.count - a.count);\n  \n  // Sort recent items\n  stats.recentlyAdded.sort(function(a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  \n  return stats;\n}\n\n// ===== RANDOM PICKER =====\nfunction showRandomPicker() {\n  var html = createRandomPickerHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(450)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Random Picker');\n}\n\nfunction createRandomPickerHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      button { background: #7A1927; color: white; padding: 10px 20px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      button:hover { background: #8B1E2E; }\n      .result { background: #2a2a2a; padding: 20px; margin: 20px 0; border-radius: 8px; \n                text-align: center; font-size: 18px; min-height: 100px; \n                display: flex; flex-direction: column; justify-content: center; }\n      select { padding: 8px; margin: 10px; background: #2a2a2a; color: white; \n               border: 1px solid #7A1927; border-radius: 4px; }\n      .filters { margin-bottom: 20px; }\n      .big-button { font-size: 18px; padding: 15px 30px; }\n    </style>\n    \n    <h2>🎲 What Should I Watch/Read?</h2>\n    \n    <div class=\"filters\">\n      <div>\n        <label>Media Type:</label>\n        <select id=\"filterType\">\n          <option value=\"all\">All Types</option>\n          <option value=\"Anime\">Anime Only</option>\n          <option value=\"Manhwa\">Manhwa Only</option>\n          <option value=\"Pornhwa\">Pornhwa Only</option>\n          <option value=\"Novels\">Novels Only</option>\n          <option value=\"Movies\">Movies Only</option>\n          <option value=\"TV Shows\">TV Shows Only</option>\n        </select>\n      </div>\n      \n      <div>\n        <label>Status Filter:</label>\n        <select id=\"filterStatus\">\n          <option value=\"planned\">Not Started (To Watch/Read)</option>\n          <option value=\"inprogress\">In Progress</option>\n          <option value=\"all\">All Status</option>\n        </select>\n      </div>\n    </div>\n    \n    <button class=\"big-button\" onclick=\"pickRandom()\">🎲 Pick Random!</button>\n    \n    <div id=\"result\" class=\"result\">Click to get a suggestion!</div>\n    \n    <script>\n      function pickRandom() {\n        var type = document.getElementById('filterType').value;\n        var status = document.getElementById('filterStatus').value;\n        \n        document.getElementById('result').innerHTML = '🎲 Picking something for you...';\n        \n        google.script.run\n          .withSuccessHandler(function(item) {\n            if (item) {\n              document.getElementById('result').innerHTML = \n                '<div style=\"margin-bottom: 10px;\"><strong>' + item.type + '</strong></div>' +\n                '<h3 style=\"color: #ff6b6b; margin: 10px 0;\">' + item.title + '</h3>' +\n                '<div>Status: ' + item.status + '</div>' +\n                (item.progress ? '<div>Progress: ' + item.progress + '</div>' : '') +\n                (item.genre ? '<div>Genre: ' + item.genre + '</div>' : '');\n            } else {\n              document.getElementById('result').innerHTML = \n                '<div style=\"color: #888;\">No items found with those filters!</div>' +\n                '<div style=\"font-size: 14px; margin-top: 10px;\">Try changing your filters or add more media.</div>';\n            }\n          })\n          .withFailureHandler(function(error) {\n            document.getElementById('result').innerHTML = \n              '<div style=\"color: #ff6b6b;\">Error: ' + error.toString() + '</div>';\n          })\n          .getRandomItem(type, status);\n      }\n    </script>\n  `;\n}\n\nfunction getRandomItem(filterType, filterStatus) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = filterType === 'all' ? \n    ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'] : \n    [filterType];\n  \n  var candidates = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) { // Has title\n        var status = data[i][1];\n        var include = false;\n        \n        if (filterStatus === 'all') {\n          include = true;\n        } else if (filterStatus === 'planned') {\n          include = (status === 'To Watch' || status === 'To Read');\n        } else if (filterStatus === 'inprogress') {\n          include = (status === 'In Progress');\n        }\n        \n        if (include) {\n          var genreCol = (sheetName === 'Movies') ? 2 : \n                         (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n          \n          candidates.push({\n            type: sheetName,\n            title: data[i][0],\n            status: status,\n            progress: data[i][2] || '',\n            genre: data[i][genreCol] || ''\n          });\n        }\n      }\n    }\n  });\n  \n  if (candidates.length === 0) return null;\n  \n  return candidates[Math.floor(Math.random() * candidates.length)];\n}\n\n// ===== ACHIEVEMENTS SYSTEM =====\nfunction checkAchievements(action, data) {\n  var achievements = PropertiesService.getUserProperties();\n  var stats = getDetailedStats();\n  \n  var newAchievements = [];\n  \n  // Check various achievements\n  if (stats.total >= 100 && !achievements.getProperty('ach_collector')) {\n    achievements.setProperty('ach_collector', 'true');\n    newAchievements.push('📚 Collector - Added 100 items!');\n  }\n  \n  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);\n  if (totalCompleted >= 50 && !achievements.getProperty('ach_dedicated')) {\n    achievements.setProperty('ach_dedicated', 'true');\n    newAchievements.push('🏆 Dedicated - Completed 50 items!');\n  }\n  \n  if (stats.inProgressCount >= 20 && !achievements.getProperty('ach_juggler')) {\n    achievements.setProperty('ach_juggler', 'true');\n    newAchievements.push('🤹 Juggler - 20 items in progress at once!');\n  }\n  \n  // First item achievement\n  if (stats.total === 1 && !achievements.getProperty('ach_first')) {\n    achievements.setProperty('ach_first', 'true');\n    newAchievements.push('🌟 First Steps - Added your first item!');\n  }\n  \n  // Show new achievements\n  if (newAchievements.length > 0) {\n    SpreadsheetApp.getUi().alert(\n      '🎉 New Achievement!', \n      newAchievements.join('\\n'), \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  }\n}\n\nfunction showAchievements() {\n  var achievements = PropertiesService.getUserProperties();\n  var allAchievements = [\n    {id: 'ach_first', name: '🌟 First Steps', desc: 'Add your first item'},\n    {id: 'ach_collector', name: '📚 Collector', desc: 'Add 100 items'},\n    {id: 'ach_dedicated', name: '🏆 Dedicated', desc: 'Complete 50 items'},\n    {id: 'ach_juggler', name: '🤹 Juggler', desc: '20 items in progress'},\n    {id: 'ach_binger', name: '📺 Binger', desc: 'Update 10 items in one day'},\n    {id: 'ach_explorer', name: '🗺️ Explorer', desc: 'Try all media types'},\n    {id: 'ach_completionist', name: '✅ Completionist', desc: '90% completion rate'},\n    {id: 'ach_speed_reader', name: '⚡ Speed Reader', desc: 'Read 100 chapters in a week'},\n    {id: 'ach_loyal', name: '💗 Loyal', desc: 'Use tracker for 30 days'},\n    {id: 'ach_organized', name: '📋 Organized', desc: 'Use all features'}\n  ];\n  \n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px;\">';\n  html += '<h2>🏆 Your Achievements</h2>';\n  var earned = 0;\n  \n  allAchievements.forEach(function(ach) {\n    var hasAch = achievements.getProperty(ach.id) === 'true';\n    if (hasAch) earned++;\n    \n    html += '<div style=\"padding: 10px; background: ' + (hasAch ? '#2a2a2a' : '#1a1a1a') + \n            '; margin: 5px 0; border-radius: 4px; opacity: ' + (hasAch ? '1' : '0.5') + \n            '; border: 1px solid ' + (hasAch ? '#7A1927' : '#333') + ';\">';\n    html += '<strong>' + ach.name + '</strong> - ' + ach.desc;\n    html += hasAch ? ' ✅' : ' 🔒';\n    html += '</div>';\n  });\n  \n  html = '<div style=\"text-align: center; margin-bottom: 20px; font-size: 18px;\">Progress: ' + earned + '/' + \n         allAchievements.length + '</div>' + html;\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(400)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Achievements');\n}\n\n// ===== BATCH OPERATIONS =====\nfunction showBatchOperations() {\n  var html = createBatchOperationsHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(500)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Batch Operations');\n}\n\nfunction createBatchOperationsHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      .operation { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }\n      button { background: #7A1927; color: white; padding: 8px 16px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      button:hover { background: #8B1E2E; }\n      select, input { padding: 8px; margin: 5px; background: #2a2a2a; color: white; \n                      border: 1px solid #7A1927; border-radius: 4px; }\n      .result { margin-top: 20px; padding: 10px; background: #2a2a2a; border-radius: 4px; display: none; }\n    </style>\n    \n    <h2>🔧 Batch Operations</h2>\n    \n    <div class=\"operation\">\n      <h3>Mark Multiple as Watched/Read</h3>\n      <select id=\"batchType\">\n        <option value=\"Anime\">Anime</option>\n        <option value=\"Manhwa\">Manhwa</option>\n        <option value=\"Pornhwa\">Pornhwa</option>\n        <option value=\"Novels\">Novels</option>\n        <option value=\"Movies\">Movies</option>\n        <option value=\"TV Shows\">TV Shows</option>\n      </select>\n      <button onclick=\"markAllComplete()\">Mark All In Progress as Complete</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Bulk Genre Update</h3>\n      <input type=\"text\" id=\"genreSearch\" placeholder=\"Search title contains...\">\n      <input type=\"text\" id=\"newGenre\" placeholder=\"New genre\">\n      <button onclick=\"bulkGenreUpdate()\">Update Genres</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Clean Up</h3>\n      <button onclick=\"removeDuplicates()\">Remove Duplicates</button>\n      <button onclick=\"cleanEmptyRows()\">Clean Empty Rows</button>\n      <button onclick=\"standardizeProgress()\">Fix Progress Format</button>\n    </div>\n    \n    <div id=\"result\" class=\"result\"></div>\n    \n    <script>\n      function showResult(message) {\n        var result = document.getElementById('result');\n        result.style.display = 'block';\n        result.innerHTML = message;\n      }\n      \n      function markAllComplete() {\n        var type = document.getElementById('batchType').value;\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Marked ' + count + ' items as complete!');\n          })\n          .batchMarkComplete(type);\n      }\n      \n      function bulkGenreUpdate() {\n        var search = document.getElementById('genreSearch').value;\n        var genre = document.getElementById('newGenre').value;\n        if (!search || !genre) {\n          showResult('❌ Please fill both fields');\n          return;\n        }\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Updated genre for ' + count + ' items!');\n          })\n          .batchUpdateGenre(search, genre);\n      }\n      \n      function removeDuplicates() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Removed ' + count + ' duplicates!');\n          })\n          .removeDuplicateEntries();\n      }\n      \n      function cleanEmptyRows() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Cleaned ' + count + ' empty rows!');\n          })\n          .cleanupEmptyRows();\n      }\n      \n      function standardizeProgress() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Fixed progress format for ' + count + ' items!');\n          })\n          .standardizeProgressFormat();\n      }\n    </script>\n  `;\n}\n\nfunction batchMarkComplete(type) {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(type);\n  if (!sheet) return 0;\n  \n  var data = sheet.getDataRange().getValues();\n  var count = 0;\n  \n  var status = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][1] === 'In Progress') {\n      sheet.getRange(i + 1, 2).setValue(status);\n      count++;\n    }\n  }\n  \n  return count;\n}\n\nfunction batchUpdateGenre(searchTerm, newGenre) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var count = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var genreCol = (sheetName === 'Movies') ? 2 : \n                   (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0] && data[i][0].toLowerCase().includes(searchTerm.toLowerCase())) {\n        sheet.getRange(i + 1, genreCol + 1).setValue(newGenre);\n        count++;\n      }\n    }\n  });\n  \n  return count;\n}\n\nfunction removeDuplicateEntries() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var totalRemoved = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var seen = {};\n    var toDelete = [];\n    \n    for (var i = 1; i < data.length; i++) {\n      var title = data[i][0];\n      if (title) {\n        if (seen[title.toLowerCase()]) {\n          toDelete.push(i + 1);\n        } else {\n          seen[title.toLowerCase()] = true;\n        }\n      }\n    }\n    \n    // Delete rows in reverse order\n    for (var j = toDelete.length - 1; j >= 0; j--) {\n      sheet.deleteRow(toDelete[j]);\n      totalRemoved++;\n    }\n  });\n  \n  return totalRemoved;\n}\n\nfunction cleanupEmptyRows() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var totalCleaned = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var toDelete = [];\n    \n    for (var i = 1; i < data.length; i++) {\n      if (!data[i][0] || data[i][0].toString().trim() === '') {\n        toDelete.push(i + 1);\n      }\n    }\n    \n    // Delete rows in reverse order\n    for (var j = toDelete.length - 1; j >= 0; j--) {\n      sheet.deleteRow(toDelete[j]);\n      totalCleaned++;\n    }\n  });\n  \n  return totalCleaned;\n}\n\nfunction standardizeProgressFormat() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];\n  var totalFixed = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      var progress = data[i][2];\n      if (progress && typeof progress === 'number') {\n        var newProgress = '';\n        \n        if (sheetName === 'Anime' || sheetName === 'TV Shows') {\n          newProgress = 'S1E' + progress;\n        } else {\n          newProgress = 'Ch' + progress;\n        }\n        \n        sheet.getRange(i + 1, 3).setValue(newProgress);\n        totalFixed++;\n      }\n    }\n  });\n  \n  return totalFixed;\n}\n\n// ===== EXPORT/IMPORT =====\nfunction exportAllData() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows', 'Archive'];\n  var allData = {};\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (sheet) {\n      allData[sheetName] = sheet.getDataRange().getValues();\n    }\n  });\n  \n  var json = JSON.stringify(allData, null, 2);\n  var blob = Utilities.newBlob(json, 'application/json', \n    'MediaTracker_Export_' + new Date().toISOString().split('T')[0] + '.json');\n  \n  var file = DriveApp.createFile(blob);\n  \n  SpreadsheetApp.getUi().alert(\n    'Export Complete', \n    'File saved to Drive:\\n' + file.getUrl(), \n    SpreadsheetApp.getUi().ButtonSet.OK\n  );\n}\n\nfunction performBackup() {\n  try {\n    var url = exportAllData();\n    SpreadsheetApp.getUi().alert(\n      'Backup Created', \n      'Your backup has been saved to Google Drive. Check your Drive for the exported file.', \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  } catch (error) {\n    SpreadsheetApp.getUi().alert(\n      'Backup Failed', \n      'Error creating backup: ' + error.toString(), \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  }\n}\n\n// ===== SEARCH FUNCTIONALITY =====\nfunction showSearchDialog() {\n  var html = createSearchHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(500)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Search All Media');\n}\n\nfunction createSearchHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      input { width: 100%; padding: 10px; margin: 10px 0; background: #2a2a2a; \n              color: white; border: 1px solid #7A1927; border-radius: 4px; }\n      .result { background: #2a2a2a; padding: 10px; margin: 5px 0; \n                border-radius: 4px; cursor: pointer; border-left: 3px solid #7A1927; }\n      .result:hover { background: #3a3a3a; }\n      .result-title { font-weight: bold; color: #ff6b6b; }\n      .result-info { font-size: 12px; color: #ccc; margin-top: 5px; }\n      .no-results { text-align: center; color: #888; padding: 20px; }\n    </style>\n    \n    <h2>🔍 Search All Media</h2>\n    <input type=\"text\" id=\"searchQuery\" placeholder=\"Search titles...\" onkeyup=\"search()\" autofocus>\n    <div id=\"results\"></div>\n    \n    <script>\n      function search() {\n        var query = document.getElementById('searchQuery').value;\n        if (query.length < 2) {\n          document.getElementById('results').innerHTML = '';\n          return;\n        }\n        \n        google.script.run\n          .withSuccessHandler(function(results) {\n            var html = '';\n            if (results.length === 0) {\n              html = '<div class=\"no-results\">No results found for \"' + query + '\"</div>';\n            } else {\n              results.forEach(function(item) {\n                html += '<div class=\"result\">';\n                html += '<div class=\"result-title\">' + item.title + '</div>';\n                html += '<div class=\"result-info\">';\n                html += item.type + ' • ' + item.status;\n                if (item.progress) html += ' • ' + item.progress;\n                if (item.genre) html += ' • ' + item.genre;\n                html += '</div>';\n                html += '</div>';\n              });\n            }\n            document.getElementById('results').innerHTML = html;\n          })\n          .searchAllMedia(query);\n      }\n    </script>\n  `;\n}\n\nfunction searchAllMedia(query) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var results = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      var title = data[i][0];\n      if (title && title.toLowerCase().includes(query.toLowerCase())) {\n        var genreCol = (sheetName === 'Movies') ? 2 : \n                       (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n        \n        results.push({\n          title: title,\n          type: sheetName,\n          status: data[i][1] || '',\n          progress: data[i][2] || '',\n          genre: data[i][genreCol] || ''\n        });\n      }\n    }\n  });\n  \n  return results.slice(0, 20); // Limit to 20 results\n}\n\n// ===== PLACEHOLDER FUNCTIONS (for menu completeness) =====\nfunction showProgressCharts() {\n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px; text-align: center;\">';\n  html += '<h2>📈 Progress Charts</h2>';\n  html += '<p>This feature is coming soon!</p>';\n  html += '<p>Will include visual charts of your progress over time.</p>';\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html).setWidth(400).setHeight(300);\n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Progress Charts');\n}\n\nfunction showWatchCalendar() {\n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px; text-align: center;\">';\n  html += '<h2>📅 Watch Calendar</h2>';\n  html += '<p>This feature is coming soon!</p>';\n  html += '<p>Will show your watching schedule and release dates.</p>';\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html).setWidth(400).setHeight(300);\n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Watch Calendar');\n}\n\nfunction showTimeTracker() {\n  var timeData = getEstimatedTimeData();\n  \n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px;\">';\n  html += '<h2>⏰ Time Tracking</h2>';\n  \n  Object.keys(timeData).forEach(function(type) {\n    if (timeData[type].total > 0) {\n      var hours = Math.floor(timeData[type].total / 60);\n      var minutes = timeData[type].total % 60;\n      \n      html += '<div style=\"background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px;\">';\n      html += '<h3>' + type + '</h3>';\n      html += '<div>Estimated Total Time: ' + hours + 'h ' + minutes + 'm</div>';\n      html += '<div>Completed Items: ' + timeData[type].count + '</div>';\n      if (timeData[type].count > 0) {\n        html += '<div>Average: ' + Math.round(timeData[type].total / timeData[type].count) + ' minutes per item</div>';\n      }\n      html += '</div>';\n    }\n  });\n  \n  html += '<div style=\"margin-top: 20px; font-size: 12px; color: #888;\">';\n  html += '<p>* Time estimates based on typical durations:</p>';\n  html += '<p>Anime: 24min/episode • Movies: 120min • TV Shows: 45min/episode • Manhwa: 3min/chapter</p>';\n  html += '</div>';\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(450)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Time Tracker');\n}\n\nfunction getEstimatedTimeData() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Movies', 'TV Shows'];\n  var timeData = {};\n  \n  sheets.forEach(function(sheetName) {\n    timeData[sheetName] = {\n      total: 0,\n      count: 0\n    };\n    \n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][1] === 'Watched' || data[i][1] === 'Read') {\n        timeData[sheetName].count++;\n        \n        // Estimate time based on type and progress\n        if (sheetName === 'Anime') {\n          var episodes = data[i][4] || 12; // Default 12 episodes\n          timeData[sheetName].total += 24 * episodes; // 24 min per episode\n        } else if (s\n  ","size_bytes":51651},"attached_assets/media_tracker_fixed_1754138159678.js":{"content":"// ===== COMPLETE MEDIA TRACKER - FIXED & ENHANCED =====\n// Make sure to SAVE and REFRESH your spreadsheet after adding this\n\n// ===== MENU SETUP =====\nfunction onOpen() {\n  SpreadsheetApp.getUi()\n    .createMenu('📺 Media Tracker')\n    .addItem('➕ Add New Media', 'showAddMediaDialog')\n    .addItem('⚡ Quick Update', 'showQuickUpdateSidebar')\n    .addItem('📊 Dashboard', 'createDashboard')\n    .addItem('🔍 Search All Media', 'showSearchDialog')\n    .addItem('📈 Progress Charts', 'showProgressCharts')\n    .addItem('🎲 Random Picker', 'showRandomPicker')\n    .addItem('📅 Watch Calendar', 'showWatchCalendar')\n    .addItem('⏰ Time Tracker', 'showTimeTracker')\n    .addSeparator()\n    .addItem('💡 Get Recommendations', 'showRecommendations')\n    .addItem('🏆 Achievements', 'showAchievements')\n    .addItem('📋 Watchlist Planner', 'showWatchlistPlanner')\n    .addItem('🔄 Sync Status', 'showSyncStatus')\n    .addSeparator()\n    .addItem('📥 Import from CSV', 'importFromCSV')\n    .addItem('📤 Export All Data', 'exportAllData')\n    .addItem('💾 Backup to Drive', 'performBackup')\n    .addItem('🔧 Batch Operations', 'showBatchOperations')\n    .addSeparator()\n    .addItem('⚙️ Settings', 'showSettings')\n    .addItem('🎨 Themes', 'showThemes')\n    .addItem('⌨️ Keyboard Shortcuts', 'showShortcuts')\n    .addItem('🛠️ Setup Sheets', 'setupMediaTracker')\n    .addToUi();\n}\n\n// ===== SHEET SETUP FUNCTION =====\nfunction setupMediaTracker() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  \n  // Define sheet configurations\n  var sheetConfigs = {\n    'Anime': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped']\n    },\n    'Manhwa': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Pornhwa': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Novels': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Chapters', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Read', 'In Progress', 'Read', 'Dropped']\n    },\n    'Movies': {\n      headers: ['Name/Title', 'Status', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'Watched', 'Dropped']\n    },\n    'TV Shows': {\n      headers: ['Name/Title', 'Status', 'Progress', 'Season', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['To Watch', 'In Progress', 'Watched', 'Dropped']\n    },\n    'Archive': {\n      headers: ['Media Type', 'Name/Title', 'Status', 'Progress', 'Season/Chapters', 'Episode', 'Genre', 'Date Added', 'Notes'],\n      statusOptions: ['Dropped']\n    }\n  };\n  \n  var genreOptions = ['Fantasy', 'Sci-Fi', 'Romance', 'Slice of Life', 'Action', 'Adventure', 'Comedy', 'Drama', 'Horror', 'Mystery', 'Thriller'];\n  \n  // Create and setup each sheet\n  Object.keys(sheetConfigs).forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) {\n      sheet = ss.insertSheet(sheetName);\n    }\n    \n    var config = sheetConfigs[sheetName];\n    \n    // Set headers\n    var headerRange = sheet.getRange(1, 1, 1, config.headers.length);\n    headerRange.setValues([config.headers]);\n    headerRange.setBackground('#7A1927');\n    headerRange.setFontColor('white');\n    headerRange.setFontWeight('bold');\n    \n    // Set up data validation\n    if (sheetName !== 'Archive') {\n      // Status dropdown\n      var statusCol = config.headers.indexOf('Status') + 1;\n      if (statusCol > 0) {\n        var statusRange = sheet.getRange(2, statusCol, 999, 1);\n        var statusRule = SpreadsheetApp.newDataValidation()\n          .requireValueInList(config.statusOptions)\n          .build();\n        statusRange.setDataValidation(statusRule);\n      }\n      \n      // Genre dropdown\n      var genreCol = config.headers.indexOf('Genre') + 1;\n      if (genreCol > 0) {\n        var genreRange = sheet.getRange(2, genreCol, 999, 1);\n        var genreRule = SpreadsheetApp.newDataValidation()\n          .requireValueInList(genreOptions)\n          .build();\n        genreRange.setDataValidation(genreRule);\n      }\n    }\n    \n    // Format the sheet\n    sheet.setFrozenRows(1);\n    sheet.autoResizeColumns(1, config.headers.length);\n  });\n  \n  SpreadsheetApp.getUi().alert('✅ Media Tracker setup complete! All sheets, formatting, and dropdowns have been created.');\n}\n\n// ===== ADD MEDIA FUNCTION =====\nfunction showAddMediaDialog() {\n  var html = createAddMediaForm();\n  var htmlOutput = HtmlService.createHtmlOutput(html)\n      .setWidth(400)\n      .setHeight(600);\n  SpreadsheetApp.getUi()\n      .showModalDialog(htmlOutput, 'Add New Media');\n}\n\nfunction createAddMediaForm() {\n  return `\n    <style>\n      body { \n        font-family: Arial, sans-serif; \n        padding: 20px; \n        background: #1a1a1a; \n        color: white; \n        margin: 0;\n      }\n      .form-group {\n        margin-bottom: 15px;\n      }\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n        color: #fff;\n      }\n      input, select, textarea {\n        width: 100%;\n        padding: 10px;\n        background: #2a2a2a;\n        border: 1px solid #7A1927;\n        border-radius: 4px;\n        color: white;\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      input:focus, select:focus, textarea:focus {\n        outline: none;\n        border-color: #ff6b6b;\n        box-shadow: 0 0 5px rgba(255, 107, 107, 0.3);\n      }\n      button {\n        background: #7A1927;\n        color: white;\n        padding: 12px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 100%;\n        margin-top: 10px;\n      }\n      button:hover {\n        background: #8B1E2E;\n      }\n      .quick-buttons {\n        display: flex;\n        gap: 5px;\n        margin-top: 5px;\n      }\n      .quick-btn {\n        flex: 1;\n        padding: 5px;\n        font-size: 12px;\n        background: #3a3a3a;\n        border: 1px solid #7A1927;\n      }\n      .quick-btn:hover {\n        background: #7A1927;\n      }\n      .success {\n        background: #2a4a2a;\n        border: 1px solid #4a8a4a;\n        padding: 10px;\n        border-radius: 4px;\n        margin-bottom: 15px;\n        display: none;\n      }\n    </style>\n    \n    <div id=\"success\" class=\"success\">\n      <strong>✅ Media added successfully!</strong>\n    </div>\n    \n    <form id=\"mediaForm\">\n      <div class=\"form-group\">\n        <label for=\"type\">Media Type:</label>\n        <select id=\"type\" name=\"type\" onchange=\"updateFormFields()\" required>\n          <option value=\"\">Select Type</option>\n          <option value=\"Anime\">Anime</option>\n          <option value=\"Manhwa\">Manhwa</option>\n          <option value=\"Pornhwa\">Pornhwa</option>\n          <option value=\"Novels\">Novels</option>\n          <option value=\"Movies\">Movies</option>\n          <option value=\"TV Shows\">TV Shows</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\" required>\n          <option value=\"\">Select Status</option>\n        </select>\n        <div class=\"quick-buttons\">\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('planned')\">To Watch/Read</button>\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('progress')\">In Progress</button>\n          <button type=\"button\" class=\"quick-btn\" onclick=\"setStatus('completed')\">Completed</button>\n        </div>\n      </div>\n      \n      <div class=\"form-group\" id=\"progressGroup\" style=\"display: none;\">\n        <label for=\"progress\">Progress:</label>\n        <input type=\"text\" id=\"progress\" name=\"progress\" placeholder=\"e.g., Ch25 or S1E12\">\n      </div>\n      \n      <div class=\"form-group\" id=\"seasonGroup\" style=\"display: none;\">\n        <label for=\"season\">Season:</label>\n        <input type=\"number\" id=\"season\" name=\"season\" min=\"1\" value=\"1\">\n      </div>\n      \n      <div class=\"form-group\" id=\"episodeGroup\" style=\"display: none;\">\n        <label for=\"episode\">Episode/Chapter:</label>\n        <input type=\"number\" id=\"episode\" name=\"episode\" min=\"0\" value=\"0\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"genre\">Genre:</label>\n        <select id=\"genre\" name=\"genre\">\n          <option value=\"\">Select Genre</option>\n          <option value=\"Fantasy\">Fantasy</option>\n          <option value=\"Sci-Fi\">Sci-Fi</option>\n          <option value=\"Romance\">Romance</option>\n          <option value=\"Slice of Life\">Slice of Life</option>\n          <option value=\"Action\">Action</option>\n          <option value=\"Adventure\">Adventure</option>\n          <option value=\"Comedy\">Comedy</option>\n          <option value=\"Drama\">Drama</option>\n          <option value=\"Horror\">Horror</option>\n          <option value=\"Mystery\">Mystery</option>\n          <option value=\"Thriller\">Thriller</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"notes\">Notes (Optional):</label>\n        <textarea id=\"notes\" name=\"notes\" rows=\"3\"></textarea>\n      </div>\n      \n      <button type=\"button\" onclick=\"addMedia()\">Add Media</button>\n    </form>\n    \n    <script>\n      function updateFormFields() {\n        var type = document.getElementById('type').value;\n        var statusSelect = document.getElementById('status');\n        var progressGroup = document.getElementById('progressGroup');\n        var seasonGroup = document.getElementById('seasonGroup');\n        var episodeGroup = document.getElementById('episodeGroup');\n        \n        // Clear existing options\n        statusSelect.innerHTML = '<option value=\"\">Select Status</option>';\n        \n        // Hide all conditional fields\n        progressGroup.style.display = 'none';\n        seasonGroup.style.display = 'none';\n        episodeGroup.style.display = 'none';\n        \n        if (type === 'Movies') {\n          statusSelect.innerHTML += '<option value=\"To Watch\">To Watch</option>';\n          statusSelect.innerHTML += '<option value=\"Watched\">Watched</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n        } else if (type === 'Anime' || type === 'TV Shows') {\n          statusSelect.innerHTML += '<option value=\"To Watch\">To Watch</option>';\n          statusSelect.innerHTML += '<option value=\"In Progress\">In Progress</option>';\n          statusSelect.innerHTML += '<option value=\"Watched\">Watched</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n          progressGroup.style.display = 'block';\n          seasonGroup.style.display = 'block';\n          episodeGroup.style.display = 'block';\n        } else if (type === 'Manhwa' || type === 'Pornhwa' || type === 'Novels') {\n          statusSelect.innerHTML += '<option value=\"To Read\">To Read</option>';\n          statusSelect.innerHTML += '<option value=\"In Progress\">In Progress</option>';\n          statusSelect.innerHTML += '<option value=\"Read\">Read</option>';\n          statusSelect.innerHTML += '<option value=\"Dropped\">Dropped</option>';\n          progressGroup.style.display = 'block';\n          episodeGroup.style.display = 'block';\n          document.querySelector('label[for=\"episode\"]').textContent = 'Chapter:';\n        }\n      }\n      \n      function setStatus(type) {\n        var statusSelect = document.getElementById('status');\n        var mediaType = document.getElementById('type').value;\n        \n        if (type === 'planned') {\n          statusSelect.value = mediaType === 'Movies' ? 'To Watch' : \n                              (mediaType === 'Anime' || mediaType === 'TV Shows' ? 'To Watch' : 'To Read');\n        } else if (type === 'progress') {\n          statusSelect.value = 'In Progress';\n        } else if (type === 'completed') {\n          statusSelect.value = mediaType === 'Movies' ? 'Watched' : \n                              (mediaType === 'Anime' || mediaType === 'TV Shows' ? 'Watched' : 'Read');\n        }\n      }\n      \n      function addMedia() {\n        var form = document.getElementById('mediaForm');\n        var formData = new FormData(form);\n        \n        if (!formData.get('type') || !formData.get('title') || !formData.get('status')) {\n          alert('Please fill in all required fields');\n          return;\n        }\n        \n        var mediaData = {\n          type: formData.get('type'),\n          title: formData.get('title'),\n          status: formData.get('status'),\n          genre: formData.get('genre'),\n          notes: formData.get('notes')\n        };\n        \n        // Handle progress formatting\n        var season = formData.get('season');\n        var episode = formData.get('episode');\n        var progress = formData.get('progress');\n        \n        if (mediaData.type === 'Anime' || mediaData.type === 'TV Shows') {\n          if (season && episode) {\n            mediaData.progress = 'S' + season + 'E' + episode;\n            mediaData.season = season;\n            mediaData.episode = episode;\n          }\n        } else if (mediaData.type === 'Manhwa' || mediaData.type === 'Pornhwa' || mediaData.type === 'Novels') {\n          if (episode) {\n            mediaData.progress = 'Ch' + episode;\n            mediaData.chapter = episode;\n          }\n        }\n        \n        google.script.run\n          .withSuccessHandler(function(result) {\n            document.getElementById('success').style.display = 'block';\n            form.reset();\n            setTimeout(function() {\n              document.getElementById('success').style.display = 'none';\n            }, 3000);\n          })\n          .withFailureHandler(function(error) {\n            alert('Error adding media: ' + error.toString());\n          })\n          .addMedia(mediaData);\n      }\n    </script>\n  `;\n}\n\nfunction addMedia(mediaData) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(mediaData.type);\n  \n  if (!sheet) {\n    throw new Error('Sheet not found: ' + mediaData.type + '. Please run Setup Sheets first.');\n  }\n  \n  var row = [];\n  var dateAdded = new Date().toLocaleDateString();\n  \n  // Track time if starting\n  if (mediaData.status === 'In Progress') {\n    PropertiesService.getUserProperties().setProperty(\n      'startTime_' + mediaData.title, \n      new Date().getTime().toString()\n    );\n  }\n  \n  switch(mediaData.type) {\n    case 'Anime':\n    case 'TV Shows':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.progress || '',\n        mediaData.season || '',\n        mediaData.episode || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Manhwa':\n    case 'Pornhwa':\n    case 'Novels':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.progress || '',\n        mediaData.chapter || '',\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n      \n    case 'Movies':\n      row = [\n        mediaData.title,\n        mediaData.status,\n        mediaData.genre || '',\n        dateAdded,\n        mediaData.notes || ''\n      ];\n      break;\n  }\n  \n  sheet.appendRow(row);\n  \n  // Check for achievements\n  checkAchievements('add', mediaData);\n  \n  // Auto-archive if dropped\n  if (mediaData.status === 'Dropped') {\n    moveToArchive(sheet, sheet.getLastRow());\n  }\n  \n  return true;\n}\n\n// ===== QUICK UPDATE SIDEBAR =====\nfunction showQuickUpdateSidebar() {\n  var html = createQuickUpdateSidebar();\n  var htmlOutput = HtmlService.createHtmlOutput(html)\n      .setTitle('Quick Update')\n      .setWidth(300);\n  SpreadsheetApp.getUi().showSidebar(htmlOutput);\n}\n\nfunction createQuickUpdateSidebar() {\n  return `\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        padding: 15px;\n        background: #1a1a1a;\n        color: white;\n        margin: 0;\n      }\n      .item {\n        background: #2a2a2a;\n        border: 1px solid #7A1927;\n        border-radius: 8px;\n        padding: 12px;\n        margin-bottom: 10px;\n      }\n      .item-title {\n        font-weight: bold;\n        margin-bottom: 5px;\n        color: #ff6b6b;\n      }\n      .item-info {\n        font-size: 12px;\n        color: #ccc;\n        margin-bottom: 8px;\n      }\n      .buttons {\n        display: flex;\n        gap: 5px;\n      }\n      .btn {\n        flex: 1;\n        padding: 6px 8px;\n        background: #7A1927;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n      }\n      .btn:hover {\n        background: #8B1E2E;\n      }\n      .complete-btn {\n        background: #2a4a2a;\n      }\n      .complete-btn:hover {\n        background: #3a5a3a;\n      }\n      .refresh-btn {\n        width: 100%;\n        margin-bottom: 15px;\n        padding: 10px;\n        background: #3a3a3a;\n      }\n      .no-items {\n        text-align: center;\n        color: #888;\n        padding: 20px;\n      }\n    </style>\n    \n    <button class=\"btn refresh-btn\" onclick=\"loadItems()\">🔄 Refresh</button>\n    <div id=\"items\"></div>\n    \n    <script>\n      function loadItems() {\n        google.script.run\n          .withSuccessHandler(displayItems)\n          .getInProgressItems();\n      }\n      \n      function displayItems(items) {\n        var container = document.getElementById('items');\n        \n        if (items.length === 0) {\n          container.innerHTML = '<div class=\"no-items\">No items in progress</div>';\n          return;\n        }\n        \n        var html = '';\n        items.forEach(function(item) {\n          html += '<div class=\"item\">';\n          html += '<div class=\"item-title\">' + item.title + '</div>';\n          html += '<div class=\"item-info\">' + item.type + ' - ' + item.currentProgress + '</div>';\n          html += '<div class=\"buttons\">';\n          html += '<button class=\"btn\" onclick=\"increment(\\'' + item.type + '\\', \\'' + item.title + '\\')\">+1</button>';\n          html += '<button class=\"btn complete-btn\" onclick=\"markComplete(\\'' + item.type + '\\', \\'' + item.title + '\\')\">✓</button>';\n          html += '</div>';\n          html += '</div>';\n        });\n        \n        container.innerHTML = html;\n      }\n      \n      function increment(type, title) {\n        google.script.run\n          .withSuccessHandler(function(newProgress) {\n            if (newProgress) {\n              loadItems(); // Refresh the list\n            }\n          })\n          .incrementProgress(type, title);\n      }\n      \n      function markComplete(type, title) {\n        google.script.run\n          .withSuccessHandler(function() {\n            loadItems(); // Refresh the list\n          })\n          .markItemComplete(type, title);\n      }\n      \n      // Load items on page load\n      loadItems();\n    </script>\n  `;\n}\n\nfunction getInProgressItems() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];\n  var items = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][1] === 'In Progress' && data[i][0]) {\n        items.push({\n          type: sheetName,\n          title: data[i][0],\n          currentProgress: data[i][2] || 'No progress',\n          row: i + 1\n        });\n      }\n    }\n  });\n  \n  return items;\n}\n\nfunction incrementProgress(type, title) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(type);\n  if (!sheet) return null;\n  \n  var data = sheet.getDataRange().getValues();\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][0] === title) {\n      var currentProgress = data[i][2] || '';\n      var newProgress = '';\n      \n      if (type === 'Anime' || type === 'TV Shows') {\n        var match = currentProgress.match(/S(\\d+)E(\\d+)/);\n        if (match) {\n          var season = parseInt(match[1]);\n          var episode = parseInt(match[2]) + 1;\n          newProgress = 'S' + season + 'E' + episode;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 5).setValue(episode);\n        } else {\n          // Default to S1E1 if no progress set\n          newProgress = 'S1E1';\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(1);\n          sheet.getRange(i + 1, 5).setValue(1);\n        }\n      } else {\n        var match = currentProgress.match(/Ch(\\d+)/);\n        if (match) {\n          var chapter = parseInt(match[1]) + 1;\n          newProgress = 'Ch' + chapter;\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(chapter);\n        } else {\n          // Default to Ch1 if no progress set\n          newProgress = 'Ch1';\n          sheet.getRange(i + 1, 3).setValue(newProgress);\n          sheet.getRange(i + 1, 4).setValue(1);\n        }\n      }\n      \n      // Track progress for achievements\n      checkAchievements('progress', {type: type, title: title});\n      \n      return newProgress;\n    }\n  }\n  return null;\n}\n\nfunction markItemComplete(type, title) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getSheetByName(type);\n  if (!sheet) return false;\n  \n  var data = sheet.getDataRange().getValues();\n  var completedStatus = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][0] === title && data[i][1] === 'In Progress') {\n      sheet.getRange(i + 1, 2).setValue(completedStatus);\n      \n      // Track completion for achievements\n      checkAchievements('complete', {type: type, title: title});\n      \n      return true;\n    }\n  }\n  return false;\n}\n\n// ===== DASHBOARD & ANALYTICS =====\nfunction createDashboard() {\n  var stats = getDetailedStats();\n  var html = createDashboardHTML(stats);\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(600)\n    .setHeight(800);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Media Dashboard');\n}\n\nfunction createDashboardHTML(stats) {\n  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);\n  var completionRate = stats.total > 0 ? Math.round((totalCompleted / stats.total) * 100) : 0;\n  \n  return `\n    <style>\n      body { \n        font-family: Arial, sans-serif; \n        padding: 20px; \n        background: #1a1a1a; \n        color: white; \n        margin: 0;\n      }\n      .stat-card {\n        background: #2a2a2a;\n        padding: 15px;\n        margin: 10px 0;\n        border-radius: 8px;\n        border-left: 3px solid #7A1927;\n      }\n      .big-number {\n        font-size: 36px;\n        color: #ff6b6b;\n        font-weight: bold;\n      }\n      .progress-bar {\n        background: #3a3a3a;\n        height: 20px;\n        border-radius: 10px;\n        overflow: hidden;\n        margin: 10px 0;\n      }\n      .progress-fill {\n        background: #7A1927;\n        height: 100%;\n        transition: width 0.3s;\n      }\n      .genre-item {\n        display: flex;\n        justify-content: space-between;\n        padding: 5px 0;\n      }\n      .type-stats {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n      }\n      .mini-card {\n        background: #3a3a3a;\n        padding: 10px;\n        border-radius: 4px;\n        text-align: center;\n      }\n    </style>\n    \n    <h1>📊 Your Media Dashboard</h1>\n    \n    <div class=\"stat-card\">\n      <div class=\"big-number\">${stats.total}</div>\n      <div>Total Items Tracked</div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <div class=\"big-number\">${completionRate}%</div>\n      <div>Completion Rate</div>\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\" style=\"width: ${completionRate}%\"></div>\n      </div>\n      <div>Completed: ${totalCompleted} / ${stats.total}</div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Status Breakdown</h3>\n      ${Object.keys(stats.byStatus).map(status => \n        `<div class=\"genre-item\">\n          <span>${status}:</span>\n          <strong>${stats.byStatus[status]}</strong>\n        </div>`\n      ).join('')}\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>By Media Type</h3>\n      <div class=\"type-stats\">\n        ${Object.keys(stats.byType).map(type => \n          `<div class=\"mini-card\">\n            <div><strong>${type}</strong></div>\n            <div>${stats.byType[type].total} items</div>\n            <div style=\"font-size: 12px; color: #ccc;\">\n              ${stats.byType[type].completed} completed\n            </div>\n          </div>`\n        ).join('')}\n      </div>\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Top Genres</h3>\n      ${stats.topGenres.slice(0, 5).map(genre => \n        `<div class=\"genre-item\">\n          <span>${genre.name}:</span>\n          <strong>${genre.count} items</strong>\n        </div>`\n      ).join('')}\n    </div>\n    \n    <div class=\"stat-card\">\n      <h3>Currently In Progress</h3>\n      <div>${stats.inProgressCount} items currently being watched/read</div>\n    </div>\n  `;\n}\n\nfunction getDetailedStats() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var stats = {\n    total: 0,\n    byStatus: {},\n    byType: {},\n    byGenre: {},\n    topGenres: [],\n    inProgressCount: 0,\n    recentlyAdded: []\n  };\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    stats.byType[sheetName] = {\n      total: 0,\n      completed: 0,\n      inProgress: 0,\n      planned: 0,\n      dropped: 0\n    };\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) { // Has title\n        stats.total++;\n        stats.byType[sheetName].total++;\n        \n        // Status tracking\n        var status = data[i][1];\n        if (status) {\n          stats.byStatus[status] = (stats.byStatus[status] || 0) + 1;\n          \n          if (status === 'Watched' || status === 'Read') {\n            stats.byType[sheetName].completed++;\n          } else if (status === 'In Progress') {\n            stats.byType[sheetName].inProgress++;\n            stats.inProgressCount++;\n          } else if (status === 'To Watch' || status === 'To Read') {\n            stats.byType[sheetName].planned++;\n          } else if (status === 'Dropped') {\n            stats.byType[sheetName].dropped++;\n          }\n        }\n        \n        // Genre tracking\n        var genreCol = (sheetName === 'Movies') ? 2 : \n                       (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n        var genre = data[i][genreCol];\n        if (genre) {\n          stats.byGenre[genre] = (stats.byGenre[genre] || 0) + 1;\n        }\n        \n        // Recent items\n        var dateCol = (sheetName === 'Movies') ? 3 : \n                      (sheetName === 'Anime' || sheetName === 'TV Shows') ? 6 : 5;\n        var dateAdded = data[i][dateCol];\n        if (dateAdded) {\n          stats.recentlyAdded.push({\n            title: data[i][0],\n            type: sheetName,\n            date: dateAdded\n          });\n        }\n      }\n    }\n  });\n  \n  // Convert genres to sorted array\n  stats.topGenres = Object.keys(stats.byGenre)\n    .map(genre => ({name: genre, count: stats.byGenre[genre]}))\n    .sort((a, b) => b.count - a.count);\n  \n  // Sort recent items\n  stats.recentlyAdded.sort(function(a, b) {\n    return new Date(b.date) - new Date(a.date);\n  });\n  \n  return stats;\n}\n\n// ===== RANDOM PICKER =====\nfunction showRandomPicker() {\n  var html = createRandomPickerHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(450)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Random Picker');\n}\n\nfunction createRandomPickerHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      button { background: #7A1927; color: white; padding: 10px 20px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      button:hover { background: #8B1E2E; }\n      .result { background: #2a2a2a; padding: 20px; margin: 20px 0; border-radius: 8px; \n                text-align: center; font-size: 18px; min-height: 100px; \n                display: flex; flex-direction: column; justify-content: center; }\n      select { padding: 8px; margin: 10px; background: #2a2a2a; color: white; \n               border: 1px solid #7A1927; border-radius: 4px; }\n      .filters { margin-bottom: 20px; }\n      .big-button { font-size: 18px; padding: 15px 30px; }\n    </style>\n    \n    <h2>🎲 What Should I Watch/Read?</h2>\n    \n    <div class=\"filters\">\n      <div>\n        <label>Media Type:</label>\n        <select id=\"filterType\">\n          <option value=\"all\">All Types</option>\n          <option value=\"Anime\">Anime Only</option>\n          <option value=\"Manhwa\">Manhwa Only</option>\n          <option value=\"Pornhwa\">Pornhwa Only</option>\n          <option value=\"Novels\">Novels Only</option>\n          <option value=\"Movies\">Movies Only</option>\n          <option value=\"TV Shows\">TV Shows Only</option>\n        </select>\n      </div>\n      \n      <div>\n        <label>Status Filter:</label>\n        <select id=\"filterStatus\">\n          <option value=\"planned\">Not Started (To Watch/Read)</option>\n          <option value=\"inprogress\">In Progress</option>\n          <option value=\"all\">All Status</option>\n        </select>\n      </div>\n    </div>\n    \n    <button class=\"big-button\" onclick=\"pickRandom()\">🎲 Pick Random!</button>\n    \n    <div id=\"result\" class=\"result\">Click to get a suggestion!</div>\n    \n    <script>\n      function pickRandom() {\n        var type = document.getElementById('filterType').value;\n        var status = document.getElementById('filterStatus').value;\n        \n        document.getElementById('result').innerHTML = '🎲 Picking something for you...';\n        \n        google.script.run\n          .withSuccessHandler(function(item) {\n            if (item) {\n              document.getElementById('result').innerHTML = \n                '<div style=\"margin-bottom: 10px;\"><strong>' + item.type + '</strong></div>' +\n                '<h3 style=\"color: #ff6b6b; margin: 10px 0;\">' + item.title + '</h3>' +\n                '<div>Status: ' + item.status + '</div>' +\n                (item.progress ? '<div>Progress: ' + item.progress + '</div>' : '') +\n                (item.genre ? '<div>Genre: ' + item.genre + '</div>' : '');\n            } else {\n              document.getElementById('result').innerHTML = \n                '<div style=\"color: #888;\">No items found with those filters!</div>' +\n                '<div style=\"font-size: 14px; margin-top: 10px;\">Try changing your filters or add more media.</div>';\n            }\n          })\n          .withFailureHandler(function(error) {\n            document.getElementById('result').innerHTML = \n              '<div style=\"color: #ff6b6b;\">Error: ' + error.toString() + '</div>';\n          })\n          .getRandomItem(type, status);\n      }\n    </script>\n  `;\n}\n\nfunction getRandomItem(filterType, filterStatus) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = filterType === 'all' ? \n    ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'] : \n    [filterType];\n  \n  var candidates = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0]) { // Has title\n        var status = data[i][1];\n        var include = false;\n        \n        if (filterStatus === 'all') {\n          include = true;\n        } else if (filterStatus === 'planned') {\n          include = (status === 'To Watch' || status === 'To Read');\n        } else if (filterStatus === 'inprogress') {\n          include = (status === 'In Progress');\n        }\n        \n        if (include) {\n          var genreCol = (sheetName === 'Movies') ? 2 : \n                         (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n          \n          candidates.push({\n            type: sheetName,\n            title: data[i][0],\n            status: status,\n            progress: data[i][2] || '',\n            genre: data[i][genreCol] || ''\n          });\n        }\n      }\n    }\n  });\n  \n  if (candidates.length === 0) return null;\n  \n  return candidates[Math.floor(Math.random() * candidates.length)];\n}\n\n// ===== ACHIEVEMENTS SYSTEM =====\nfunction checkAchievements(action, data) {\n  var achievements = PropertiesService.getUserProperties();\n  var stats = getDetailedStats();\n  \n  var newAchievements = [];\n  \n  // Check various achievements\n  if (stats.total >= 100 && !achievements.getProperty('ach_collector')) {\n    achievements.setProperty('ach_collector', 'true');\n    newAchievements.push('📚 Collector - Added 100 items!');\n  }\n  \n  var totalCompleted = (stats.byStatus['Watched'] || 0) + (stats.byStatus['Read'] || 0);\n  if (totalCompleted >= 50 && !achievements.getProperty('ach_dedicated')) {\n    achievements.setProperty('ach_dedicated', 'true');\n    newAchievements.push('🏆 Dedicated - Completed 50 items!');\n  }\n  \n  if (stats.inProgressCount >= 20 && !achievements.getProperty('ach_juggler')) {\n    achievements.setProperty('ach_juggler', 'true');\n    newAchievements.push('🤹 Juggler - 20 items in progress at once!');\n  }\n  \n  // First item achievement\n  if (stats.total === 1 && !achievements.getProperty('ach_first')) {\n    achievements.setProperty('ach_first', 'true');\n    newAchievements.push('🌟 First Steps - Added your first item!');\n  }\n  \n  // Show new achievements\n  if (newAchievements.length > 0) {\n    SpreadsheetApp.getUi().alert(\n      '🎉 New Achievement!', \n      newAchievements.join('\\n'), \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  }\n}\n\nfunction showAchievements() {\n  var achievements = PropertiesService.getUserProperties();\n  var allAchievements = [\n    {id: 'ach_first', name: '🌟 First Steps', desc: 'Add your first item'},\n    {id: 'ach_collector', name: '📚 Collector', desc: 'Add 100 items'},\n    {id: 'ach_dedicated', name: '🏆 Dedicated', desc: 'Complete 50 items'},\n    {id: 'ach_juggler', name: '🤹 Juggler', desc: '20 items in progress'},\n    {id: 'ach_binger', name: '📺 Binger', desc: 'Update 10 items in one day'},\n    {id: 'ach_explorer', name: '🗺️ Explorer', desc: 'Try all media types'},\n    {id: 'ach_completionist', name: '✅ Completionist', desc: '90% completion rate'},\n    {id: 'ach_speed_reader', name: '⚡ Speed Reader', desc: 'Read 100 chapters in a week'},\n    {id: 'ach_loyal', name: '💗 Loyal', desc: 'Use tracker for 30 days'},\n    {id: 'ach_organized', name: '📋 Organized', desc: 'Use all features'}\n  ];\n  \n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px;\">';\n  html += '<h2>🏆 Your Achievements</h2>';\n  var earned = 0;\n  \n  allAchievements.forEach(function(ach) {\n    var hasAch = achievements.getProperty(ach.id) === 'true';\n    if (hasAch) earned++;\n    \n    html += '<div style=\"padding: 10px; background: ' + (hasAch ? '#2a2a2a' : '#1a1a1a') + \n            '; margin: 5px 0; border-radius: 4px; opacity: ' + (hasAch ? '1' : '0.5') + \n            '; border: 1px solid ' + (hasAch ? '#7A1927' : '#333') + ';\">';\n    html += '<strong>' + ach.name + '</strong> - ' + ach.desc;\n    html += hasAch ? ' ✅' : ' 🔒';\n    html += '</div>';\n  });\n  \n  html = '<div style=\"text-align: center; margin-bottom: 20px; font-size: 18px;\">Progress: ' + earned + '/' + \n         allAchievements.length + '</div>' + html;\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(400)\n    .setHeight(500);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Achievements');\n}\n\n// ===== BATCH OPERATIONS =====\nfunction showBatchOperations() {\n  var html = createBatchOperationsHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(500)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Batch Operations');\n}\n\nfunction createBatchOperationsHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      .operation { background: #2a2a2a; padding: 15px; margin: 10px 0; border-radius: 8px; }\n      button { background: #7A1927; color: white; padding: 8px 16px; border: none; \n               border-radius: 4px; cursor: pointer; margin: 5px; }\n      button:hover { background: #8B1E2E; }\n      select, input { padding: 8px; margin: 5px; background: #2a2a2a; color: white; \n                      border: 1px solid #7A1927; border-radius: 4px; }\n      .result { margin-top: 20px; padding: 10px; background: #2a2a2a; border-radius: 4px; display: none; }\n    </style>\n    \n    <h2>🔧 Batch Operations</h2>\n    \n    <div class=\"operation\">\n      <h3>Mark Multiple as Watched/Read</h3>\n      <select id=\"batchType\">\n        <option value=\"Anime\">Anime</option>\n        <option value=\"Manhwa\">Manhwa</option>\n        <option value=\"Pornhwa\">Pornhwa</option>\n        <option value=\"Novels\">Novels</option>\n        <option value=\"Movies\">Movies</option>\n        <option value=\"TV Shows\">TV Shows</option>\n      </select>\n      <button onclick=\"markAllComplete()\">Mark All In Progress as Complete</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Bulk Genre Update</h3>\n      <input type=\"text\" id=\"genreSearch\" placeholder=\"Search title contains...\">\n      <input type=\"text\" id=\"newGenre\" placeholder=\"New genre\">\n      <button onclick=\"bulkGenreUpdate()\">Update Genres</button>\n    </div>\n    \n    <div class=\"operation\">\n      <h3>Clean Up</h3>\n      <button onclick=\"removeDuplicates()\">Remove Duplicates</button>\n      <button onclick=\"cleanEmptyRows()\">Clean Empty Rows</button>\n      <button onclick=\"standardizeProgress()\">Fix Progress Format</button>\n    </div>\n    \n    <div id=\"result\" class=\"result\"></div>\n    \n    <script>\n      function showResult(message) {\n        var result = document.getElementById('result');\n        result.style.display = 'block';\n        result.innerHTML = message;\n      }\n      \n      function markAllComplete() {\n        var type = document.getElementById('batchType').value;\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Marked ' + count + ' items as complete!');\n          })\n          .batchMarkComplete(type);\n      }\n      \n      function bulkGenreUpdate() {\n        var search = document.getElementById('genreSearch').value;\n        var genre = document.getElementById('newGenre').value;\n        if (!search || !genre) {\n          showResult('❌ Please fill both fields');\n          return;\n        }\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Updated genre for ' + count + ' items!');\n          })\n          .batchUpdateGenre(search, genre);\n      }\n      \n      function removeDuplicates() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Removed ' + count + ' duplicates!');\n          })\n          .removeDuplicateEntries();\n      }\n      \n      function cleanEmptyRows() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Cleaned ' + count + ' empty rows!');\n          })\n          .cleanupEmptyRows();\n      }\n      \n      function standardizeProgress() {\n        google.script.run\n          .withSuccessHandler(function(count) {\n            showResult('✅ Fixed progress format for ' + count + ' items!');\n          })\n          .standardizeProgressFormat();\n      }\n    </script>\n  `;\n}\n\nfunction batchMarkComplete(type) {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(type);\n  if (!sheet) return 0;\n  \n  var data = sheet.getDataRange().getValues();\n  var count = 0;\n  \n  var status = (type === 'Anime' || type === 'Movies' || type === 'TV Shows') ? 'Watched' : 'Read';\n  \n  for (var i = 1; i < data.length; i++) {\n    if (data[i][1] === 'In Progress') {\n      sheet.getRange(i + 1, 2).setValue(status);\n      count++;\n    }\n  }\n  \n  return count;\n}\n\nfunction batchUpdateGenre(searchTerm, newGenre) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var count = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var genreCol = (sheetName === 'Movies') ? 2 : \n                   (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n    \n    for (var i = 1; i < data.length; i++) {\n      if (data[i][0] && data[i][0].toLowerCase().includes(searchTerm.toLowerCase())) {\n        sheet.getRange(i + 1, genreCol + 1).setValue(newGenre);\n        count++;\n      }\n    }\n  });\n  \n  return count;\n}\n\nfunction removeDuplicateEntries() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var totalRemoved = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var seen = {};\n    var toDelete = [];\n    \n    for (var i = 1; i < data.length; i++) {\n      var title = data[i][0];\n      if (title) {\n        if (seen[title.toLowerCase()]) {\n          toDelete.push(i + 1);\n        } else {\n          seen[title.toLowerCase()] = true;\n        }\n      }\n    }\n    \n    // Delete rows in reverse order\n    for (var j = toDelete.length - 1; j >= 0; j--) {\n      sheet.deleteRow(toDelete[j]);\n      totalRemoved++;\n    }\n  });\n  \n  return totalRemoved;\n}\n\nfunction cleanupEmptyRows() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var totalCleaned = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    var toDelete = [];\n    \n    for (var i = 1; i < data.length; i++) {\n      if (!data[i][0] || data[i][0].toString().trim() === '') {\n        toDelete.push(i + 1);\n      }\n    }\n    \n    // Delete rows in reverse order\n    for (var j = toDelete.length - 1; j >= 0; j--) {\n      sheet.deleteRow(toDelete[j]);\n      totalCleaned++;\n    }\n  });\n  \n  return totalCleaned;\n}\n\nfunction standardizeProgressFormat() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'TV Shows'];\n  var totalFixed = 0;\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      var progress = data[i][2];\n      if (progress && typeof progress === 'number') {\n        var newProgress = '';\n        \n        if (sheetName === 'Anime' || sheetName === 'TV Shows') {\n          newProgress = 'S1E' + progress;\n        } else {\n          newProgress = 'Ch' + progress;\n        }\n        \n        sheet.getRange(i + 1, 3).setValue(newProgress);\n        totalFixed++;\n      }\n    }\n  });\n  \n  return totalFixed;\n}\n\n// ===== EXPORT/IMPORT =====\nfunction exportAllData() {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows', 'Archive'];\n  var allData = {};\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (sheet) {\n      allData[sheetName] = sheet.getDataRange().getValues();\n    }\n  });\n  \n  var json = JSON.stringify(allData, null, 2);\n  var blob = Utilities.newBlob(json, 'application/json', \n    'MediaTracker_Export_' + new Date().toISOString().split('T')[0] + '.json');\n  \n  var file = DriveApp.createFile(blob);\n  \n  SpreadsheetApp.getUi().alert(\n    'Export Complete', \n    'File saved to Drive:\\n' + file.getUrl(), \n    SpreadsheetApp.getUi().ButtonSet.OK\n  );\n}\n\nfunction performBackup() {\n  try {\n    var url = exportAllData();\n    SpreadsheetApp.getUi().alert(\n      'Backup Created', \n      'Your backup has been saved to Google Drive. Check your Drive for the exported file.', \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  } catch (error) {\n    SpreadsheetApp.getUi().alert(\n      'Backup Failed', \n      'Error creating backup: ' + error.toString(), \n      SpreadsheetApp.getUi().ButtonSet.OK\n    );\n  }\n}\n\n// ===== SEARCH FUNCTIONALITY =====\nfunction showSearchDialog() {\n  var html = createSearchHTML();\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html)\n    .setWidth(500)\n    .setHeight(600);\n    \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Search All Media');\n}\n\nfunction createSearchHTML() {\n  return `\n    <style>\n      body { font-family: Arial; padding: 20px; background: #1a1a1a; color: white; }\n      input { width: 100%; padding: 10px; margin: 10px 0; background: #2a2a2a; \n              color: white; border: 1px solid #7A1927; border-radius: 4px; }\n      .result { background: #2a2a2a; padding: 10px; margin: 5px 0; \n                border-radius: 4px; cursor: pointer; border-left: 3px solid #7A1927; }\n      .result:hover { background: #3a3a3a; }\n      .result-title { font-weight: bold; color: #ff6b6b; }\n      .result-info { font-size: 12px; color: #ccc; margin-top: 5px; }\n      .no-results { text-align: center; color: #888; padding: 20px; }\n    </style>\n    \n    <h2>🔍 Search All Media</h2>\n    <input type=\"text\" id=\"searchQuery\" placeholder=\"Search titles...\" onkeyup=\"search()\" autofocus>\n    <div id=\"results\"></div>\n    \n    <script>\n      function search() {\n        var query = document.getElementById('searchQuery').value;\n        if (query.length < 2) {\n          document.getElementById('results').innerHTML = '';\n          return;\n        }\n        \n        google.script.run\n          .withSuccessHandler(function(results) {\n            var html = '';\n            if (results.length === 0) {\n              html = '<div class=\"no-results\">No results found for \"' + query + '\"</div>';\n            } else {\n              results.forEach(function(item) {\n                html += '<div class=\"result\">';\n                html += '<div class=\"result-title\">' + item.title + '</div>';\n                html += '<div class=\"result-info\">';\n                html += item.type + ' • ' + item.status;\n                if (item.progress) html += ' • ' + item.progress;\n                if (item.genre) html += ' • ' + item.genre;\n                html += '</div>';\n                html += '</div>';\n              });\n            }\n            document.getElementById('results').innerHTML = html;\n          })\n          .searchAllMedia(query);\n      }\n    </script>\n  `;\n}\n\nfunction searchAllMedia(query) {\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheets = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\n  var results = [];\n  \n  sheets.forEach(function(sheetName) {\n    var sheet = ss.getSheetByName(sheetName);\n    if (!sheet) return;\n    \n    var data = sheet.getDataRange().getValues();\n    \n    for (var i = 1; i < data.length; i++) {\n      var title = data[i][0];\n      if (title && title.toLowerCase().includes(query.toLowerCase())) {\n        var genreCol = (sheetName === 'Movies') ? 2 : \n                       (sheetName === 'Anime' || sheetName === 'TV Shows') ? 5 : 4;\n        \n        results.push({\n          title: title,\n          type: sheetName,\n          status: data[i][1] || '',\n          progress: data[i][2] || '',\n          genre: data[i][genreCol] || ''\n        });\n      }\n    }\n  });\n  \n  return results.slice(0, 20); // Limit to 20 results\n}\n\n// ===== PLACEHOLDER FUNCTIONS (for menu completeness) =====\nfunction showProgressCharts() {\n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px; text-align: center;\">';\n  html += '<h2>📈 Progress Charts</h2>';\n  html += '<p>This feature is coming soon!</p>';\n  html += '<p>Will include visual charts of your progress over time.</p>';\n  html += '</div>';\n  \n  var htmlOutput = HtmlService.createHtmlOutput(html).setWidth(400).setHeight(300);\n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Progress Charts');\n}\n\nfunction showWatchCalendar() {\n  var html = '<div style=\"font-family: Arial; background: #1a1a1a; color: white; padding: 20px; text-align: center;\">';\n  ","size_bytes":49113},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertMediaItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Use a default user ID since we removed authentication\n  const DEFAULT_USER_ID = \"default-user\";\n\n  // Auth routes (simplified without authentication)\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      const user = await storage.getUser(DEFAULT_USER_ID);\n      res.json(user || { id: DEFAULT_USER_ID, email: \"user@example.com\" });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Media routes\n  app.get(\"/api/media\", async (req: any, res) => {\n    try {\n      const { type, status } = req.query;\n      const filters = {\n        type: typeof type === 'string' ? type : undefined,\n        status: typeof status === 'string' ? status : undefined\n      };\n      \n      const mediaItems = await storage.getMediaItems(DEFAULT_USER_ID, filters);\n      res.json(mediaItems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch media items\" });\n    }\n  });\n\n  app.get(\"/api/media/:id\", async (req: any, res) => {\n    try {\n      const mediaItem = await storage.getMediaItem(req.params.id, DEFAULT_USER_ID);\n      if (!mediaItem) {\n        return res.status(404).json({ error: \"Media item not found\" });\n      }\n      res.json(mediaItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch media item\" });\n    }\n  });\n\n  app.post(\"/api/media\", async (req: any, res) => {\n    try {\n      const validatedData = insertMediaItemSchema.parse(req.body);\n      const mediaItem = await storage.createMediaItem({\n        ...validatedData,\n        userId: DEFAULT_USER_ID\n      });\n      res.status(201).json(mediaItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create media item\" });\n    }\n  });\n\n  app.patch(\"/api/media/:id\", async (req: any, res) => {\n    try {\n      const updates = insertMediaItemSchema.partial().parse(req.body);\n      const mediaItem = await storage.updateMediaItem(req.params.id, DEFAULT_USER_ID, updates);\n      if (!mediaItem) {\n        return res.status(404).json({ error: \"Media item not found\" });\n      }\n      res.json(mediaItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update media item\" });\n    }\n  });\n\n  app.delete(\"/api/media/:id\", async (req: any, res) => {\n    try {\n      const success = await storage.deleteMediaItem(req.params.id, DEFAULT_USER_ID);\n      if (!success) {\n        return res.status(404).json({ error: \"Media item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete media item\" });\n    }\n  });\n\n  // Progress routes\n  app.get(\"/api/media/in-progress\", async (req: any, res) => {\n    try {\n      const items = await storage.getInProgressItems(DEFAULT_USER_ID);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch in-progress items\" });\n    }\n  });\n\n  app.post(\"/api/media/:id/increment\", async (req: any, res) => {\n    try {\n      const mediaItem = await storage.getMediaItem(req.params.id, DEFAULT_USER_ID);\n      if (!mediaItem) {\n        return res.status(404).json({ error: \"Media item not found\" });\n      }\n\n      let updates: any = {};\n      \n      if (mediaItem.type === 'Anime' || mediaItem.type === 'TV Shows') {\n        const currentEpisode = mediaItem.episode || 0;\n        const currentSeason = mediaItem.season || 1;\n        const newEpisode = currentEpisode + 1;\n        \n        updates = {\n          episode: newEpisode,\n          season: currentSeason,\n          progress: `S${currentSeason}E${newEpisode}`\n        };\n      } else {\n        const currentChapter = mediaItem.chapter || 0;\n        const newChapter = currentChapter + 1;\n        \n        updates = {\n          chapter: newChapter,\n          progress: `Ch${newChapter}`\n        };\n      }\n\n      const updatedItem = await storage.updateMediaItem(req.params.id, DEFAULT_USER_ID, updates);\n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to increment progress\" });\n    }\n  });\n\n  app.post(\"/api/media/:id/complete\", async (req: any, res) => {\n    try {\n      const mediaItem = await storage.getMediaItem(req.params.id, DEFAULT_USER_ID);\n      if (!mediaItem) {\n        return res.status(404).json({ error: \"Media item not found\" });\n      }\n\n      const completedStatus = (mediaItem.type === 'Anime' || mediaItem.type === 'Movies' || mediaItem.type === 'TV Shows') \n        ? 'Watched' \n        : 'Read';\n\n      const updatedItem = await storage.updateMediaItem(req.params.id, DEFAULT_USER_ID, {\n        status: completedStatus,\n        dateCompleted: new Date()\n      });\n      \n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark item as complete\" });\n    }\n  });\n\n  // Stats routes\n  app.get(\"/api/stats\", async (req: any, res) => {\n    try {\n      const stats = await storage.getDetailedStats(DEFAULT_USER_ID);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/stats/user\", async (req: any, res) => {\n    try {\n      const userStats = await storage.getUserStats(DEFAULT_USER_ID);\n      res.json(userStats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Search and random routes\n  app.get(\"/api/search\", async (req: any, res) => {\n    try {\n      const { q } = req.query;\n      if (typeof q !== 'string' || q.trim().length === 0) {\n        return res.status(400).json({ error: \"Query parameter is required\" });\n      }\n      \n      const results = await storage.searchMediaItems(DEFAULT_USER_ID, q.trim());\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to search media items\" });\n    }\n  });\n\n  app.get(\"/api/random\", async (req: any, res) => {\n    try {\n      const { type, status } = req.query;\n      const filters = {\n        type: typeof type === 'string' ? type : undefined,\n        status: typeof status === 'string' ? status : undefined\n      };\n      \n      const randomItem = await storage.getRandomItem(DEFAULT_USER_ID, filters);\n      if (!randomItem) {\n        return res.status(404).json({ error: \"No items found with the specified filters\" });\n      }\n      \n      res.json(randomItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get random item\" });\n    }\n  });\n\n  // Achievement routes\n  app.get(\"/api/achievements\", async (req: any, res) => {\n    try {\n      const achievements = await storage.getUserAchievements(DEFAULT_USER_ID);\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Recent items\n  app.get(\"/api/recent\", async (req: any, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const recentItems = await storage.getRecentlyAdded(DEFAULT_USER_ID, limit);\n      res.json(recentItems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch recent items\" });\n    }\n  });\n\n  // External media search with real APIs\n  app.get(\"/api/search-external\", async (req: any, res) => {\n    try {\n      const { query, type } = req.query;\n      if (!query || !type) {\n        return res.status(400).json({ error: \"Query and type parameters are required\" });\n      }\n\n      let results: any[] = [];\n\n      if (type === 'Anime') {\n        // AniList GraphQL API (no key needed)\n        try {\n          const graphqlQuery = `\n            query ($search: String) {\n              Page(perPage: 5) {\n                media(search: $search, type: ANIME) {\n                  id\n                  title {\n                    romaji\n                    english\n                  }\n                  coverImage {\n                    large\n                  }\n                  episodes\n                  description\n                  genres\n                  startDate {\n                    year\n                  }\n                }\n              }\n            }\n          `;\n\n          const response = await fetch('https://graphql.anilist.co', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              query: graphqlQuery,\n              variables: { search: query }\n            })\n          });\n\n          const data = await response.json();\n          if (data.data?.Page?.media) {\n            results = data.data.Page.media.map((item: any) => ({\n              title: item.title.english || item.title.romaji,\n              imageUrl: item.coverImage.large,\n              description: item.description?.replace(/<[^>]*>/g, '').substring(0, 200) + '...',\n              releaseYear: item.startDate?.year,\n              genres: item.genres?.slice(0, 3) || [],\n              externalId: `anilist_${item.id}`,\n              episodes: item.episodes\n            }));\n          }\n        } catch (error) {\n          console.error('AniList API error:', error);\n        }\n      } else if (type === 'Movies' || type === 'TV Shows') {\n        // TMDB API - fallback to mock if no API key\n        const TMDB_KEY = process.env.TMDB_API_KEY;\n        if (TMDB_KEY) {\n          try {\n            const mediaType = type === 'Movies' ? 'movie' : 'tv';\n            const response = await fetch(\n              `https://api.themoviedb.org/3/search/${mediaType}?api_key=${TMDB_KEY}&query=${encodeURIComponent(query)}`\n            );\n            const data = await response.json();\n            \n            if (data.results) {\n              results = data.results.slice(0, 5).map((item: any) => ({\n                title: item.title || item.name,\n                imageUrl: item.poster_path ? `https://image.tmdb.org/t/p/w300${item.poster_path}` : null,\n                description: item.overview,\n                releaseYear: item.release_date ? parseInt(item.release_date.split('-')[0]) : \n                           item.first_air_date ? parseInt(item.first_air_date.split('-')[0]) : null,\n                genres: [], // Would need additional API call for genres\n                externalId: `tmdb_${item.id}`\n              }));\n            }\n          } catch (error) {\n            console.error('TMDB API error:', error);\n          }\n        }\n      }\n\n      // Fallback to basic search if no results from APIs\n      if (results.length === 0) {\n        results = [{\n          title: query,\n          imageUrl: null,\n          description: `Search result for \"${query}\". Add TMDB_API_KEY to environment for enhanced ${type} search.`,\n          releaseYear: new Date().getFullYear(),\n          genres: [],\n          externalId: `manual_${Date.now()}`\n        }];\n      }\n\n      res.json(results);\n    } catch (error) {\n      console.error(\"External search error:\", error);\n      res.status(500).json({ error: \"Failed to search external databases\" });\n    }\n  });\n\n  // Bulk operations\n  app.patch(\"/api/bulk/update\", async (req: any, res) => {\n    try {\n      const { ids, updates } = req.body;\n      \n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ error: 'IDs array is required' });\n      }\n      \n      if (!updates || typeof updates !== 'object') {\n        return res.status(400).json({ error: 'Updates object is required' });\n      }\n\n      const results = [];\n      for (const id of ids) {\n        try {\n          const item = await storage.getMediaItem(id, DEFAULT_USER_ID);\n          if (item) {\n            const updatedItem = await storage.updateMediaItem(id, DEFAULT_USER_ID, updates);\n            results.push(updatedItem);\n          }\n        } catch (error) {\n          console.error(`Failed to update item ${id}:`, error);\n        }\n      }\n\n      res.json({ updated: results.length, items: results });\n    } catch (error) {\n      console.error('Bulk update error:', error);\n      res.status(500).json({ error: 'Failed to update items' });\n    }\n  });\n\n  app.delete(\"/api/bulk/delete\", async (req: any, res) => {\n    try {\n      const { ids } = req.body;\n      \n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ error: 'IDs array is required' });\n      }\n\n      let deletedCount = 0;\n      for (const id of ids) {\n        try {\n          await storage.deleteMediaItem(id, DEFAULT_USER_ID);\n          deletedCount++;\n        } catch (error) {\n          console.error(`Failed to delete item ${id}:`, error);\n        }\n      }\n\n      res.json({ deleted: deletedCount });\n    } catch (error) {\n      console.error('Bulk delete error:', error);\n      res.status(500).json({ error: 'Failed to delete items' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13352},"server/storage.ts":{"content":"import { \n  users, \n  mediaItems, \n  achievements, \n  userStats,\n  type User, \n  type UpsertUser,\n  type MediaItem,\n  type InsertMediaItem,\n  type Achievement,\n  type InsertAchievement,\n  type UserStats,\n  type InsertUserStats\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Media methods\n  getMediaItems(userId: string, filters?: { type?: string; status?: string }): Promise<MediaItem[]>;\n  getMediaItem(id: string, userId: string): Promise<MediaItem | undefined>;\n  createMediaItem(mediaItem: InsertMediaItem & { userId: string }): Promise<MediaItem>;\n  updateMediaItem(id: string, userId: string, updates: Partial<InsertMediaItem>): Promise<MediaItem | undefined>;\n  deleteMediaItem(id: string, userId: string): Promise<boolean>;\n  getInProgressItems(userId: string): Promise<MediaItem[]>;\n  getRecentlyAdded(userId: string, limit?: number): Promise<MediaItem[]>;\n  searchMediaItems(userId: string, query: string): Promise<MediaItem[]>;\n  getRandomItem(userId: string, filters?: { type?: string; status?: string }): Promise<MediaItem | undefined>;\n\n  // Stats methods\n  getUserStats(userId: string): Promise<UserStats | undefined>;\n  updateUserStats(userId: string, updates: Partial<InsertUserStats>): Promise<UserStats>;\n  getDetailedStats(userId: string): Promise<any>;\n  \n  // Achievement methods\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement & { userId: string }): Promise<Achievement>;\n  checkAndUnlockAchievements(userId: string): Promise<Achievement[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Create initial user stats if user is new\n    await db.insert(userStats).values({ userId: user.id }).onConflictDoNothing();\n    \n    return user;\n  }\n\n  // Media methods\n  async getMediaItems(userId: string, filters?: { type?: string; status?: string }): Promise<MediaItem[]> {\n    let query = db.select().from(mediaItems).where(\n      and(\n        eq(mediaItems.userId, userId),\n        eq(mediaItems.isArchived, false)\n      )\n    );\n\n    if (filters?.type && filters.type !== 'all') {\n      query = db.select().from(mediaItems).where(\n        and(\n          eq(mediaItems.userId, userId),\n          eq(mediaItems.type, filters.type),\n          eq(mediaItems.isArchived, false)\n        )\n      );\n    }\n\n    if (filters?.status && filters.status !== 'all') {\n      const statusFilter = filters.status === 'planned' \n        ? ['To Watch', 'To Read']\n        : filters.status === 'inprogress' \n        ? ['In Progress']\n        : [filters.status];\n      \n      query = db.select().from(mediaItems).where(\n        and(\n          eq(mediaItems.userId, userId),\n          sql`${mediaItems.status} = ANY(${statusFilter})`,\n          eq(mediaItems.isArchived, false),\n          ...(filters.type && filters.type !== 'all' ? [eq(mediaItems.type, filters.type)] : [])\n        )\n      );\n    }\n\n    return await query.orderBy(desc(mediaItems.dateAdded));\n  }\n\n  async getMediaItem(id: string, userId: string): Promise<MediaItem | undefined> {\n    const [item] = await db\n      .select()\n      .from(mediaItems)\n      .where(and(eq(mediaItems.id, id), eq(mediaItems.userId, userId)));\n    return item || undefined;\n  }\n\n  async createMediaItem(mediaItem: InsertMediaItem & { userId: string }): Promise<MediaItem> {\n    const [item] = await db\n      .insert(mediaItems)\n      .values(mediaItem)\n      .returning();\n    \n    // Update user stats\n    await this.updateStatsAfterAction(mediaItem.userId, 'add', mediaItem.status);\n    \n    // Check for achievements\n    await this.checkAndUnlockAchievements(mediaItem.userId);\n    \n    return item;\n  }\n\n  async updateMediaItem(id: string, userId: string, updates: Partial<InsertMediaItem>): Promise<MediaItem | undefined> {\n    const [item] = await db\n      .update(mediaItems)\n      .set(updates)\n      .where(and(eq(mediaItems.id, id), eq(mediaItems.userId, userId)))\n      .returning();\n    \n    if (item) {\n      await this.updateStatsAfterAction(userId, 'update', item.status);\n      await this.checkAndUnlockAchievements(userId);\n    }\n    \n    return item || undefined;\n  }\n\n  async deleteMediaItem(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(mediaItems)\n      .where(and(eq(mediaItems.id, id), eq(mediaItems.userId, userId)));\n    \n    if (result.rowCount && result.rowCount > 0) {\n      await this.updateStatsAfterAction(userId, 'delete');\n      return true;\n    }\n    return false;\n  }\n\n  async getInProgressItems(userId: string): Promise<MediaItem[]> {\n    return await db\n      .select()\n      .from(mediaItems)\n      .where(\n        and(\n          eq(mediaItems.userId, userId),\n          eq(mediaItems.status, 'In Progress'),\n          eq(mediaItems.isArchived, false)\n        )\n      )\n      .orderBy(desc(mediaItems.dateAdded));\n  }\n\n  async getRecentlyAdded(userId: string, limit = 10): Promise<MediaItem[]> {\n    return await db\n      .select()\n      .from(mediaItems)\n      .where(and(eq(mediaItems.userId, userId), eq(mediaItems.isArchived, false)))\n      .orderBy(desc(mediaItems.dateAdded))\n      .limit(limit);\n  }\n\n  async searchMediaItems(userId: string, query: string): Promise<MediaItem[]> {\n    return await db\n      .select()\n      .from(mediaItems)\n      .where(\n        and(\n          eq(mediaItems.userId, userId),\n          sql`${mediaItems.title} ILIKE ${`%${query}%`}`,\n          eq(mediaItems.isArchived, false)\n        )\n      )\n      .orderBy(desc(mediaItems.dateAdded));\n  }\n\n  async getRandomItem(userId: string, filters?: { type?: string; status?: string }): Promise<MediaItem | undefined> {\n    const items = await this.getMediaItems(userId, filters);\n    if (items.length === 0) return undefined;\n    \n    const randomIndex = Math.floor(Math.random() * items.length);\n    return items[randomIndex];\n  }\n\n  // Stats methods\n  async getUserStats(userId: string): Promise<UserStats | undefined> {\n    const [stats] = await db\n      .select()\n      .from(userStats)\n      .where(eq(userStats.userId, userId));\n    return stats || undefined;\n  }\n\n  async updateUserStats(userId: string, updates: Partial<InsertUserStats>): Promise<UserStats> {\n    const [stats] = await db\n      .update(userStats)\n      .set({ ...updates, lastActivity: new Date() })\n      .where(eq(userStats.userId, userId))\n      .returning();\n    return stats;\n  }\n\n  async getDetailedStats(userId: string): Promise<any> {\n    const items = await db\n      .select()\n      .from(mediaItems)\n      .where(and(eq(mediaItems.userId, userId), eq(mediaItems.isArchived, false)));\n\n    const stats = {\n      total: items.length,\n      byStatus: {} as Record<string, number>,\n      byType: {} as Record<string, any>,\n      byGenre: {} as Record<string, number>,\n      topGenres: [] as any[],\n      inProgressCount: 0,\n      completedCount: 0,\n      recentlyAdded: [] as MediaItem[]\n    };\n\n    items.forEach(item => {\n      // Status stats\n      stats.byStatus[item.status] = (stats.byStatus[item.status] || 0) + 1;\n      \n      // Type stats\n      if (!stats.byType[item.type]) {\n        stats.byType[item.type] = { total: 0, completed: 0, inProgress: 0, planned: 0, dropped: 0 };\n      }\n      stats.byType[item.type].total++;\n      \n      if (item.status === 'Watched' || item.status === 'Read') {\n        stats.byType[item.type].completed++;\n        stats.completedCount++;\n      } else if (item.status === 'In Progress') {\n        stats.byType[item.type].inProgress++;\n        stats.inProgressCount++;\n      } else if (item.status === 'To Watch' || item.status === 'To Read') {\n        stats.byType[item.type].planned++;\n      } else if (item.status === 'Dropped') {\n        stats.byType[item.type].dropped++;\n      }\n\n      // Genre stats\n      if (item.genre) {\n        stats.byGenre[item.genre] = (stats.byGenre[item.genre] || 0) + 1;\n      }\n    });\n\n    // Convert genres to sorted array\n    stats.topGenres = Object.keys(stats.byGenre)\n      .map(genre => ({ name: genre, count: stats.byGenre[genre] }))\n      .sort((a, b) => b.count - a.count);\n\n    // Get recently added\n    stats.recentlyAdded = await this.getRecentlyAdded(userId, 5);\n\n    return stats;\n  }\n\n  // Achievement methods\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId))\n      .orderBy(desc(achievements.unlockedAt));\n  }\n\n  async createAchievement(achievement: InsertAchievement & { userId: string }): Promise<Achievement> {\n    const [newAchievement] = await db\n      .insert(achievements)\n      .values(achievement)\n      .returning();\n    return newAchievement;\n  }\n\n  async checkAndUnlockAchievements(userId: string): Promise<Achievement[]> {\n    const stats = await this.getDetailedStats(userId);\n    const existingAchievements = await this.getUserAchievements(userId);\n    const existingTypes = existingAchievements.map(a => a.type);\n    const newAchievements: Achievement[] = [];\n\n    // Collector achievements\n    if (stats.total >= 10 && !existingTypes.includes('collector_10')) {\n      const achievement = await this.createAchievement({\n        userId,\n        type: 'collector_10',\n        title: 'Getting Started',\n        description: 'Added your first 10 items',\n        metadata: { count: stats.total }\n      });\n      newAchievements.push(achievement);\n    }\n\n    if (stats.total >= 50 && !existingTypes.includes('collector_50')) {\n      const achievement = await this.createAchievement({\n        userId,\n        type: 'collector_50',\n        title: 'Collector',\n        description: 'Added 50 items to your library',\n        metadata: { count: stats.total }\n      });\n      newAchievements.push(achievement);\n    }\n\n    if (stats.total >= 100 && !existingTypes.includes('collector_100')) {\n      const achievement = await this.createAchievement({\n        userId,\n        type: 'collector_100',\n        title: 'Curator',\n        description: 'Added 100 items to your library',\n        metadata: { count: stats.total }\n      });\n      newAchievements.push(achievement);\n    }\n\n    // Completion achievements\n    if (stats.completedCount >= 10 && !existingTypes.includes('completed_10')) {\n      const achievement = await this.createAchievement({\n        userId,\n        type: 'completed_10',\n        title: 'Finisher',\n        description: 'Completed your first 10 items',\n        metadata: { count: stats.completedCount }\n      });\n      newAchievements.push(achievement);\n    }\n\n    return newAchievements;\n  }\n\n  private async updateStatsAfterAction(userId: string, action: 'add' | 'update' | 'delete', status?: string): Promise<void> {\n    const stats = await this.getDetailedStats(userId);\n    \n    await this.updateUserStats(userId, {\n      totalItems: stats.total,\n      completedItems: stats.completedCount,\n      inProgressItems: stats.inProgressCount,\n      plannedItems: (stats.byStatus['To Watch'] || 0) + (stats.byStatus['To Read'] || 0),\n      droppedItems: stats.byStatus['Dropped'] || 0,\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11834},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const mediaItems = pgTable(\"media_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // Anime, Manhwa, Pornhwa, Novels, Movies, TV Shows\n  status: text(\"status\").notNull(), // To Watch/Read, In Progress, Watched/Read, Dropped\n  progress: text(\"progress\"),\n  season: integer(\"season\"),\n  episode: integer(\"episode\"),\n  chapter: integer(\"chapter\"),\n  totalEpisodes: integer(\"total_episodes\"),\n  totalSeasons: integer(\"total_seasons\"),\n  totalChapters: integer(\"total_chapters\"),\n  genre: text(\"genre\"), // Can store multiple genres as comma-separated values\n  notes: text(\"notes\"),\n  rating: integer(\"rating\"),\n  dateAdded: timestamp(\"date_added\").default(sql`now()`),\n  dateCompleted: timestamp(\"date_completed\"),\n  timeSpent: integer(\"time_spent\"), // in minutes\n  isArchived: boolean(\"is_archived\").default(false),\n  imageUrl: text(\"image_url\"), // Cover image URL\n  description: text(\"description\"), // Plot/synopsis\n  externalId: text(\"external_id\"), // ID from external database (TMDB, AniList, etc.)\n  releaseYear: integer(\"release_year\"),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n  genres: text(\"genres\").array(), // Array of genres\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\").notNull(), // collector, streak, genre_master, etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").default(sql`now()`),\n  metadata: jsonb(\"metadata\"), // additional data like count, streak length, etc.\n});\n\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique(),\n  totalItems: integer(\"total_items\").default(0),\n  completedItems: integer(\"completed_items\").default(0),\n  inProgressItems: integer(\"in_progress_items\").default(0),\n  plannedItems: integer(\"planned_items\").default(0),\n  droppedItems: integer(\"dropped_items\").default(0),\n  totalTimeSpent: integer(\"total_time_spent\").default(0), // in minutes\n  currentStreak: integer(\"current_streak\").default(0),\n  longestStreak: integer(\"longest_streak\").default(0),\n  lastActivity: timestamp(\"last_activity\").default(sql`now()`),\n});\n\n// Relations\nexport const mediaItemsRelations = relations(mediaItems, ({ one }) => ({\n  user: one(users, {\n    fields: [mediaItems.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ one }) => ({\n  user: one(users, {\n    fields: [achievements.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userStatsRelations = relations(userStats, ({ one }) => ({\n  user: one(users, {\n    fields: [userStats.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  mediaItems: many(mediaItems),\n  achievements: many(achievements),\n  stats: one(userStats),\n}));\n\n// Insert schemas\nexport const insertMediaItemSchema = createInsertSchema(mediaItems).omit({\n  id: true,\n  userId: true,\n  dateAdded: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  userId: true,\n  unlockedAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  userId: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type MediaItem = typeof mediaItems.$inferSelect;\nexport type InsertMediaItem = z.infer<typeof insertMediaItemSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\n","size_bytes":5074},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Library from \"@/pages/library\";\nimport Achievements from \"@/pages/achievements\";\nimport SettingsPage from \"@/pages/settings\";\nimport Landing from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/library\" component={Library} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route path=\"/landing\" component={Landing} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark min-h-screen bg-background text-foreground\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1203},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(353, 68%, 32%);  /* #7A1927 */\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(353, 68%, 32%);\n  --radius: 0.75rem;\n\n  /* Custom media tracker colors - exact match to your specs */\n  --surface: hsl(0, 0%, 8%);      /* #141414 */\n  --surface-2: hsl(0, 0%, 12%);   /* #1f1f1f */\n  --surface-3: hsl(0, 0%, 16%);   /* #292929 */\n  --accent-red: hsl(353, 68%, 32%);    /* #7A1927 primary red */\n  --primary-red: hsl(353, 68%, 35%);   /* slightly lighter */\n  --red-hover: hsl(353, 68%, 42%);     /* hover state */\n  --red-muted: hsl(353, 50%, 28%);     /* muted variant */\n  --red-light: hsl(353, 60%, 55%);     /* light variant */\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(346, 63%, 32%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: #0a0a0a !important;\n    font-family: 'Inter', system-ui, sans-serif;\n    overflow-x: hidden;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: #0a0a0a;\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: #7A1927;\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: #9d2332;\n  }\n}\n\n@layer components {\n  .gradient-border {\n    background: linear-gradient(90deg, #7A1927, #ff6b6b);\n    border-radius: 12px;\n    padding: 1px;\n  }\n\n  .gradient-border > div {\n    background: #1a1a1a;\n    border-radius: 11px;\n  }\n\n  .progress-bar {\n    background: linear-gradient(90deg, #7A1927, #ff6b6b);\n  }\n\n  .hover-scale {\n    transition: transform 0.2s ease;\n  }\n\n  .hover-scale:hover {\n    transform: scale(1.02);\n  }\n\n  .sidebar-item {\n    transition: all 0.2s ease;\n  }\n\n  .sidebar-item:hover {\n    background: #2a2a2a;\n    border-left: 4px solid #7A1927;\n  }\n\n  .modal-backdrop {\n    backdrop-filter: blur(8px);\n  }\n\n  .bg-surface {\n    background-color: var(--surface);\n  }\n\n  .bg-surface-2 {\n    background-color: var(--surface-2);\n  }\n\n  .bg-surface-3 {\n    background-color: var(--surface-3);\n  }\n\n  .text-accent {\n    color: var(--accent-red);\n  }\n\n  .bg-primary-red {\n    background-color: var(--primary-red);\n  }\n\n  .border-gray-700 {\n    border-color: hsl(240, 3.7%, 15.9%);\n  }\n\n  /* Line clamp utilities */\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n\n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n","size_bytes":4009},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AchievementWidget.tsx":{"content":"import { Trophy, Flame } from \"lucide-react\";\nimport type { Achievement } from \"@shared/schema\";\n\ninterface AchievementWidgetProps {\n  achievements?: Achievement[];\n  isLoading?: boolean;\n}\n\nconst getAchievementIcon = (type: string) => {\n  switch (type) {\n    case 'collector_10':\n    case 'collector_50':\n    case 'collector_100': return Trophy;\n    case 'completed_10':\n    case 'completed_50': return Trophy;\n    case 'week_streak': return Flame;\n    default: return Trophy;\n  }\n};\n\nconst getAchievementColor = (type: string) => {\n  switch (type) {\n    case 'collector_10': return 'bg-bronze-500/20 text-bronze-400';\n    case 'collector_50': return 'bg-silver-500/20 text-silver-400';\n    case 'collector_100': return 'bg-yellow-500/20 text-yellow-400';\n    case 'week_streak': return 'bg-blue-500/20 text-blue-400';\n    default: return 'bg-yellow-500/20 text-yellow-400';\n  }\n};\n\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffTime = Math.abs(now.getTime() - date.getTime());\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 1) return '1 day ago';\n  if (diffDays < 7) return `${diffDays} days ago`;\n  if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n  return `${Math.ceil(diffDays / 30)} months ago`;\n};\n\nexport default function AchievementWidget({ achievements = [], isLoading }: AchievementWidgetProps) {\n  if (isLoading) {\n    return (\n      <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-bold\">🏆 Achievements</h3>\n        </div>\n        <div className=\"space-y-3\">\n          {[...Array(2)].map((_, i) => (\n            <div key={i} className=\"flex items-center space-x-3 p-3 bg-surface-2 rounded-lg animate-pulse\">\n              <div className=\"w-8 h-8 bg-gray-600 rounded-full\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-gray-600 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-1/2\"></div>\n              </div>\n              <div className=\"h-3 bg-gray-700 rounded w-16\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const recentAchievements = achievements.slice(0, 3);\n\n  return (\n    <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-bold\">🏆 Achievements</h3>\n        <a href=\"#\" className=\"text-primary-red hover:text-accent text-sm\">View All</a>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {recentAchievements.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Trophy className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n            <p className=\"text-gray-400\">No achievements yet</p>\n            <p className=\"text-sm text-gray-500 mt-2\">\n              Start adding and completing media to unlock achievements!\n            </p>\n          </div>\n        ) : (\n          recentAchievements.map((achievement) => {\n            const Icon = getAchievementIcon(achievement.type);\n            return (\n              <div key={achievement.id} className=\"flex items-center space-x-3 p-3 bg-surface-2 rounded-lg\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getAchievementColor(achievement.type)}`}>\n                  <Icon className=\"w-4 h-4\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{achievement.title}</p>\n                  <p className=\"text-xs text-gray-400\">{achievement.description}</p>\n                </div>\n                <span className=\"text-xs text-gray-500\">\n                  {achievement.unlockedAt ? formatDate(achievement.unlockedAt.toString()) : 'Recently'}\n                </span>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4054},"client/src/components/AddMediaModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, Tags, X } from \"lucide-react\";\nimport MediaSearch from \"@/components/MediaSearch\";\nimport GenreSelector from \"@/components/GenreSelector\";\nimport type { InsertMediaItem } from \"@shared/schema\";\n\ninterface AddMediaModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\n// Media types based on your Google Sheets specifications\nconst mediaTypes = ['Anime', 'Manhwa', 'Pornhwa', 'Novels', 'Movies', 'TV Shows'];\nconst genres = [\n  'Fantasy', 'Sci-Fi', 'Romance', 'Slice of Life', 'Action', 'Adventure',\n  'Comedy', 'Drama', 'Horror', 'Mystery', 'Thriller', 'Psychological',\n  'Sports', 'Supernatural', 'Historical'\n];\n\nexport default function AddMediaModal({ isOpen, onClose }: AddMediaModalProps) {\n  const [formData, setFormData] = useState<Partial<InsertMediaItem>>({\n    title: '',\n    type: '',\n    status: '',\n    genre: '',\n    notes: '',\n    season: 1,\n    episode: 0,\n    chapter: 0,\n    imageUrl: '',\n    description: '',\n    externalId: '',\n    releaseYear: undefined,\n  });\n  \n  const [selectedGenres, setSelectedGenres] = useState<string[]>([]);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [isGenreModalOpen, setIsGenreModalOpen] = useState(false);\n  const [showProgressFields, setShowProgressFields] = useState(false);\n  const [autoSearchResults, setAutoSearchResults] = useState<any[]>([]);\n  const [showAutoSearch, setShowAutoSearch] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const addMediaMutation = useMutation({\n    mutationFn: async (data: InsertMediaItem) => {\n      const response = await apiRequest('POST', '/api/media', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Media added successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recent'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/media'] });\n      onClose();\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add media. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      type: '',\n      status: '',\n      genre: '',\n      notes: '',\n      season: 1,\n      episode: 0,\n      chapter: 0,\n      imageUrl: '',\n      description: '',\n      externalId: '',\n      releaseYear: undefined,\n    });\n    setSelectedGenres([]);\n    setShowProgressFields(false);\n    setAutoSearchResults([]);\n    setShowAutoSearch(false);\n  };\n\n  // Auto search when title is 3+ characters\n  useEffect(() => {\n    const performAutoSearch = async () => {\n      if (formData.title && formData.title.length >= 3 && formData.type) {\n        try {\n          const response = await fetch(`/api/external-search?query=${encodeURIComponent(formData.title)}&type=${encodeURIComponent(formData.type)}`);\n          const results = await response.json();\n          setAutoSearchResults(results.slice(0, 5)); // Show max 5 results\n          setShowAutoSearch(results.length > 0);\n        } catch (error) {\n          console.error('Auto search error:', error);\n          setShowAutoSearch(false);\n        }\n      } else {\n        setShowAutoSearch(false);\n      }\n    };\n\n    const timeoutId = setTimeout(performAutoSearch, 300); // Debounce\n    return () => clearTimeout(timeoutId);\n  }, [formData.title, formData.type]);\n\n  // Show progress fields when status is selected and it's \"In Progress\"\n  useEffect(() => {\n    if (formData.status === 'In Progress') {\n      setShowProgressFields(true);\n    } else {\n      setShowProgressFields(false);\n    }\n  }, [formData.status]);\n\n\n\n  const handleGenresChange = (genres: string[]) => {\n    setSelectedGenres(genres);\n    setFormData(prev => ({\n      ...prev,\n      genre: genres.join(', ')\n    }));\n  };\n\n  const getStatusOptions = (type: string) => {\n    if (type === 'Movies') {\n      return ['To Watch', 'Watched', 'Dropped'];\n    } else if (type === 'Anime' || type === 'TV Shows') {\n      return ['To Watch', 'In Progress', 'Watched', 'Dropped'];\n    } else if (type === 'Manhwa' || type === 'Pornhwa' || type === 'Novels') {\n      return ['To Read', 'In Progress', 'Read', 'Dropped'];\n    }\n    return [];\n  };\n\n  const setQuickStatus = (statusType: 'planned' | 'progress' | 'completed') => {\n    if (!formData.type) return;\n    \n    let status = '';\n    if (statusType === 'planned') {\n      status = (['Movies', 'Anime', 'TV Shows'].includes(formData.type || '')) ? 'To Watch' : 'To Read';\n    } else if (statusType === 'progress') {\n      status = 'In Progress';\n    } else if (statusType === 'completed') {\n      status = (['Movies', 'Anime', 'TV Shows'].includes(formData.type || '')) ? 'Watched' : 'Read';\n    }\n    \n    setFormData(prev => ({ ...prev, status }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.type || !formData.status) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Format progress\n    let progress = '';\n    if (formData.type === 'Anime' || formData.type === 'TV Shows') {\n      if (formData.season && formData.episode) {\n        progress = `S${formData.season}E${formData.episode}`;\n      }\n    } else if (['Manhwa', 'Pornhwa', 'Novels'].includes(formData.type || '')) {\n      if (formData.chapter) {\n        progress = `Ch${formData.chapter}`;\n      }\n    }\n\n    const submitData: InsertMediaItem = {\n      title: formData.title!,\n      type: formData.type!,\n      status: formData.status!,\n      progress,\n      season: formData.season,\n      episode: formData.episode,\n      chapter: formData.chapter,\n      genre: selectedGenres.length > 0 ? selectedGenres.join(', ') : null,\n      notes: formData.notes || null,\n      rating: null,\n      dateCompleted: null,\n      timeSpent: null,\n      isArchived: false,\n      imageUrl: formData.imageUrl || null,\n      description: formData.description || null,\n      externalId: formData.externalId || null,\n      releaseYear: formData.releaseYear || null,\n    };\n\n    addMediaMutation.mutate(submitData);\n  };\n\n  // Handle auto-search result selection\n  const handleSearchResult = (result: any) => {\n    setFormData(prev => ({\n      ...prev,\n      title: result.title,\n      imageUrl: result.imageUrl || '',\n      description: result.description || '',\n      releaseYear: result.releaseYear || undefined,\n      externalId: result.externalId || ''\n    }));\n    \n    // Set first genre if available\n    if (result.genres && result.genres.length > 0) {\n      setSelectedGenres([result.genres[0]]);\n    }\n    \n    setShowAutoSearch(false);\n    setIsSearchOpen(false);\n  };\n\n  // Auto-search when typing 3+ characters\n  useEffect(() => {\n    if (formData.title && formData.title.length >= 3 && formData.type) {\n      const timer = setTimeout(async () => {\n        try {\n          const response = await fetch(`/api/search-external?query=${encodeURIComponent(formData.title!)}&type=${encodeURIComponent(formData.type!)}`);\n          const results = await response.json();\n          setAutoSearchResults(results);\n          setShowAutoSearch(results.length > 0);\n        } catch (error) {\n          console.error('Auto-search error:', error);\n          setShowAutoSearch(false);\n        }\n      }, 500);\n      \n      return () => clearTimeout(timer);\n    } else {\n      setShowAutoSearch(false);\n    }\n  }, [formData.title, formData.type]);\n\n  const showSeasonField = formData.type === 'Anime' || formData.type === 'TV Shows';\n  const episodeLabel = ['Manhwa', 'Pornhwa', 'Novels'].includes(formData.type || '') ? 'Chapter' : 'Episode';\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-surface border-gray-700 max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">➕ Add New Media</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Media Type */}\n          <div>\n            <Label htmlFor=\"type\">Media Type*</Label>\n            <Select value={formData.type} onValueChange={(value) => setFormData(prev => ({ ...prev, type: value, status: '' }))}>\n              <SelectTrigger className=\"bg-surface-2 border-gray-600\">\n                <SelectValue placeholder=\"Select Type\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-surface-2 border-gray-600\">\n                {mediaTypes.map((type: string) => (\n                  <SelectItem key={type} value={type}>{type}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Title with Search Button */}\n          <div>\n            <Label htmlFor=\"title\">Title*</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                className=\"bg-surface-2 border-gray-600 flex-1\"\n                placeholder=\"Enter media title\"\n              />\n              {formData.type && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsSearchOpen(true)}\n                  className=\"bg-[#7A1927] hover:bg-[#9d2332] border-[#7A1927] text-white\"\n                >\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n            {formData.type && (\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Click the search button to find {formData.type.toLowerCase()} from external databases\n              </p>\n            )}\n            \n            {/* Auto Search Results */}\n            {showAutoSearch && (\n              <div className=\"bg-surface-2 border border-gray-600 rounded-md mt-2 max-h-40 overflow-y-auto\">\n                <div className=\"p-2 text-xs text-gray-400 border-b border-gray-600\">\n                  Auto-search results (click to fill):\n                </div>\n                {autoSearchResults.map((result, index) => (\n                  <div\n                    key={index}\n                    className=\"p-2 hover:bg-surface-1 cursor-pointer border-b border-gray-700 last:border-b-0\"\n                    onClick={() => handleSearchResult(result)}\n                  >\n                    <div className=\"text-sm font-medium\">{result.title}</div>\n                    {result.releaseYear && (\n                      <div className=\"text-xs text-gray-400\">{result.releaseYear}</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Status - only show if type is selected */}\n          {formData.type && (\n            <div>\n              <Label htmlFor=\"status\">Status*</Label>\n              <Select value={formData.status} onValueChange={(value) => setFormData(prev => ({ ...prev, status: value }))}>\n                <SelectTrigger className=\"bg-surface-2 border-gray-600\">\n                  <SelectValue placeholder=\"Select Status\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-surface-2 border-gray-600\">\n                  {getStatusOptions(formData.type || '').map(status => (\n                    <SelectItem key={status} value={status}>{status}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            \n            {/* Quick Status Buttons */}\n            {formData.type && (\n              <div className=\"flex space-x-2 mt-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuickStatus('planned')}\n                  className=\"flex-1 bg-amber-500/20 text-amber-400 border-amber-500/30 hover:bg-amber-500/30\"\n                >\n                  Plan to {formData.type === 'Movies' || formData.type === 'Anime' || formData.type === 'TV Shows' ? 'Watch' : 'Read'}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuickStatus('progress')}\n                  className=\"flex-1 bg-green-500/20 text-green-400 border-green-500/30 hover:bg-green-500/30\"\n                >\n                  In Progress\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuickStatus('completed')}\n                  className=\"flex-1 bg-blue-500/20 text-blue-400 border-blue-500/30 hover:bg-blue-500/30\"\n                >\n                  Completed\n                </Button>\n              </div>\n            )}\n          </div>\n          )}\n\n          {/* Progress Fields - only show if status is selected and status is \"In Progress\" */}\n          {formData.status === 'In Progress' && (\n            <div className=\"space-y-4\">\n              {showSeasonField && (\n                <div>\n                  <Label htmlFor=\"season\">Season</Label>\n                  <Input\n                    id=\"season\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.season || ''}\n                    onChange={(e) => setFormData(prev => ({ ...prev, season: parseInt(e.target.value) || 1 }))}\n                    className=\"bg-surface-2 border-gray-600\"\n                  />\n                </div>\n              )}\n              \n              <div>\n                <Label htmlFor=\"episode\">{episodeLabel}</Label>\n                <Input\n                  id=\"episode\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={showSeasonField ? (formData.episode || '') : (formData.chapter || '')}\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value) || 0;\n                    if (showSeasonField) {\n                      setFormData(prev => ({ ...prev, episode: value }));\n                    } else {\n                      setFormData(prev => ({ ...prev, chapter: value }));\n                    }\n                  }}\n                  className=\"bg-surface-2 border-gray-600\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Genres (Multi-select) */}\n          <div>\n            <Label htmlFor=\"genre\">Genres</Label>\n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsGenreModalOpen(true)}\n                className=\"w-full bg-surface-2 border-gray-600 justify-start text-left\"\n              >\n                <Tags className=\"w-4 h-4 mr-2\" />\n                {selectedGenres.length > 0 \n                  ? `${selectedGenres.length} genre${selectedGenres.length > 1 ? 's' : ''} selected`\n                  : 'Select genres...'\n                }\n              </Button>\n              \n              {selectedGenres.length > 0 && (\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedGenres.map((genre) => (\n                    <Badge \n                      key={genre} \n                      variant=\"secondary\" \n                      className=\"bg-[#7A1927] text-white\"\n                    >\n                      {genre}\n                      <X \n                        className=\"w-3 h-3 ml-1 cursor-pointer\" \n                        onClick={() => {\n                          const newGenres = selectedGenres.filter(g => g !== genre);\n                          setSelectedGenres(newGenres);\n                          setFormData(prev => ({ ...prev, genre: newGenres.join(', ') }));\n                        }}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Description (from search) */}\n          {formData.description && (\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"bg-surface-2 border-gray-600\"\n                rows={3}\n                placeholder=\"Media description...\"\n              />\n            </div>\n          )}\n\n          {/* Notes */}\n          <div>\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes || ''}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              className=\"bg-surface-2 border-gray-600\"\n              placeholder=\"Any additional notes...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose} \n              className=\"flex-1 bg-gray-600 hover:bg-gray-700 border-gray-600\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={addMediaMutation.isPending}\n              className=\"flex-1 bg-primary-red hover:bg-primary-red/90\"\n            >\n              {addMediaMutation.isPending ? 'Adding...' : 'Add Media'}\n            </Button>\n          </div>\n        </form>\n        \n        {/* Search Modal */}\n        <MediaSearch\n          isOpen={isSearchOpen}\n          onClose={() => setIsSearchOpen(false)}\n          mediaType={formData.type || ''}\n          onSelect={handleSearchResult}\n        />\n        \n        {/* Genre Selection Modal */}\n        <GenreSelector\n          isOpen={isGenreModalOpen}\n          onClose={() => setIsGenreModalOpen(false)}\n          selectedGenres={selectedGenres}\n          onGenresChange={handleGenresChange}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19054},"client/src/components/CurrentlyActive.tsx":{"content":"import { Plus, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { MediaItem } from \"@shared/schema\";\n\ninterface CurrentlyActiveProps {\n  items?: MediaItem[];\n  isLoading?: boolean;\n  onQuickUpdate: () => void;\n}\n\nexport default function CurrentlyActive({ items = [], isLoading, onQuickUpdate }: CurrentlyActiveProps) {\n  if (isLoading) {\n    return (\n      <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-bold\">Currently Active</h3>\n        </div>\n        <div className=\"space-y-4\">\n          {[...Array(2)].map((_, i) => (\n            <div key={i} className=\"border border-gray-600 rounded-lg p-4 animate-pulse\">\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-gray-600 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-1/2\"></div>\n                <div className=\"h-2 bg-gray-700 rounded w-full\"></div>\n                <div className=\"h-8 bg-gray-600 rounded\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate progress percentage (dummy calculation for demo)\n  const getProgressPercentage = (item: MediaItem) => {\n    if (item.type === 'Anime' || item.type === 'TV Shows') {\n      // Assume 24 episodes per season for calculation\n      const totalEpisodes = (item.season || 1) * 24;\n      const currentEpisode = item.episode || 0;\n      return Math.min(Math.round((currentEpisode / totalEpisodes) * 100), 100);\n    } else {\n      // For manga/novels, assume arbitrary total for demo\n      const currentChapter = item.chapter || 0;\n      const estimatedTotal = Math.max(currentChapter * 1.5, 100); // Rough estimate\n      return Math.min(Math.round((currentChapter / estimatedTotal) * 100), 90);\n    }\n  };\n\n  return (\n    <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-bold\">Currently Active</h3>\n        <Button \n          onClick={onQuickUpdate}\n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"text-primary-red hover:text-accent\"\n        >\n          <Plus className=\"w-4 h-4 mr-1\" /> Quick Update\n        </Button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {items.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-400\">No items in progress</p>\n            <p className=\"text-sm text-gray-500 mt-2\">\n              Start watching or reading something to see it here!\n            </p>\n          </div>\n        ) : (\n          items.slice(0, 3).map((item) => {\n            const progressPercent = getProgressPercentage(item);\n            return (\n              <div key={item.id} className=\"border border-gray-600 rounded-lg p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-sm\">{item.title}</h4>\n                    <p className=\"text-xs text-gray-400\">{item.type}</p>\n                  </div>\n                  <span className=\"text-xs text-green-400\">\n                    {item.progress || 'No progress'}\n                  </span>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"mb-3\">\n                  <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                    <span>Progress</span>\n                    <span>{progressPercent}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div \n                      className=\"progress-bar h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${progressPercent}%` }}\n                    ></div>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Button\n                    size=\"sm\"\n                    className=\"flex-1 bg-primary-red hover:bg-primary-red/90 text-xs\"\n                  >\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    +1 {item.type === 'Anime' || item.type === 'TV Shows' ? 'Episode' : 'Chapter'}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"bg-surface-2 hover:bg-surface-3 border-gray-600 text-xs\"\n                  >\n                    <MoreHorizontal className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4807},"client/src/components/HeaderBar.tsx":{"content":"import { Search, Plus, User, Flame, LogOut, ChevronDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface HeaderBarProps {\n  onAddMedia: () => void;\n}\n\nexport default function HeaderBar({ onAddMedia }: HeaderBarProps) {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const typedUser = user as UserType | undefined;\n\n  return (\n    <header className=\"bg-surface border-b border-gray-700 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-2xl font-bold\">Dashboard</h2>\n          <div className=\"flex items-center space-x-2 bg-surface-2 rounded-lg px-3 py-1\">\n            <Flame className=\"text-[#7A1927] w-4 h-4\" />\n            <span className=\"text-sm font-medium\">7 day streak!</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search media...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"bg-surface-2 border-gray-600 w-80 pr-10 focus:border-primary\"\n            />\n            <Search className=\"absolute right-3 top-3 w-4 h-4 text-gray-400\" />\n          </div>\n          \n          {/* Quick Add Button */}\n          <Button \n            onClick={onAddMedia}\n            className=\"bg-[#7A1927] hover:bg-[#9d2332] transition-colors text-white\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Media\n          </Button>\n          \n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center space-x-2 bg-surface-2 border-gray-600 hover:bg-surface-3\"\n              >\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarImage src={typedUser?.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"bg-[#7A1927] text-white text-xs\">\n                    {typedUser?.firstName?.charAt(0) || typedUser?.email?.charAt(0) || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-sm\">\n                  {typedUser?.firstName || typedUser?.email?.split('@')[0] || \"User\"}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\">\n              <DropdownMenuLabel>\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm font-medium\">\n                    {typedUser?.firstName && typedUser?.lastName \n                      ? `${typedUser.firstName} ${typedUser.lastName}`\n                      : typedUser?.email?.split('@')[0] || \"User\"\n                    }\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">{typedUser?.email}</p>\n                </div>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={() => window.location.href = '/api/logout'}\n                className=\"text-red-600 focus:text-red-600\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4078},"client/src/components/MediaCatalog.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { X, Filter, Search, Grid, List, Star, Clock, Check, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { MediaItem } from \"@shared/schema\";\n\ninterface MediaCatalogProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst statusColors = {\n  'To Watch': 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n  'Watching': 'bg-green-500/20 text-green-400 border-green-500/30',\n  'Completed': 'bg-purple-500/20 text-purple-400 border-purple-500/30',\n  'On Hold': 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n  'Dropped': 'bg-red-500/20 text-red-400 border-red-500/30',\n};\n\nconst statusIcons = {\n  'To Watch': Clock,\n  'Watching': Play,\n  'Completed': Check,\n  'On Hold': Clock,\n  'Dropped': X,\n};\n\nconst MediaCatalog: React.FC<MediaCatalogProps> = ({ isOpen, onClose }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  const { data: mediaItems = [], isLoading } = useQuery<MediaItem[]>({\n    queryKey: ['/api/media'],\n    enabled: isOpen\n  });\n\n  const filteredItems = mediaItems.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (item.genre && item.genre.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesType = filterType === \"all\" || item.type === filterType;\n    const matchesStatus = filterStatus === \"all\" || item.status === filterStatus;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm\">\n      <div className=\"fixed inset-4 bg-background border border-border rounded-lg shadow-2xl\">\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border\">\n            <div className=\"flex items-center space-x-4\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Media Catalog</h2>\n              <Badge variant=\"secondary\" className=\"bg-surface-2 text-muted-foreground\">\n                {filteredItems.length} items\n              </Badge>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Filters and Search */}\n          <div className=\"flex flex-wrap items-center gap-4 p-6 border-b border-border bg-surface-1\">\n            <div className=\"flex-1 min-w-[200px]\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by title or genre...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-background border-border\"\n                />\n              </div>\n            </div>\n            \n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-[150px] bg-background border-border\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"Movies\">Movies</SelectItem>\n                <SelectItem value=\"TV Shows\">TV Shows</SelectItem>\n                <SelectItem value=\"Anime\">Anime</SelectItem>\n                <SelectItem value=\"Books\">Books</SelectItem>\n                <SelectItem value=\"Manhwa\">Manhwa</SelectItem>\n                <SelectItem value=\"Novels\">Novels</SelectItem>\n                <SelectItem value=\"Manhua\">Manhua</SelectItem>\n                <SelectItem value=\"Pornhwa\">Pornhwa</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[150px] bg-background border-border\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"To Watch\">To Watch</SelectItem>\n                <SelectItem value=\"Watching\">Watching</SelectItem>\n                <SelectItem value=\"Completed\">Completed</SelectItem>\n                <SelectItem value=\"On Hold\">On Hold</SelectItem>\n                <SelectItem value=\"Dropped\">Dropped</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n              >\n                <Grid className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 overflow-auto p-6\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-red\"></div>\n              </div>\n            ) : filteredItems.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground text-lg\">No media items found</p>\n                <p className=\"text-muted-foreground text-sm mt-2\">\n                  {searchTerm || filterType !== \"all\" || filterStatus !== \"all\" \n                    ? \"Try adjusting your search or filters\"\n                    : \"Add some media items to get started\"\n                  }\n                </p>\n              </div>\n            ) : viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredItems.map((item) => {\n                  const StatusIcon = statusIcons[item.status as keyof typeof statusIcons];\n                  return (\n                    <Card key={item.id} className=\"bg-surface-1 border-border hover:bg-surface-2 transition-colors overflow-hidden\">\n                      {/* Image */}\n                      <div className=\"aspect-[3/4] relative bg-gray-800\">\n                        {item.imageUrl ? (\n                          <img\n                            src={item.imageUrl}\n                            alt={item.title}\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              const target = e.target as HTMLImageElement;\n                              target.style.display = 'none';\n                              target.nextElementSibling?.classList.remove('hidden');\n                            }}\n                          />\n                        ) : null}\n                        <div className={`absolute inset-0 flex items-center justify-center bg-gray-800 ${item.imageUrl ? 'hidden' : ''}`}>\n                          <div className=\"text-center text-gray-400\">\n                            <div className=\"text-4xl mb-2\">📺</div>\n                            <div className=\"text-xs px-2\">{item.title}</div>\n                          </div>\n                        </div>\n                        <Badge className={`absolute top-2 right-2 ${statusColors[item.status as keyof typeof statusColors]} flex items-center gap-1`}>\n                          <StatusIcon className=\"h-3 w-3\" />\n                          {item.status}\n                        </Badge>\n                      </div>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm font-medium line-clamp-2 text-foreground\">\n                          {item.title}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Type:</span>\n                            <span className=\"text-foreground\">{item.type}</span>\n                          </div>\n                          \n                          {item.progress && (\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">Progress:</span>\n                              <span className=\"text-foreground\">\n                                {item.progress}\n                              </span>\n                            </div>\n                          )}\n\n                          {item.rating && (\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">Rating:</span>\n                              <div className=\"flex items-center\">\n                                <Star className=\"h-3 w-3 text-yellow-500 mr-1\" />\n                                <span className=\"text-foreground\">{item.rating}/10</span>\n                              </div>\n                            </div>\n                          )}\n\n                          {item.genre && (\n                            <div className=\"flex flex-wrap gap-1 mt-2\">\n                              <Badge variant=\"outline\" className=\"text-xs border-border text-muted-foreground\">\n                                {item.genre}\n                              </Badge>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {filteredItems.map((item) => {\n                  const StatusIcon = statusIcons[item.status as keyof typeof statusIcons];\n                  return (\n                    <Card key={item.id} className=\"bg-surface-1 border-border hover:bg-surface-2 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-4\">\n                              <h3 className=\"font-medium text-foreground\">{item.title}</h3>\n                              <Badge className={`${statusColors[item.status as keyof typeof statusColors]} flex items-center gap-1`}>\n                                <StatusIcon className=\"h-3 w-3\" />\n                                {item.status}\n                              </Badge>\n                              <Badge variant=\"outline\" className=\"border-border text-muted-foreground\">\n                                {item.type}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-6 mt-2 text-sm text-muted-foreground\">\n                              {item.progress && (\n                                <span>Progress: {item.progress}</span>\n                              )}\n                              {item.rating && (\n                                <div className=\"flex items-center\">\n                                  <Star className=\"h-3 w-3 text-yellow-500 mr-1\" />\n                                  <span>{item.rating}/10</span>\n                                </div>\n                              )}\n                              {item.genre && (\n                                <span>Genre: {item.genre}</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MediaCatalog;","size_bytes":12957},"client/src/components/QuickUpdateSidebar.tsx":{"content":"import { X, Plus } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { QuickUpdateItem } from \"@/lib/types\";\n\ninterface QuickUpdateSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  items?: QuickUpdateItem[];\n}\n\nexport default function QuickUpdateSidebar({ isOpen, onClose, items = [] }: QuickUpdateSidebarProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const incrementMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const response = await apiRequest('POST', `/api/media/${itemId}/increment`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Progress Updated\",\n        description: \"Progress incremented successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/media/in-progress'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update progress.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const response = await apiRequest('POST', `/api/media/${itemId}/complete`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Completed!\",\n        description: \"Item marked as completed successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/media/in-progress'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/achievements'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark item as complete.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleIncrement = (itemId: string) => {\n    incrementMutation.mutate(itemId);\n  };\n\n  const handleComplete = (itemId: string) => {\n    completeMutation.mutate(itemId);\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-80 bg-surface border-gray-700\">\n        <SheetHeader>\n          <SheetTitle className=\"text-xl font-bold\">⚡ Quick Update</SheetTitle>\n        </SheetHeader>\n        \n        <div className=\"mt-6 space-y-4\">\n          <p className=\"text-sm text-gray-400\">\n            Update progress for items you're currently watching/reading:\n          </p>\n          \n          {items.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No items in progress</p>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                Add some media and start watching/reading to see them here!\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {items.map((item) => (\n                <div key={item.id} className=\"bg-surface-2 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h4 className=\"font-medium\">{item.title}</h4>\n                      <p className=\"text-sm text-gray-400\">{item.type}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        Current: {item.progress || 'No progress'}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() => handleIncrement(item.id)}\n                      disabled={incrementMutation.isPending}\n                      className=\"flex-1 bg-primary-red hover:bg-primary-red/90 text-sm\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-1\" />\n                      +1 {item.type === 'Anime' || item.type === 'TV Shows' ? 'Episode' : 'Chapter'}\n                    </Button>\n                    <Button\n                      onClick={() => handleComplete(item.id)}\n                      disabled={completeMutation.isPending}\n                      variant=\"outline\"\n                      className=\"bg-surface-3 hover:bg-gray-600 border-gray-600 text-sm\"\n                    >\n                      ✓\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":4697},"client/src/components/RandomPicker.tsx":{"content":"import { useState } from \"react\";\nimport { Dice6 } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { MediaItem } from \"@shared/schema\";\n\nexport default function RandomPicker() {\n  const [filters, setFilters] = useState({\n    type: 'all',\n    status: 'planned'\n  });\n  const [randomResult, setRandomResult] = useState<MediaItem | null>(null);\n  const { toast } = useToast();\n\n  const randomPickMutation = useMutation({\n    mutationFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.type !== 'all') params.append('type', filters.type);\n      if (filters.status !== 'all') params.append('status', filters.status);\n      \n      const response = await apiRequest('GET', `/api/random?${params.toString()}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRandomResult(data);\n      toast({\n        title: \"Random Pick Selected!\",\n        description: `Here's something for you: ${data.title}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"No Results\",\n        description: \"No items found with the selected filters. Try changing your filters or add more media.\",\n        variant: \"destructive\",\n      });\n      setRandomResult(null);\n    },\n  });\n\n  const handleRandomPick = () => {\n    randomPickMutation.mutate();\n  };\n\n  return (\n    <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n      <h3 className=\"text-lg font-bold mb-4\">🎲 What to Watch Next?</h3>\n      \n      <div className=\"space-y-3 mb-4\">\n        <Select value={filters.type} onValueChange={(value) => setFilters(prev => ({ ...prev, type: value }))}>\n          <SelectTrigger className=\"bg-surface-2 border-gray-600\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-surface-2 border-gray-600\">\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"Anime\">Anime Only</SelectItem>\n            <SelectItem value=\"Manhwa\">Manhwa Only</SelectItem>\n            <SelectItem value=\"Pornhwa\">Pornhwa Only</SelectItem>\n            <SelectItem value=\"Novels\">Novels Only</SelectItem>\n            <SelectItem value=\"Movies\">Movies Only</SelectItem>\n            <SelectItem value=\"TV Shows\">TV Shows Only</SelectItem>\n          </SelectContent>\n        </Select>\n        \n        <Select value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>\n          <SelectTrigger className=\"bg-surface-2 border-gray-600\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-surface-2 border-gray-600\">\n            <SelectItem value=\"planned\">Not Started</SelectItem>\n            <SelectItem value=\"inprogress\">In Progress</SelectItem>\n            <SelectItem value=\"all\">All Status</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <Button \n        onClick={handleRandomPick}\n        disabled={randomPickMutation.isPending}\n        className=\"w-full bg-[#7A1927] hover:bg-[#9d2332] py-3 font-medium text-white\"\n      >\n        <Dice6 className=\"w-4 h-4 mr-2\" />\n        {randomPickMutation.isPending ? 'Picking...' : 'Pick Something Random!'}\n      </Button>\n      \n      {/* Random Result Display */}\n      {randomResult && (\n        <div className=\"mt-4 p-4 bg-surface-2 rounded-lg text-center\">\n          <div className=\"text-sm text-gray-400 mb-1\">{randomResult.type}</div>\n          <div className=\"font-medium text-accent\">{randomResult.title}</div>\n          {randomResult.genre && (\n            <div className=\"text-xs text-gray-500 mt-1\">{randomResult.genre}</div>\n          )}\n          {randomResult.progress && (\n            <div className=\"text-xs text-green-400 mt-1\">Progress: {randomResult.progress}</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4097},"client/src/components/RecentMediaList.tsx":{"content":"import { Film, Book, Heart, BookOpen, TvIcon, PlayCircle, Image } from \"lucide-react\";\nimport type { MediaItem } from \"@shared/schema\";\n\ninterface RecentMediaListProps {\n  items?: MediaItem[];\n  isLoading?: boolean;\n}\n\nconst getMediaIcon = (type: string) => {\n  switch (type) {\n    case 'Anime': return TvIcon;\n    case 'Manhwa': return Book;\n    case 'Pornhwa': return Heart;\n    case 'Novels': return BookOpen;\n    case 'Movies': return Film;\n    case 'TV Shows': return PlayCircle;\n    default: return Image;\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'To Watch':\n    case 'To Read': return 'bg-amber-500/20 text-amber-400';\n    case 'In Progress': return 'bg-green-500/20 text-green-400';\n    case 'Watched':\n    case 'Read': return 'bg-blue-500/20 text-blue-400';\n    case 'Dropped': return 'bg-red-500/20 text-red-400';\n    default: return 'bg-gray-500/20 text-gray-400';\n  }\n};\n\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffTime = Math.abs(now.getTime() - date.getTime());\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 1) return '1 day ago';\n  if (diffDays < 7) return `${diffDays} days ago`;\n  if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n  return `${Math.ceil(diffDays / 30)} months ago`;\n};\n\nexport default function RecentMediaList({ items = [], isLoading }: RecentMediaListProps) {\n  if (isLoading) {\n    return (\n      <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold\">Recently Added</h3>\n        </div>\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"flex items-center space-x-4 p-3 bg-surface-2 rounded-lg animate-pulse\">\n              <div className=\"w-12 h-16 bg-gray-600 rounded-lg\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-gray-600 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-1/2\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-1/4\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold\">Recently Added</h3>\n        <a href=\"#\" className=\"text-primary-red hover:text-accent text-sm\">View All</a>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {items.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-400\">No recent items</p>\n            <p className=\"text-sm text-gray-500 mt-2\">Add some media to see them here!</p>\n          </div>\n        ) : (\n          items.slice(0, 5).map((item) => {\n            const Icon = getMediaIcon(item.type);\n            return (\n              <div key={item.id} className=\"flex items-center space-x-4 p-3 bg-surface-2 rounded-lg hover:bg-surface-3 transition-colors\">\n                <div className=\"w-12 h-16 bg-gradient-to-br from-primary-red to-accent rounded-lg flex items-center justify-center\">\n                  <Icon className=\"text-white w-5 h-5\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium\">{item.title}</h4>\n                  <p className=\"text-sm text-gray-400\">{item.type}</p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(item.status)}`}>\n                      {item.status}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {item.dateAdded ? formatDate(item.dateAdded.toString()) : 'Recently'}\n                    </span>\n                  </div>\n                </div>\n                <button className=\"text-gray-400 hover:text-white\">\n                  <PlayCircle className=\"w-5 h-5\" />\n                </button>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4282},"client/src/components/Sidebar.tsx":{"content":"import { Film, TvIcon, Book, BookOpen, Heart, PlayCircle, Plus, Search, Library, Clock, Trophy, Settings, Download, ChartLine, Grid } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport type { MediaStats } from \"@/lib/types\";\n\ninterface SidebarProps {\n  stats?: MediaStats;\n  onAddMedia: () => void;\n  onQuickUpdate: () => void;\n  onViewCatalog: () => void;\n}\n\nexport default function Sidebar({ stats, onAddMedia, onQuickUpdate, onViewCatalog }: SidebarProps) {\n  const [location] = useLocation();\n  \n  // Media types matching your specifications\n  const mediaTypes = [\n    { name: 'Anime', icon: TvIcon, count: stats?.byType?.Anime?.total || 0 },\n    { name: 'Manhwa', icon: Book, count: stats?.byType?.Manhwa?.total || 0 },\n    { name: 'Pornhwa', icon: Heart, count: stats?.byType?.Pornhwa?.total || 0 },\n    { name: 'Novels', icon: BookOpen, count: stats?.byType?.Novels?.total || 0 },\n    { name: 'Movies', icon: Film, count: stats?.byType?.Movies?.total || 0 },\n    { name: 'TV Shows', icon: PlayCircle, count: stats?.byType?.['TV Shows']?.total || 0 },\n  ];\n\n  return (\n    <div className=\"w-64 bg-surface border-r border-gray-700 flex-shrink-0\">\n      {/* Logo/Header */}\n      <div className=\"p-6 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-[#7A1927] rounded-lg flex items-center justify-center\">\n            <Film className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold\">Media Tracker</h1>\n            <p className=\"text-xs text-gray-400\">Complete Media Manager</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"p-4\">\n        <div className=\"space-y-2\">\n          <Link href=\"/\" className={`sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 ${\n            location === '/' ? 'text-white bg-[#7A1927]' : 'text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927]'\n          }`}>\n            <ChartLine size={16} />\n            <span>Dashboard</span>\n          </Link>\n          <button \n            onClick={onAddMedia}\n            className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 w-full text-left hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927] transition-all duration-200\"\n          >\n            <Plus size={16} />\n            <span>Add Media</span>\n          </button>\n          <Link href=\"/library\" className={`sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 ${\n            location === '/library' ? 'text-white bg-[#7A1927]' : 'text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927]'\n          }`}>\n            <Library size={16} />\n            <span>Full Library</span>\n          </Link>\n          <Link href=\"/achievements\" className={`sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 ${\n            location === '/achievements' ? 'text-white bg-[#7A1927]' : 'text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927]'\n          }`}>\n            <Trophy size={16} />\n            <span>Achievements</span>\n          </Link>\n          <Link href=\"/settings\" className={`sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 ${\n            location === '/settings' ? 'text-white bg-[#7A1927]' : 'text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927]'\n          }`}>\n            <Settings size={16} />\n            <span>Settings</span>\n          </Link>\n        </div>\n\n        {/* Media Categories */}\n        <div className=\"mt-6\">\n          <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3\">Media Library</h3>\n          <div className=\"space-y-1\">\n            {mediaTypes.map((type) => {\n              const Icon = type.icon;\n              return (\n                <Link \n                  key={type.name}\n                  href={`/library?type=${encodeURIComponent(type.name)}`}\n                  className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-[#7A1927] transition-all duration-200\"\n                >\n                  <Icon size={16} className=\"text-[#7A1927]\" />\n                  <span>{type.name}</span>\n                  <span className=\"ml-auto bg-surface-2 px-2 py-1 rounded text-xs\">\n                    {type.count}\n                  </span>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n\n\n\n        {/* Quick Actions */}\n        <div className=\"mt-6\">\n          <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3\">Browse</h3>\n          <div className=\"space-y-1\">\n            <button \n              onClick={onViewCatalog}\n              className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 w-full text-left hover:bg-surface-2 hover:border-l-4 hover:border-red-500 transition-all duration-200\"\n            >\n              <Grid size={16} />\n              <span>View Catalog</span>\n            </button>\n            <button \n              onClick={onQuickUpdate}\n              className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 w-full text-left hover:bg-surface-2 hover:border-l-4 hover:border-red-500 transition-all duration-200\"\n            >\n              <Clock size={16} />\n              <span>Quick Update</span>\n            </button>\n            <a href=\"#\" className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-red-500 transition-all duration-200\">\n              <Trophy size={16} />\n              <span>Achievements</span>\n            </a>\n          </div>\n        </div>\n\n        {/* Settings */}\n        <div className=\"mt-6\">\n          <div className=\"space-y-1\">\n            <a href=\"#\" className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-red-500 transition-all duration-200\">\n              <Settings size={16} />\n              <span>Settings</span>\n            </a>\n            <a href=\"#\" className=\"sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 hover:bg-surface-2 hover:border-l-4 hover:border-red-500 transition-all duration-200\">\n              <Download size={16} />\n              <span>Export Data</span>\n            </a>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":6667},"client/src/components/StatsCards.tsx":{"content":"import { List, Check, Play, Clock } from \"lucide-react\";\nimport type { MediaStats } from \"@/lib/types\";\n\ninterface StatsCardsProps {\n  stats?: MediaStats;\n}\n\nexport default function StatsCards({ stats }: StatsCardsProps) {\n  const totalCompleted = (stats?.byStatus?.['Watched'] || 0) + (stats?.byStatus?.['Read'] || 0);\n  const completionRate = stats?.total ? Math.round((totalCompleted / stats.total) * 100) : 0;\n\n  const cards = [\n    {\n      title: \"Total Items\",\n      value: stats?.total || 0,\n      subtitle: \"+5 this week\",\n      icon: List,\n      color: \"bg-[#7A1927]/20 text-[#7A1927]\",\n    },\n    {\n      title: \"Completed\",\n      value: totalCompleted,\n      subtitle: `${completionRate}% completion rate`,\n      icon: Check,\n      color: \"bg-green-500/20 text-green-400\",\n    },\n    {\n      title: \"In Progress\",\n      value: stats?.inProgressCount || 0,\n      subtitle: \"Active watching\",\n      icon: Play,\n      color: \"bg-[#7A1927]/20 text-[#7A1927]\",\n    },\n    {\n      title: \"Time Spent\",\n      value: \"342h\",\n      subtitle: \"This month: 28h\",\n      icon: Clock,\n      color: \"bg-blue-500/20 text-blue-400\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {cards.map((card) => {\n        const Icon = card.icon;\n        return (\n          <div key={card.title} className=\"bg-surface rounded-xl p-6 border border-gray-700 hover-scale\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">{card.title}</p>\n                <p className=\"text-3xl font-bold\">{card.value}</p>\n                <p className=\"text-green-400 text-sm mt-1\">{card.subtitle}</p>\n              </div>\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${card.color}`}>\n                <Icon className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1974},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface MediaStats {\n  total: number;\n  byStatus: Record<string, number>;\n  byType: Record<string, {\n    total: number;\n    completed: number;\n    inProgress: number;\n    planned: number;\n    dropped: number;\n  }>;\n  byGenre: Record<string, number>;\n  topGenres: Array<{ name: string; count: number }>;\n  inProgressCount: number;\n  completedCount: number;\n  recentlyAdded: any[];\n}\n\nexport interface MediaFilters {\n  type?: string;\n  status?: string;\n  genre?: string;\n}\n\nexport interface QuickUpdateItem {\n  id: string;\n  title: string;\n  type: string;\n  currentProgress?: string;\n  progress?: string;\n  episode?: number;\n  chapter?: number;\n  season?: number;\n}\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  unlockedAt?: string;\n}\n","size_bytes":804},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}","size_bytes":168},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useKeyboardShortcuts, KeyboardShortcutsHelp } from \"@/hooks/useKeyboardShortcuts\";\nimport Sidebar from \"@/components/Sidebar\";\nimport HeaderBar from \"@/components/HeaderBar\";\nimport StatsCards from \"@/components/StatsCards\";\nimport RecentMediaList from \"@/components/RecentMediaList\";\nimport CurrentlyActive from \"@/components/CurrentlyActive\";\nimport MediaCatalog from \"@/components/MediaCatalog\";\nimport StatsOverview from \"@/components/StatsOverview\";\nimport CatalogPreview from \"@/components/CatalogPreview\";\nimport SmartCollections from \"@/components/SmartCollections\";\nimport AchievementWidget from \"@/components/AchievementWidget\";\nimport AddMediaModal from \"@/components/AddMediaModal\";\nimport QuickUpdateSidebar from \"@/components/QuickUpdateSidebar\";\nimport QuickProgressModal from \"@/components/QuickProgressModal\";\nimport RandomPicker from \"@/components/RandomPicker\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut, User } from \"lucide-react\";\nimport type { MediaStats, QuickUpdateItem } from \"@/lib/types\";\nimport type { MediaItem, Achievement } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isQuickUpdateOpen, setIsQuickUpdateOpen] = useState(false);\n  const [isQuickProgressOpen, setIsQuickProgressOpen] = useState(false);\n  const [isCatalogOpen, setIsCatalogOpen] = useState(false);\n  const [showShortcutsHelp, setShowShortcutsHelp] = useState(false);\n\n  // Keyboard shortcuts\n  useKeyboardShortcuts({\n    onAddMedia: () => setIsAddModalOpen(true),\n    onOpenLibrary: () => setIsCatalogOpen(true),\n    onQuickUpdate: () => setIsQuickProgressOpen(true),\n    onShowHelp: () => setShowShortcutsHelp(true)\n  });\n\n  const { data: stats, isLoading: statsLoading } = useQuery<MediaStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  const { data: recentItems, isLoading: recentLoading } = useQuery<MediaItem[]>({\n    queryKey: ['/api/recent'],\n  });\n\n  const { data: inProgressItems, isLoading: progressLoading } = useQuery<MediaItem[]>({\n    queryKey: ['/api/media/in-progress'],\n  });\n\n  const { data: achievements, isLoading: achievementsLoading } = useQuery<Achievement[]>({\n    queryKey: ['/api/achievements'],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading your media library...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar \n        stats={stats} \n        onAddMedia={() => setIsAddModalOpen(true)} \n        onQuickUpdate={() => setIsQuickUpdateOpen(true)}\n        onViewCatalog={() => setIsCatalogOpen(true)} \n      />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <HeaderBar onAddMedia={() => setIsAddModalOpen(true)} />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"space-y-6\">\n            <SmartCollections onOpenCatalog={() => setIsCatalogOpen(true)} />\n            <StatsCards stats={stats} />\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8\">\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"bg-surface rounded-xl p-6 border border-gray-700\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold\">Weekly Progress</h3>\n                  <select className=\"bg-surface-2 border border-gray-600 rounded-lg px-3 py-1 text-sm\">\n                    <option>Last 7 days</option>\n                    <option>Last 30 days</option>\n                    <option>Last 3 months</option>\n                  </select>\n                </div>\n                \n                <div className=\"h-64 bg-surface-2 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-chart-line text-4xl text-gray-500 mb-4\"></i>\n                    <p className=\"text-gray-400\">Progress Chart</p>\n                    <p className=\"text-sm text-gray-500\">Chart visualization coming soon</p>\n                  </div>\n                </div>\n              </div>\n\n              <RecentMediaList items={recentItems} isLoading={recentLoading} />\n            </div>\n\n            <div className=\"space-y-6\">\n              <CurrentlyActive \n                items={inProgressItems} \n                isLoading={progressLoading}\n                onQuickUpdate={() => setIsQuickUpdateOpen(true)}\n              />\n\n              <CatalogPreview onOpenCatalog={() => setIsCatalogOpen(true)} />\n\n              <AchievementWidget \n                achievements={achievements} \n                isLoading={achievementsLoading} \n              />\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <AddMediaModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)} \n      />\n      \n      <QuickUpdateSidebar \n        isOpen={isQuickUpdateOpen}\n        onClose={() => setIsQuickUpdateOpen(false)}\n        items={inProgressItems as QuickUpdateItem[] | undefined}\n      />\n      \n      <MediaCatalog \n        isOpen={isCatalogOpen}\n        onClose={() => setIsCatalogOpen(false)}\n      />\n\n      <QuickProgressModal\n        isOpen={isQuickProgressOpen}\n        onClose={() => setIsQuickProgressOpen(false)}\n      />\n\n      <KeyboardShortcutsHelp \n        isOpen={showShortcutsHelp}\n        onClose={() => setShowShortcutsHelp(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":5896},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Film, Book, Tv, Play, Star, Users, Target, Zap, Search, Archive } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\" style={{ background: '#0a0a0a' }}>\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-6\">\n            <span className=\"text-6xl mb-4 block\">📺</span>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-white via-gray-200 to-red-400 bg-clip-text text-transparent\">\n              Complete Media Tracker\n            </h1>\n          </div>\n          <p className=\"text-xl md:text-2xl text-gray-300 mb-8 max-w-4xl mx-auto leading-relaxed\">\n            Your personal AI-powered entertainment assistant. Track anime, manhwa, novels, movies, TV shows, and more. \n            Get smart recommendations, unlock achievements, and organize your entire media library.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"text-lg px-12 py-6 bg-[#7A1927] hover:bg-[#9d2332] border-[#7A1927] hover:border-[#9d2332] text-white font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n            onClick={() => window.location.href = '/api/login'}\n          >\n            Start Your Journey\n          </Button>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Film className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Multiple Media Types</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Track movies, TV shows, anime, books, manga, novels, manhwa, pornhwa, and more expandable categories\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Target className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Progress Tracking</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Monitor your progress through episodes, chapters, and completion status with detailed analytics\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Star className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Ratings & Reviews</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Rate and review your completed media with personal notes and detailed feedback\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Users className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Achievement System</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Unlock achievements and track your entertainment milestones and reading patterns\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Zap className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Smart Organization</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Browse your collection with filters, search, and categorization with auto-archiving\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-[#141414] border-gray-700 hover:border-[#7A1927] transition-all duration-300 rounded-xl overflow-hidden group hover:shadow-2xl hover:shadow-[#7A1927]/20\">\n            <CardHeader className=\"pb-6\">\n              <div className=\"w-16 h-16 bg-[#7A1927]/20 rounded-xl flex items-center justify-center mb-6 group-hover:bg-[#7A1927]/30 transition-colors\">\n                <Archive className=\"w-8 h-8 text-[#7A1927]\" />\n              </div>\n              <CardTitle className=\"text-white text-xl\">Future Integration</CardTitle>\n              <CardDescription className=\"text-gray-300 text-base leading-relaxed\">\n                Planned integration with streaming services and reading platforms for seamless tracking\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* Supported Media Categories */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-8 text-white\">\n            Supported Media Categories\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto\">\n            <div className=\"bg-[#141414] rounded-xl p-6 border border-gray-700 hover:border-[#7A1927] transition-all duration-300 group\">\n              <Film className=\"w-12 h-12 text-[#7A1927] mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n              <h3 className=\"text-white font-semibold text-lg\">Movies</h3>\n            </div>\n            <div className=\"bg-[#141414] rounded-xl p-6 border border-gray-700 hover:border-[#7A1927] transition-all duration-300 group\">\n              <Tv className=\"w-12 h-12 text-[#7A1927] mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n              <h3 className=\"text-white font-semibold text-lg\">TV Shows</h3>\n            </div>\n            <div className=\"bg-[#141414] rounded-xl p-6 border border-gray-700 hover:border-[#7A1927] transition-all duration-300 group\">\n              <Play className=\"w-12 h-12 text-[#7A1927] mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n              <h3 className=\"text-white font-semibold text-lg\">Anime</h3>\n            </div>\n            <div className=\"bg-[#141414] rounded-xl p-6 border border-gray-700 hover:border-[#7A1927] transition-all duration-300 group\">\n              <Book className=\"w-12 h-12 text-[#7A1927] mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n              <h3 className=\"text-white font-semibold text-lg\">Books/Manga</h3>\n            </div>\n          </div>\n          <p className=\"text-gray-400 mt-6 text-lg max-w-3xl mx-auto\">\n            Plus novels, manhwa, manhwa, pornhwa, and more expandable categories\n          </p>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center\">\n          <div className=\"bg-gradient-to-r from-[#7A1927]/20 to-[#7A1927]/10 rounded-2xl p-12 border border-[#7A1927]/30\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6 text-white\">\n              Ready to Transform Your Media Experience?\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n              Join thousands who have organized their entertainment with our intelligent tracking platform\n            </p>\n            <Button \n              size=\"lg\" \n              className=\"text-xl px-16 py-8 bg-[#7A1927] hover:bg-[#9d2332] border-[#7A1927] hover:border-[#9d2332] text-white font-bold rounded-xl transition-all duration-300 shadow-2xl hover:shadow-3xl transform hover:scale-105\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              Get Started Now\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9461},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1848},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProgressProps {\n  value: number;\n  className?: string;\n}\n\nexport function Progress({ value, className }: ProgressProps) {\n  return (\n    <div className={cn(\"w-full bg-gray-700 rounded-full overflow-hidden\", className)}>\n      <div \n        className=\"h-full bg-gradient-to-r from-green-500 to-blue-500 transition-all duration-300 ease-in-out\"\n        style={{ width: `${Math.min(100, Math.max(0, value))}%` }}\n      />\n    </div>\n  );\n}","size_bytes":508},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1881},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/MediaLibrary.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Grid, List, Search, Filter, Plus, MoreHorizontal, Play, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { MediaItem } from \"@shared/schema\";\n// Import EditMediaModal when it's needed\n\ninterface MediaLibraryProps {\n  onAddMedia: () => void;\n  selectedType?: string;\n}\n\nconst cardSizes = {\n  small: { width: 140, height: 200 },\n  medium: { width: 180, height: 260 },\n  large: { width: 220, height: 320 },\n  xlarge: { width: 260, height: 380 }\n};\n\nexport default function MediaLibrary({ onAddMedia, selectedType }: MediaLibraryProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(selectedType || \"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [cardSize, setCardSize] = useState<keyof typeof cardSizes>(\"medium\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (selectedType) {\n      setTypeFilter(selectedType);\n    }\n  }, [selectedType]);\n\n  const { data: mediaItems = [], isLoading } = useQuery<MediaItem[]>({\n    queryKey: ['/api/media', typeFilter, statusFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (typeFilter !== 'all') params.append('type', typeFilter);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      \n      const response = await fetch(`/api/media?${params.toString()}`);\n      return response.json();\n    }\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/media/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recent'] });\n      toast({\n        title: \"Media Deleted\",\n        description: \"The media item has been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete media item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredItems = mediaItems.filter(item => \n    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (item.genre && item.genre.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleDelete = (id: string, title: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${title}\"? This action cannot be undone.`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const [editingItem, setEditingItem] = useState<MediaItem | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n  const handleEdit = (item: MediaItem) => {\n    setEditingItem(item);\n    setIsEditModalOpen(true);\n  };\n\n  const handleEditClose = () => {\n    setEditingItem(null);\n    setIsEditModalOpen(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'To Watch':\n      case 'To Read':\n        return 'bg-amber-500/20 text-amber-400';\n      case 'In Progress':\n        return 'bg-green-500/20 text-green-400';\n      case 'Watched':\n      case 'Read':\n        return 'bg-blue-500/20 text-blue-400';\n      case 'Dropped':\n        return 'bg-red-500/20 text-red-400';\n      default:\n        return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getPlaceholderImage = (type: string, title: string) => {\n    const colors = {\n      'Anime': '#7A1927',\n      'Movies': '#2563eb',\n      'TV Shows': '#059669',\n      'Manhwa': '#dc2626',\n      'Novels': '#7c3aed',\n      'Pornhwa': '#ec4899'\n    };\n    const color = colors[type as keyof typeof colors] || '#6b7280';\n    return `https://via.placeholder.com/300x450/${color.replace('#', '')}/fff?text=${encodeURIComponent(title)}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading media library...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">\n          {selectedType ? `${selectedType} Library` : 'Media Library'}\n        </h2>\n        \n        <div className=\"flex flex-wrap items-center gap-3\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search media...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-64 bg-surface-2 border-gray-600\"\n            />\n          </div>\n\n          {/* Filters */}\n          {!selectedType && (\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-40 bg-surface-2 border-gray-600\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-surface-2 border-gray-600\">\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"Anime\">Anime</SelectItem>\n                <SelectItem value=\"Movies\">Movies</SelectItem>\n                <SelectItem value=\"TV Shows\">TV Shows</SelectItem>\n                <SelectItem value=\"Manhwa\">Manhwa</SelectItem>\n                <SelectItem value=\"Novels\">Novels</SelectItem>\n                <SelectItem value=\"Pornhwa\">Pornhwa</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-40 bg-surface-2 border-gray-600\">\n              <SelectValue placeholder=\"Status\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-surface-2 border-gray-600\">\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"To Watch\">To Watch</SelectItem>\n              <SelectItem value=\"To Read\">To Read</SelectItem>\n              <SelectItem value=\"In Progress\">In Progress</SelectItem>\n              <SelectItem value=\"Watched\">Watched</SelectItem>\n              <SelectItem value=\"Read\">Read</SelectItem>\n              <SelectItem value=\"Dropped\">Dropped</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* View Controls */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setViewMode('grid')}\n              className=\"p-2\"\n            >\n              <Grid className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              className=\"p-2\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          <Button onClick={onAddMedia} className=\"bg-[#7A1927] hover:bg-[#9d2332]\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Media\n          </Button>\n        </div>\n      </div>\n\n      {/* Card Size Slider */}\n      {viewMode === 'grid' && (\n        <div className=\"flex items-center gap-4 max-w-xs\">\n          <Label className=\"text-sm\">Card Size:</Label>\n          <div className=\"flex-1\">\n            <Slider\n              value={[Object.keys(cardSizes).indexOf(cardSize)]}\n              onValueChange={(value) => {\n                const sizes = Object.keys(cardSizes) as (keyof typeof cardSizes)[];\n                setCardSize(sizes[value[0]]);\n              }}\n              max={3}\n              min={0}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n          <span className=\"text-sm text-gray-400 capitalize\">{cardSize}</span>\n        </div>\n      )}\n\n      {/* Results Count */}\n      <div className=\"text-sm text-gray-400\">\n        Showing {filteredItems.length} of {mediaItems.length} items\n      </div>\n\n      {/* Media Grid/List */}\n      {filteredItems.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">📚</div>\n          <h3 className=\"text-xl font-semibold mb-2\">No media found</h3>\n          <p className=\"text-gray-400 mb-4\">\n            {searchQuery \n              ? `No results for \"${searchQuery}\"`\n              : \"Start building your library by adding some media\"\n            }\n          </p>\n          <Button onClick={onAddMedia} className=\"bg-[#7A1927] hover:bg-[#9d2332]\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Your First Media\n          </Button>\n        </div>\n      ) : viewMode === 'grid' ? (\n        <div \n          className=\"grid gap-4 auto-fill\"\n          style={{\n            gridTemplateColumns: `repeat(auto-fill, minmax(${cardSizes[cardSize].width}px, 1fr))`\n          }}\n        >\n          {filteredItems.map((item) => (\n            <div\n              key={item.id}\n              className=\"bg-surface-2 rounded-lg overflow-hidden border border-gray-700 hover:border-gray-600 transition-all duration-200 hover:scale-105 group\"\n              style={{ height: cardSizes[cardSize].height }}\n            >\n              {/* Cover Image */}\n              <div className=\"relative h-4/5 overflow-hidden\">\n                <img\n                  src={item.imageUrl || getPlaceholderImage(item.type, item.title)}\n                  alt={item.title}\n                  className=\"w-full h-full object-cover transition-transform duration-200 group-hover:scale-110\"\n                  onError={(e) => {\n                    (e.target as HTMLImageElement).src = getPlaceholderImage(item.type, item.title);\n                  }}\n                />\n                \n                {/* Overlay with Actions */}\n                <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"secondary\" className=\"bg-white/20 hover:bg-white/30\">\n                      <Play className=\"w-4 h-4\" />\n                    </Button>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button size=\"sm\" variant=\"secondary\" className=\"bg-white/20 hover:bg-white/30\">\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent className=\"bg-surface-2 border-gray-600\">\n                        <DropdownMenuItem onClick={() => handleEdit(item)}>\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          className=\"text-red-400\"\n                          onClick={() => handleDelete(item.id, item.title)}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n\n                {/* Status Badge */}\n                <div className=\"absolute top-2 right-2\">\n                  <Badge className={`text-xs ${getStatusColor(item.status)}`}>\n                    {item.status}\n                  </Badge>\n                </div>\n\n                {/* Progress Badge */}\n                {item.progress && (\n                  <div className=\"absolute bottom-2 left-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs bg-black/50 text-white\">\n                      {item.progress}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n\n              {/* Title and Info */}\n              <div className=\"p-3 h-1/5 flex flex-col justify-center\">\n                <h3 className=\"font-medium text-sm line-clamp-2 mb-1\" title={item.title}>\n                  {item.title}\n                </h3>\n                <div className=\"flex items-center gap-2 text-xs text-gray-400\">\n                  <span>{item.type}</span>\n                  {item.releaseYear && (\n                    <>\n                      <span>•</span>\n                      <span>{item.releaseYear}</span>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        // List View\n        <div className=\"space-y-3\">\n          {filteredItems.map((item) => (\n            <div\n              key={item.id}\n              className=\"bg-surface-2 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <img\n                  src={item.imageUrl || getPlaceholderImage(item.type, item.title)}\n                  alt={item.title}\n                  className=\"w-12 h-16 object-cover rounded\"\n                  onError={(e) => {\n                    (e.target as HTMLImageElement).src = getPlaceholderImage(item.type, item.title);\n                  }}\n                />\n                \n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"font-medium truncate\">{item.title}</h3>\n                  <div className=\"flex items-center gap-2 text-sm text-gray-400 mt-1\">\n                    <span>{item.type}</span>\n                    {item.releaseYear && (\n                      <>\n                        <span>•</span>\n                        <span>{item.releaseYear}</span>\n                      </>\n                    )}\n                    {item.genre && (\n                      <>\n                        <span>•</span>\n                        <span className=\"truncate\">{item.genre}</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={`text-xs ${getStatusColor(item.status)}`}>\n                    {item.status}\n                  </Badge>\n                  {item.progress && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {item.progress}\n                    </Badge>\n                  )}\n                  \n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button size=\"sm\" variant=\"ghost\">\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"bg-surface-2 border-gray-600\">\n                      <DropdownMenuItem onClick={() => handleEdit(item)}>\n                        <Edit className=\"w-4 h-4 mr-2\" />\n                        Edit\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        className=\"text-red-400\"\n                        onClick={() => handleDelete(item.id, item.title)}\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Edit Modal */}\n      <EditMediaModal\n        isOpen={isEditModalOpen}\n        onClose={handleEditClose}\n        mediaItem={editingItem}\n      />\n    </div>\n  );\n}","size_bytes":16804}}}